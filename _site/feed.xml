<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Ben d'Ã©tat - Ben Scott's blog</title>
		<description></description>		
		<link>http://bendetat.com</link>
		<atom:link href="http://bendetat.com/feed.xml" rel="self" type="application/rss+xml" />
		
			<item>
				<author>Ben Scott - ben.scott@readify.net</author>
				<title>A short, executable rant on why I dislike object initialization syntax</title>
				<description>&lt;pre&gt;&lt;code&gt;void Main()
{
	// Why I ~~Hate~ Dislike Object Initialization Syntax
	// (executable in LinqPad)
	
	// There are three reasons why I despise initialization syntax for all but the most trivial
	// applications. The first two are fairly common and obvious:

	// 1. By design, a class built for object initialization syntax has to have public setters,
	// meaning that the resulting object is mutable.

	// 2. Because a constructor isn't used, there is no way for business rules or domain
	// invariants to be enforced. It is trivial to miss a value or set a value to something
	// that breaks a business rule, which can be difficult and annoying to debug and prevent.

	// The third reason is a bit less common and seems to defy expectations. It involves using
	// array initialization syntax inside of an object initializer.
	
	// This throws a null reference exception:
	
	//var brokens = new Brokens { Ints = { 1, 2, 3 } };
	
	// This is because Ints isn't initialised, and array initialization syntax is just 
	// syntactic sugar for foo.Add(1). You can see this if you try to declare your collection
	// as a straight-up array:
	
	//var brokensWithArray = new BrokensWithArray { Ints = { 1,2,3 } };
	// Build error: Cannot initialize object of type 'int[]' with a collection initializer
	
	// To get the same syntax to work, the class must initialize Ints in the
	// default constructor (a non-default constructor won't work):
	
	var works = new Works { Ints = { 1, 2, 3 } };
	
	// But as far as the consumer is concerned, Brokens and Works are equivalent (they have
	// matching public interfaces). This means hours of fun debugging!
	
	// This syntax also works, by initializing the list before adding the values:
	
	var worksUsingBrokens = new Brokens { Ints = new List&amp;lt;int&amp;gt;() { 1, 2, 3 } };
	
	// This also works with a struct:
	
	var brokensStruct = new BrokensStruct { Ints = new List&amp;lt;int&amp;gt;() { 1, 2, 3 } };
	
	// But since structs can't have parameterless public constructors, they can never use
	// the simpler object initialization syntax:
	
	//struct WorksStruct {
	//	public List&amp;lt;int&amp;gt; Ints { get; set; }
	//	public WorksStruct() {
	//		Ints = new List&amp;lt;int&amp;gt;();
	//	}
	//}
	// Build error: Structs cannot contain explicit parameterless constructors

	// The moral of the story: In C#, prefer using an explicit, parameterised constructor
	// over object initialization syntax. If you need a default constructor (eg. for
	// serialization), mark it with [Obsolete] to indicate your deep dissatifaction with
	// the code you have been forced to write.
}

// Define other methods and classes here
class Brokens {
	public List&amp;lt;int&amp;gt; Ints { get; set; }
}

class Works {
	public List&amp;lt;int&amp;gt; Ints { get; set; }
	
	public Works() {
		Ints = new List&amp;lt;int&amp;gt;();
	}
}

class BrokensWithArray {
	public int[] Ints { get; set; }
}

struct BrokensStruct {
	public List&amp;lt;int&amp;gt; Ints { get; set; }
}
&lt;/code&gt;&lt;/pre&gt;
</description>
				<pubDate>Fri, 22 May 2015 00:00:00 +1000</pubDate>
				<link>http://bendetat.com/a-short-executable-rant-on-why-i-dislike-object-initialization-syntax.html</link>
				<guid isPermaLink="true">http://bendetat.com/a-short-executable-rant-on-why-i-dislike-object-initialization-syntax.html</guid>
			</item>
		
			<item>
				<author>Ben Scott - ben.scott@readify.net</author>
				<title>Simplicity - pattern matching in C#</title>
				<description>&lt;p&gt;&lt;em&gt;TL;DR;&lt;/em&gt; Check out my awesome new library for &lt;a href=&quot;https://www.nuget.org/packages/Simplicity&quot;&gt;pattern matching in C# - Simplicity&lt;/a&gt; (&lt;a href=&quot;https://github.com/bendetat/Simplicity&quot;&gt;GitHub&lt;/a&gt;) or just copy the contents of the &lt;a href=&quot;https://github.com/bendetat/Simplicity/blob/master/src/Simplicity/PatternMatching.cs&quot;&gt;single file&lt;/a&gt; into your project for near-instant gratification.&lt;/p&gt;

&lt;p&gt;Pattern matching is a method of transforming data in some way, similar to &lt;code&gt;map&lt;/code&gt; (&lt;code&gt;.Select()&lt;/code&gt; in LINQ) but closer to a &lt;code&gt;switch&lt;/code&gt; statement in structure. It is a first class language construct in many functional languages including F#:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let name = &quot;Ben&quot;

let result =
	match name with 
	| &quot;Fiona&quot; -&amp;gt; &quot;It's Fiona!&quot;
	| &quot;Ben&quot; -&amp;gt; &quot;Hey it's me!&quot;
	| &quot;Steve&quot; -&amp;gt; &quot;Steve you rascal!&quot;
	| _ -&amp;gt; &quot;I don't know this person&quot;
	
// result = &quot;Hey it's me!&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;rsquo;s as deep an explanation of pattern matching in F# you&amp;rsquo;re going to get from me at this point, but this is conceptually similar to this &lt;code&gt;switch&lt;/code&gt; construct in C#:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var name = &quot;Ben&quot;;
string result;

switch (name) {
	case &quot;Fiona&quot;:
		result =  &quot;It's Fiona!&quot;;
		break;
	case &quot;Ben&quot;:
		result = &quot;Hey it's me!&quot;;
		break;
	case &quot;Steve&quot;:
		result = &quot;Steve you rascal!&quot;;
		break;
	default:
		result = &quot;I don't know this person&quot;;
		break;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is of course pretty average to read, relies on &lt;code&gt;break&lt;/code&gt; for execution control, and isn&amp;rsquo;t &amp;lsquo;pure&amp;rsquo; since &lt;code&gt;result&lt;/code&gt; is mutated during execution.&lt;/p&gt;

&lt;aside class=&quot;pull-right well&quot;&gt;
	&lt;p&gt;I also found a couple of extant libraries that provide similar (and possibly more) functionality:&lt;/p&gt;
	&lt;ul&gt;
		&lt;li&gt;&lt;a href=&quot;https://github.com/johansson/PatternMatching&quot;&gt;johansson/PatternMatching&lt;/a&gt;&lt;/li&gt;
		&lt;li&gt;&lt;a href=&quot;https://github.com/Patrickkk/FunctionalSharp&quot;&gt;Patrickkk/FunctionalSharp&lt;/a&gt;&lt;/li&gt;
	&lt;/ul&gt;
&lt;/aside&gt;

&lt;p&gt;When I found out about pattern matching I wanted to write code the same way in C#. I found a great &lt;a href=&quot;http://codebetter.com/matthewpodwysocki/2008/09/16/functional-c-pattern-matching/&quot;&gt;article by Matt Podwysocki&lt;/a&gt; and adapted and extended the code into a single-file library called &lt;a href=&quot;https://github.com/bendetat/Simplicity&quot;&gt;Simplicity&lt;/a&gt;. Install it &lt;a href=&quot;https://www.nuget.org/packages/Simplicity&quot;&gt;using NuGet&lt;/a&gt; (&lt;code&gt;install-package PatternMatching&lt;/code&gt;) or just &lt;a href=&quot;https://github.com/bendetat/Simplicity/blob/master/src/Simplicity/PatternMatching.cs&quot;&gt;copy the single file&lt;/a&gt; into your project.&lt;/p&gt;

&lt;p&gt;Now for the fun part. Here&amp;rsquo;s the above example using my library. It adds an generic extension method called &lt;code&gt;Match()&lt;/code&gt; which is the usual entry point. The match statement is built up using a fluent interface.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var name = &quot;Ben&quot;;
var result = name.Match()
	.With(x =&amp;gt; x == &quot;Fiona&quot;, &quot;It's Fiona!&quot;)
	.With(x =&amp;gt; x == &quot;Ben&quot;, &quot;Hey it's me!&quot;)
	.With(x =&amp;gt; x == &quot;Steve&quot;, &quot;Steve you rascal!&quot;)
	.Else(&quot;I don't know this person&quot;)
	.Do();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The result can be an action, taking the value as a parameter:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var name = &quot;George&quot;;
var result = name.Match()
	.With(x =&amp;gt; x == &quot;Fiona&quot;, &quot;It's Fiona!&quot;)
	.With(x =&amp;gt; x == &quot;Ben&quot;, x =&amp;gt; string.Format(&quot;Hey it's {0}!&quot;, x))
	.With(x =&amp;gt; x == &quot;Steve&quot;, &quot;Steve you rascal!&quot;)
	.Else(x =&amp;gt; string.Format(&quot;I don't know {0}&quot;, x))
	.Do();

// result = &quot;I don't know George&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;Else&lt;/code&gt; value is optional but if it falls through without matching and there&amp;rsquo;s no &lt;code&gt;Else&lt;/code&gt; value it throws an &lt;code&gt;IncompletePatternMatchException&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var name = &quot;Elton&quot;;
var result = name.Match()
	.With(x =&amp;gt; x == &quot;John&quot;, &quot;matched&quot;)
	.With(x =&amp;gt; x == &quot;Paul&quot;, &quot;matched&quot;)
	.Do();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;F# has a wicked type system that C# can&amp;rsquo;t match, but I can set the output type to dynamic:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var question = &quot;meaning of life&quot;;
var result = question.Match().WithOutputType&amp;lt;dynamic&amp;gt;()
    .With(x =&amp;gt; x.Contains(&quot;roads&quot;), &quot;Blowing in the wind&quot;)
    .With(x =&amp;gt; x.Contains(&quot;life&quot;), 42)
    .Else(&quot;Ask again later&quot;)
    .Do();

// result = (int)42
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;Do()&lt;/code&gt; call evaluates the patterns against the value being matched on, but there&amp;rsquo;s also an implicit cast operator to the output type that removes the need much of the time. When &lt;code&gt;total&lt;/code&gt; is calculated, the &lt;code&gt;gstRate&lt;/code&gt; match is implicitly cast to &lt;code&gt;decimal&lt;/code&gt; from the pattern match type, which is &lt;code&gt;PatternMatchOnValue&amp;lt;string, decimal&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var country = &quot;NZ&quot;;
var gstRate = country.Match()
	.With(&quot;AU&quot;, 0.1m)
	.With(&quot;NZ&quot;, 0.15m)
	.Else(0.0m);

var total = 2300.0m * (1.0m + gstRate);

// total = 2645.0m
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All of the examples up until now have used the &lt;code&gt;Match()&lt;/code&gt; generic extension method to apply the match statement to the value that gets called with &lt;code&gt;Match()&lt;/code&gt;. I&amp;rsquo;ve also implemented matching without an input value using the static &lt;code&gt;PatternMatch.Match()&lt;/code&gt; method. This lets you write a match statement that can do things like match on different values or methods, or close over a local value as below:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var eggs = 2;
var basket = PatternMatch.Match()
	.With(() =&amp;gt; eggs == 0, &quot;No eggs&quot;)
	.With(() =&amp;gt; eggs == 1, &quot;One egg&quot;)
	.With(() =&amp;gt; eggs &amp;gt; 1, string.Format(&quot;{0} eggs&quot;, eggs))
	.Else(&quot;Invalid number of eggs&quot;);

var twoEggs = basket.Do();
eggs = 0;
var zeroEggs = basket.Do();
eggs = int.MinValue;
var invalidEggs = basket.Do();

// twoEggs = &quot;2 eggs&quot;
// zeroEggs = &quot;No eggs&quot;
// invalidEggs = &quot;Invalid number of eggs&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There&amp;rsquo;s also a &lt;code&gt;.ToFunc()&lt;/code&gt; method that gets rid of the &lt;code&gt;.Do()&lt;/code&gt; call by transforming the match statement into a &lt;code&gt;Func&amp;lt;TOut&amp;gt;&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var footwear = &quot;boots&quot;;
var intention = PatternMatch.Match()
	.With(() =&amp;gt; footwear == &quot;red slippers&quot;, &quot;following the Yellow Brick Road&quot;)
	.With(() =&amp;gt; footwear == &quot;boots&quot;, &quot;walking&quot;)
	.With(() =&amp;gt; footwear == &quot;these shoes&quot;, &quot;I don't think so&quot;)
	.ToFunc();

var walking = intention();
footwear = &quot;these shoes&quot;;
var noWayJose = intention();

// walking = &quot;walking&quot;
// noWayJose = &quot;I don't think so&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is getting quite DRY but closing over a local mutable value will have the purists climbing the walls, myself included. So the final form goes back to processing an input, deferred until the match statement is executed. The syntax is a little verbose because C# can&amp;rsquo;t infer the types of the lambdas without help, but I&amp;rsquo;m pretty happy with the result - a reusable &lt;code&gt;Func&amp;lt;TIn, TOut&amp;gt;&lt;/code&gt; value that is defined declaratively with no flow control or mutated state:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var processName = PatternMatch.Match&amp;lt;string, string&amp;gt;()
	.With(x =&amp;gt; x.StartsWith(&quot;A&quot;), &quot;Starts with A&quot;)
	.With(x =&amp;gt; x.StartsWith(&quot;B&quot;), &quot;Starts with B&quot;)
	.With(x =&amp;gt; x.StartsWith(&quot;C&quot;), &quot;Starts with C&quot;)
	.With(x =&amp;gt; x.StartsWith(&quot;D&quot;), &quot;Starts with D&quot;)
	.With(x =&amp;gt; x.StartsWith(&quot;E&quot;), &quot;Starts with E&quot;)
	.With(x =&amp;gt; x.StartsWith(&quot;F&quot;), x =&amp;gt; string.Format(&quot;{0} starts with F&quot;, x))
	.Else(&quot;Unknown&quot;)
	.ToFunc();
	
var alfred = processName(&quot;Alfred&quot;);
var fiona = processName(&quot;Fiona&quot;);
var ben = processName(&quot;Ben&quot;);
var xerces = processName(&quot;Xerces&quot;);

// alfred = &quot;Starts with A&quot;
// fiona = &quot;Fiona starts with F&quot;
// ben = &quot;Starts with B&quot;
// xerces = &quot;Unknown&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that this isn&amp;rsquo;t especially performant! The match statement is built up as a list of expressions that are then looped through naively when evaluated. This could probably be improved using some form of caching. &lt;a href=&quot;https://github.com/bendetat/Simplicity&quot;&gt;Submit a pull request!&lt;/a&gt;&lt;/p&gt;
</description>
				<pubDate>Fri, 15 May 2015 00:00:00 +1000</pubDate>
				<link>http://bendetat.com/simplicity-pattern-matching-in-c-sharp.html</link>
				<guid isPermaLink="true">http://bendetat.com/simplicity-pattern-matching-in-c-sharp.html</guid>
			</item>
		
			<item>
				<author>Ben Scott - ben.scott@readify.net</author>
				<title>Class and method invariants and validation</title>
				<description>&lt;p&gt;I was chatting to my man &lt;a href=&quot;https://twitter.com/todthomson&quot;&gt;Tod&lt;/a&gt; and we came up with a cool pattern for validating both class and method invariants in a way that seems to scale.&lt;/p&gt;

&lt;p&gt;Given a simple class &lt;code&gt;Person&lt;/code&gt;, with some methods for updating from another &lt;code&gt;Person&lt;/code&gt; and updating just the name:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class Person
{
	public string Name { get; private set; }
	private int _age;

	public Person(string name, int age)
	{
		Name = name;
		_age = age;
	}

	public void UpdateFrom(Person person)
	{
		Name = person.Name;
		_age = person._age;
	}

	public void UpdateName(string name)
	{
		Name = name;
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The private &lt;code&gt;_age&lt;/code&gt; is just to demonstrate a private field.&lt;/p&gt;

&lt;p&gt;First add some validation on the constructor. I&amp;rsquo;m using my &lt;a href=&quot;https://github.com/bendetat/check&quot;&gt;Check&lt;/a&gt; library but this could be implemented in any way that throws an exception if the rule isn&amp;rsquo;t set.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public Person(string name, int age)
{
	// method invariants
	Check.That(() =&amp;gt; name).IsNotNullOrEmpty();
	Check.That(() =&amp;gt; age &amp;gt;= 0);

	Name = name;
	_age = age;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is what I&amp;rsquo;m calling a &lt;em&gt;method invariant&lt;/em&gt; - a set of rules that validate the input to a method.&lt;/p&gt;

&lt;p&gt;We also want to validate the state of a person at the end of the method.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;static void Validate(Person person)
{
	Check.That(() =&amp;gt; person.Name).IsNotNullOrEmpty();
	Check.That(() =&amp;gt; person._ge &amp;gt;= 0);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This should happen at the end of each method that changes the state of the person. For example, the constructor becomes:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public Person(string name, int age)
{
	// method invariants
	Check.That(() =&amp;gt; name).IsNotNullOrEmpty();
	Check.That(() =&amp;gt; age &amp;gt;= 0);

	Name = name;
	_age = age;

	// validate myself
	Validate(this);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;UpdateName()&lt;/code&gt; method needs to do the same thing:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public void UpdateName(string name)
{
	Check.That(() =&amp;gt; name).IsNotNullOrEmpty();

	Name = name;

	Validate(this);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;UpdateFrom()&lt;/code&gt; method can validate the entire incoming person:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public void UpdateFrom(Person person)
{
	Validate(person);

	Name = person.Name;
	_age = person._age;

	Validate(this);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Shweet.&lt;/p&gt;
</description>
				<pubDate>Tue, 24 Feb 2015 00:00:00 +1000</pubDate>
				<link>http://bendetat.com/class-and-method-invariants-and-validation.html</link>
				<guid isPermaLink="true">http://bendetat.com/class-and-method-invariants-and-validation.html</guid>
			</item>
		
			<item>
				<author>Ben Scott - ben.scott@readify.net</author>
				<title>Karma and Mocha for AngularJS testing</title>
				<description>&lt;h2 id=&quot;setting-up-karma-with-mocha-phantomjs-and-chai&quot;&gt;Setting up Karma with Mocha, PhantomJS and Chai&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;m following the &lt;a href=&quot;http://karma-runner.github.io/0.12/intro/installation.html&quot;&gt;installation guide&lt;/a&gt; at &lt;a href=&quot;http://karma-runner.github.io&quot;&gt;karma-runner.github.io&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I already have Node.js and NPM installed so I won&amp;rsquo;t go through the process for that, but I&amp;rsquo;ve found the easiest way to get running is via &lt;a href=&quot;https://chocolatey.org/packages/nodejs.install&quot;&gt;Chocolatey NuGet&lt;/a&gt; using &lt;code&gt;choco install nodejs.install&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;First up, install Karma:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install --save-dev karma
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now install some plugins for Karma. The installation instructions are for Jasmine and the Chrome launcher, but I want &lt;a href=&quot;http://mochajs.org/&quot;&gt;Mocha&lt;/a&gt; as the testing framework and &lt;a href=&quot;http://phantomjs.org/&quot;&gt;PhantomJS&lt;/a&gt; for a headless (window-less) test environment.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;Huh? I thought Karma was the test environment&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Karma is a test &lt;em&gt;runner&lt;/em&gt;. Much like how NUnit has a test runner .exe which can run test assemblies that use the NUnit test framework assemblies. In this case the test runner can run tests based on different test frameworks - in this case. Mocha. Because I&amp;rsquo;m setting up tests for client-side JavaScript - in particular, I&amp;rsquo;m going to use AngularJS - the tests need to be run inside a browser environment so that there is a usable DOM. PhantomJS is a WebKit based headless browser that will allow tests to run without opening a browser window.&lt;/p&gt;

&lt;p&gt;So now the Karma plugins for Mocha and PhantomJS need to be installed. The plugins have Mocha and PhantomJS as dependencies, so only the plugins need to be installed. I also want to use &lt;a href=&quot;http://chaijs.com/&quot;&gt;Chai&lt;/a&gt; as the assertion library.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install --save-dev karma-mocha
npm install --save-dev karma-phantomjs-launcher
npm install --save-dev karma-chai
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To make it easier to run &lt;code&gt;karma&lt;/code&gt; from the command line you can install &lt;code&gt;karma-cli&lt;/code&gt; globally, which will run the local version without having to specify the path to karma (&lt;code&gt;node node_modules/karma/bin/karma&lt;/code&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install -g karma-cli
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Karma needs a configuration file. Generate it using &lt;code&gt;karma init&lt;/code&gt; and answer the questions. For this demo all of my code is going to live in &lt;code&gt;./source-and-tests&lt;/code&gt;. If I were using a Gulp build chain this would probably need to be tweaked.&lt;/p&gt;

&lt;dl&gt;
  &lt;dt&gt;Which testing framework do you want to use ?&lt;/dt&gt;
  &lt;dd&gt;&lt;code&gt;mocha&lt;/code&gt;&lt;/dd&gt;
  &lt;dt&gt;Do you want to use Require.js ?&lt;/dt&gt;
  &lt;dd&gt;&lt;code&gt;no&lt;/code&gt;&lt;/dd&gt;
  &lt;dt&gt;Do you want to capture any browsers automatically ?&lt;/dt&gt;
  &lt;dd&gt;&lt;code&gt;PhantomJS&lt;/code&gt;&lt;/dd&gt;
  &lt;dt&gt;What is the location of your source and test files ?&lt;/dt&gt;
  &lt;dd&gt;&lt;code&gt;source-and-tests/**/*.js&lt;/code&gt;&lt;/dd&gt;
  &lt;dt&gt;Should any of the files included by the previous patterns be excluded ?&lt;/dt&gt;
  &lt;dd&gt;&lt;em&gt;leave blank&lt;/em&gt;&lt;/dd&gt;
  &lt;dt&gt;Do you want Karma to watch all the files and run the tests on change ?&lt;/dt&gt;
  &lt;dd&gt;&lt;code&gt;yes&lt;/code&gt;&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;This generates a file called &lt;code&gt;karma-conf.js&lt;/code&gt;, which configures Karma for a test run. You can have multiple configuration files pointing to different test suites or browser configurations, which can be run by specifying the name of the configuration file (&lt;code&gt;karma start my.conf.ks&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;To get Chai included in the test pipeline, we need to edit &lt;code&gt;karma-conf.js&lt;/code&gt; and add it to the &lt;code&gt;frameworks&lt;/code&gt; setting:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;frameworks: ['mocha', 'chai'],
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Running &lt;code&gt;karma start&lt;/code&gt; will execute the default &lt;code&gt;karma-conf.js&lt;/code&gt; (or &lt;code&gt;karma-conf.coffee&lt;/code&gt;). First we need a test to run. In &lt;code&gt;./source-and-tests/&lt;/code&gt; I created &lt;code&gt;array-tests.js&lt;/code&gt; which just contains the &lt;a href=&quot;http://mochajs.org/#synchronous-code&quot;&gt;first example&lt;/a&gt; from Mocha&amp;rsquo;s documentation.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;describe('Array', function(){
  describe('#indexOf()', function(){
    it('should return -1 when the value is not present', function(){
      assert.equal(-1, [1,2,3].indexOf(5));
      assert.equal(-1, [1,2,3].indexOf(0));
    })
  })
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Running &lt;code&gt;karma start&lt;/code&gt; should find and run this test, then watch for changes to the watched files and repeating.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/cwTVVjT.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;adding-angularjs-to-the-mix&quot;&gt;Adding AngularJS to the mix&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ll use Bower to install AngularJS.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install --save-dev bower 
npm install -g bower
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This installs Bower to &lt;code&gt;./node_modules/bower&lt;/code&gt;, then installs it globally. Now we need to create a configuration file for Bower:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;bower init
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can just &lt;kbd&gt;enter&lt;/kbd&gt; through the configuration, accepting all the defaults. This creates a &lt;code&gt;bower.json&lt;/code&gt; file, which will save the dependencies added by Bower. Now use Bower to install AngularJS and angular-mocks:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;bower install --save angular
bower install --save angular-mocks
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This installs AngularJS to &lt;code&gt;./bower_components/angular&lt;/code&gt; and angular-mocks to &lt;code&gt;./bower_components/angular-mocks&lt;/code&gt;. The angular-mocks package gives us methods to resolve our application&amp;rsquo;s components and create mocks of AngularJS services.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m not going through how to integrate AngularJS an actual website as there are a number of techniques ranging from ASP.NET MVC bundling and minification to more advanced build chains such as Gulp or Grunt. Instead I&amp;rsquo;ll just show how to include AngularJS in the test suite, create a simple controller, and write a test against a property exposed by the controller.&lt;/p&gt;

&lt;p&gt;To include AngularJS and angular-mocks in Karma&amp;rsquo;s test run, edit the &lt;code&gt;files&lt;/code&gt; config setting in &lt;code&gt;karma.conf.js&lt;/code&gt;. Any future dependencies for the codebase and tests will need to be added here too, unless they are imported in some other way.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;files: [
	'bower_components/angular/angular.js',
	'bower_components/angular-mocks/angular-mocks.js',
	'source-and-tests/**/*.js'
],
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The controller to test is very simple at this stage (&lt;code&gt;MyController.js&lt;/code&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(function(){
	angular.module('my-module', []);

	angular
		.module('my-module')
		.controller('MyController', [
			function(){
				var self = this;

				self.firstName = '';
				self.lastName = '';

				self.getFullName = function(){
					return self.firstName + ' ' + self.lastName;
				};

				return self;
			}
	]);
})();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This creates a module called &lt;code&gt;my-module&lt;/code&gt; and creates a controller called &lt;code&gt;MyController&lt;/code&gt; that exposes &lt;code&gt;firstName&lt;/code&gt;, &lt;code&gt;lastName&lt;/code&gt; and &lt;code&gt;getFullName()&lt;/code&gt;. I want to test the result of &lt;code&gt;getFullName()&lt;/code&gt; (&lt;code&gt;MyControllerTests.js&lt;/code&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;describe('MyController', function(){
	beforeEach(module('my-module'));

	describe('getFullName()', function(){
		it('should handle names correctly', inject(function($controller){
			var myController = $controller('MyController');

			myController.firstName = 'George';
			myController.lastName = 'Harrison';

			myController.getFullName().should.equal('George Harrison');
		}));
	});
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This does some interesting things.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;beforeEach(module('my-module'));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This loads the &lt;code&gt;my-module&lt;/code&gt; module before each test in the &lt;code&gt;MyController&lt;/code&gt; suite.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;it('should handle names correctly', inject(function($controller){
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This injects &lt;code&gt;$controller&lt;/code&gt; into the test. &lt;code&gt;$controller&lt;/code&gt; allows resolving registered controllers.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var myController = $controller('MyController');
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This resolves an instance of the &lt;code&gt;MyController&lt;/code&gt; controller. The instance is then used as the test subject.&lt;/p&gt;

&lt;h2 id=&quot;scope-injection&quot;&gt;$scope injection&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;$scope&lt;/code&gt; that gets injected in to an Angular controller is just a JS object. I&amp;rsquo;ll assign a value and a method to &lt;code&gt;$scope&lt;/code&gt; for another test. The controller declaration changes to this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;angular
	.module('my-module')
	.controller('MyController', [
		'$scope',
		function($scope){
			var self = this;

			// ...

			$scope.songs = [
				'Here Comes The Sun'
			];

			$scope.addSong = function(song) {
				$scope.songs.push(song);
			};

			return self;
		}
]);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The existing test can just pass in an empty object to the controller resolution:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var myController = $controller('MyController', {
	$scope: {}
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now the new test can inject, use and inspect a mock scope:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;describe('addSong()', function(){
	it('should add songs', inject(function($controller) {
		var scope = {};
		var myController = $controller('MyController', {
			$scope: scope
		});

		scope.addSong('While My Guitar Gently Weeps');

		scope.songs.should.contain('While My Guitar Gently Weeps');
	}));
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;injecting-and-mocking-http&quot;&gt;Injecting and mocking $http&lt;/h2&gt;

&lt;p&gt;So now I&amp;rsquo;ve got a web service that I call to populate something on &lt;code&gt;$scope&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;angular
	.module('my-module')
	.controller('MyController', [
		'$scope', '$http',
		function($scope, $http){
			var self = this;

			// ...

			$scope.instruments = ['foo'];

			$http.get('api/get-instruments')
				.success(function(data) {
					$scope.instruments = data;
				});

			return self;
		}
]);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;a href=&quot;https://docs.angularjs.org/api/ngMock/service/$httpBackend&quot;&gt;&lt;code&gt;$httpBackend&lt;/code&gt;&lt;/a&gt; is an &lt;code&gt;angular-mocks&lt;/code&gt; service that fakes the &lt;code&gt;$http&lt;/code&gt; service:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;describe('get-instruments result', function(){
	it('should be added to scope', inject(function($controller, $httpBackend){
		var scope = {};
		$httpBackend
			.when('GET', 'api/get-instruments')
			.respond([
				'vocals', 'guitar', 'sitar'
			]);
		var myController = $controller('MyController', {
			$scope: scope
		});

		$httpBackend.flush();

		scope.instruments.should.contain('guitar');
	}));
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;$httpBackend.flush()&lt;/code&gt; simulates the async calls completing, so they can be tested synchronously.&lt;/p&gt;

&lt;h2 id=&quot;simulating-http-errors&quot;&gt;Simulating $http errors&lt;/h2&gt;

&lt;p&gt;If the call to &lt;code&gt;api/get-instruments&lt;/code&gt; fails, I want to set a status to &amp;lsquo;ERROR&amp;rsquo;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$scope.instruments = ['foo'];
$scope.status = '';

$http.get('api/get-instruments')
	.success(function(data) {
		$scope.instruments = data;
	})
	.error(function(e) {
		$scope.status = 'ERROR';
	});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To simulate the error, you can just tell the &lt;code&gt;$httpBackend&lt;/code&gt; to respond with an error code (500):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;describe('get-instruments with error', function(){
	it('should have a status with error', inject(function($controller, $httpBackend){
		var scope = {};
		$httpBackend
			.when('GET', 'api/get-instruments')
			.respond(500, '');
		var myController = $controller('MyController', {
			$scope: scope
		});

		$httpBackend.flush();

		scope.status.should.equal('ERROR');
	}));
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;here-is-a-cat-doing-some-tdd&quot;&gt;Here is a cat doing some TDD&lt;/h2&gt;

&lt;p&gt;Please imagine that this cat is really stoked about now being able to test front-end JavaScript.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://bendetat.com/images/tdd-cat.jpg&quot; alt=&quot;Source: http://www.aaamovies.com/Pictures%5CTestCatProfilePicture.jpg&quot; /&gt;&lt;/p&gt;

</description>
				<pubDate>Sat, 21 Feb 2015 00:00:00 +1000</pubDate>
				<link>http://bendetat.com/karma-and-mocha-for-angular-testing.html</link>
				<guid isPermaLink="true">http://bendetat.com/karma-and-mocha-for-angular-testing.html</guid>
			</item>
		
			<item>
				<author>Ben Scott - ben.scott@readify.net</author>
				<title>Cleaning and simplifying the Gulp pipeline</title>
				<description>&lt;p&gt;&lt;strong&gt;DISCLAIMER:&lt;/strong&gt; I&amp;rsquo;m learning in the open here. This is the first time I&amp;rsquo;ve used Gulp and Bower and I&amp;rsquo;m sure I&amp;rsquo;m missing a heap of really important stuff. Enjoy!&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Part 1: &lt;a href=&quot;http://bendetat.com/hello-world-its-gulp.html&quot;&gt;Hello World! It&amp;rsquo;s Gulp!&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Part 2: &lt;a href=&quot;http://bendetat.com/a-useful-build-pipeline-using-gulp-and-bower.html&quot;&gt;A useful build pipeline using Gulp and Bower&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Part 3: Cleaning and simplifying the Gulp pipeline&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I wasn&amp;rsquo;t entirely happy with how the &lt;a href=&quot;https://github.com/bendetat/nancy-gulp-bower-angular-learnings/blob/8a723f7f95880974b15cbe054891a3db7e32e336/gulpfile.js&quot;&gt;previous build script&lt;/a&gt; wrote out the minified JS and CSS files next to &lt;code&gt;index.html&lt;/code&gt;, or how the vendor files had to be specified in the configuration, so I did some playing with the &lt;code&gt;gulp-useref&lt;/code&gt; plugin and cleaned things up significantly.&lt;/p&gt;

&lt;p&gt;I installed two new dependencies.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.npmjs.com/package/gulp-useref&quot;&gt;&lt;code&gt;gulp-usered&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install --save-dev gulp-useref
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;Parse build blocks in HTML files to replace references to non-optimized scripts or stylesheets.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;https://www.npmjs.com/package/gulp-if&quot;&gt;&lt;code&gt;gulp-if&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install --save-dev gulp-if
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;Conditionally run a task&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I moved all the dependencies into &lt;code&gt;$&lt;/code&gt;, deleted the dependencies I wouldn&amp;rsquo;t need any more and added &lt;code&gt;useref&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var $ = {
	if: require('gulp-if'),
	notify: require('gulp-notify'),
	rev: require('gulp-rev'),
	revReplace: require('gulp-rev-replace'),
	useref: require('gulp-useref'),
	filter: require('gulp-filter'),
	uglify: require('gulp-uglify'),
	minifyCss: require('gulp-minify-css'),
	del: require('del'),
	path: require('path'),
	connect: require('connect'),
	serveStatic: require('serve-static'),
	log: require('gulp-load-plugins')()
		.loadUtils(['log'])
		.log
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then I deleted the &lt;code&gt;rev-and-inject&lt;/code&gt; task plus all of the CSS and JS tasks, and replaced the &lt;code&gt;build&lt;/code&gt; task with this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gulp.task('build', ['fonts', 'images'], function() {
	var cssFilter = $.filter('**/*.css');
	var jsFilter = $.filter('**/*.js');
	var assets = $.useref.assets();

	return gulp
		.src($.path.join(config.paths.client, '*.html'))
		.pipe(assets)
		.pipe($.if('*.js', $.uglify()))
		.pipe($.if('*.css', $.minifyCss()))
		.pipe($.rev())
		.pipe(assets.restore())
		.pipe($.useref())
		.pipe($.revReplace())
		.pipe(gulp.dest(config.paths.destination))

		.pipe($.notify({
			onLast: true,
			message: 'Build complete'
		}))
		;
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;$useref.assets()&lt;/code&gt; scans the &lt;code&gt;.html&lt;/code&gt; files for JS and CSS references. The &lt;code&gt;gulp-if&lt;/code&gt; plugin lets you do basic logic, this replaces the &lt;code&gt;gulp-filter&lt;/code&gt; plugin to perform conditional minification. &lt;code&gt;rev&lt;/code&gt; and &lt;code&gt;revReplace&lt;/code&gt; do the same cache busting as before.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;index.html&lt;/code&gt; now contains the relative references to the JS and CSS files. CSS is in the header:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;head&amp;gt;
    &amp;lt;!-- build:css content/site.min.css --&amp;gt;
    &amp;lt;link href=&quot;../../bower_components/bootstrap/dist/css/bootstrap.css&quot; rel=&quot;stylesheet&quot;&amp;gt;
    &amp;lt;link href=&quot;../../bower_components/bootstrap/dist/css/bootstrap-theme.css&quot; rel=&quot;stylesheet&quot;&amp;gt;
    &amp;lt;link href=&quot;content/css/site.css&quot;/&amp;gt;
    &amp;lt;!-- endbuild --&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;JS at the end of the body:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	&amp;lt;!-- build:js content/site.min.js --&amp;gt;
	&amp;lt;script type=&quot;text/javascript&quot; src=&quot;../../bower_components/jquery/dist/jquery.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
	&amp;lt;script type=&quot;text/javascript&quot; src=&quot;../../bower_components/bootstrap/dist/bootstrap.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
	&amp;lt;script type=&quot;text/javascript&quot; src=&quot;content/script/site.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
	&amp;lt;!-- endbuild --&amp;gt;
&amp;lt;/body&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The output path is specified in the &lt;code&gt;build:css&lt;/code&gt; / &lt;code&gt;build.js&lt;/code&gt; placeholder. Another benefit of this approach is that the development &lt;code&gt;index.html&lt;/code&gt; is actually usable as is - those &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; will resolve to the un-mangled originals.&lt;/p&gt;

&lt;h2 id=&quot;file-watching&quot;&gt;File watching&lt;/h2&gt;

&lt;p&gt;In the &lt;code&gt;serve&lt;/code&gt; task (which sets up a static web server hosting the built site) I used &lt;code&gt;gulp.watch&lt;/code&gt; to listen for changes in the source folder and trigger a build:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;return gulp.watch(config.paths.client + '/**', ['build']);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now if a file changes, the files get rebuilt in the same process as the server. Because that server is just serving the entire source path any changes are available instantly.&lt;/p&gt;

&lt;p&gt;Here is the &lt;a href=&quot;https://github.com/bendetat/nancy-gulp-bower-angular-learnings/blob/bfdcced8a1d664d0a933db64c255bfb7268913a0/gulpfile.js&quot;&gt;&lt;code&gt;gulpfile.js&lt;/code&gt; as at this post&lt;/a&gt;. Next I&amp;rsquo;ll get some AngularJS happening.&lt;/p&gt;

&lt;h2 id=&quot;further-reading-and-resources&quot;&gt;Further reading and resources&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/johnpapa/ng-demos/blob/master/grunt-gulp/build-gulp/gulpfile.js&quot;&gt;https://github.com/johnpapa/ng-demos/blob/master/grunt-gulp/build-gulp/gulpfile.js&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/gertjvr/ng-template&quot;&gt;https://github.com/gertjvr/ng-template&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://gulpjs.com/&quot;&gt;http://gulpjs.com/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://nodejs.org/api/&quot;&gt;http://nodejs.org/api/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/bendetat/nancy-gulp-bower-angular-learnings/blob/bfdcced8a1d664d0a933db64c255bfb7268913a0/gulpfile.js&quot;&gt;&lt;code&gt;gulpfile.js&lt;/code&gt; as of this post&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
				<pubDate>Fri, 30 Jan 2015 00:00:00 +1000</pubDate>
				<link>http://bendetat.com/cleaning-and-simplifying-the-gulp-pipeline.html</link>
				<guid isPermaLink="true">http://bendetat.com/cleaning-and-simplifying-the-gulp-pipeline.html</guid>
			</item>
		
			<item>
				<author>Ben Scott - ben.scott@readify.net</author>
				<title>A useful build pipeline using Gulp and Bower</title>
				<description>&lt;p&gt;&lt;strong&gt;DISCLAIMER:&lt;/strong&gt; I&amp;rsquo;m learning in the open here. This is the first time I&amp;rsquo;ve used Gulp and Bower and I&amp;rsquo;m sure I&amp;rsquo;m missing a heap of really important stuff. Enjoy!&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Part 1: &lt;a href=&quot;http://bendetat.com/hello-world-its-gulp.html&quot;&gt;Hello World! It&amp;rsquo;s Gulp!&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Part 2: A useful build pipeline using Gulp and Bower&lt;/li&gt;
  &lt;li&gt;Part 3: &lt;a href=&quot;http://bendetat.com/cleaning-and-simplifying-the-gulp-pipeline.html&quot;&gt;Cleaning and simplifying the Gulp pipeline&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Big thanks to my colleague &lt;a href=&quot;http://blog.gertjvr.com/&quot;&gt;Gert JvR&lt;/a&gt; whose &lt;a href=&quot;https://github.com/gertjvr/ng-template&quot;&gt;ng-template&lt;/a&gt; project I am deconstructing.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/bendetat/nancy-gulp-bower-angular-learnings/blob/8a723f7f95880974b15cbe054891a3db7e32e336/gulpfile-unclean.js&quot;&gt;&lt;code&gt;gulpfile.js&lt;/code&gt; as of this post&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/bendetat/nancy-gulp-bower-angular-learnings/blob/8a723f7f95880974b15cbe054891a3db7e32e336/gulpfile.js&quot;&gt;cleaned &lt;code&gt;gulpfile.js&lt;/code&gt;&lt;/a&gt; which I will use from here on&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;have-you-any-bootstrap&quot;&gt;Have you any Bootstrap?&lt;/h2&gt;

&lt;p&gt;I want to use Bootstrap, but&amp;hellip;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://cdn.meme.am/instances/500x/58510881.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Bower is a JavaScript package manager. So is NPM, in fact we&amp;rsquo;ll use NPM to install Bower. The difference is that NPM is designed as a server-side (or developer-side) package manager, whereas Bower is only a front-end (client-side) package manager. NPM &lt;a href=&quot;http://browserify.org&quot;&gt;can be used for client-side package management&lt;/a&gt; but hopefully it will be easier to manage the two scenarios independently by using the package manager designed for the task.&lt;/p&gt;

&lt;p&gt;Install Bower to the project (and globally) using NPM:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install --save-dev -g bower
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now create &lt;code&gt;bower.json&lt;/code&gt; by running &lt;code&gt;bower init&lt;/code&gt; and following the instructions. Bower should not be ready to install Bootstrap:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;bower install bootstrap --save
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This installs all of Bootstrap (including the separate jQuery dependency) into &lt;code&gt;/bower_components&lt;/code&gt;. It also adds a reference to the dependency in &lt;code&gt;bower.json&lt;/code&gt; - if it doesn&amp;rsquo;t you may have forgotten the &lt;code&gt;--save&lt;/code&gt; argument.&lt;/p&gt;

&lt;p&gt;I then copied the &lt;a href=&quot;http://getbootstrap.com/getting-started/#template&quot;&gt;minimal Bootstrap HTML&lt;/a&gt; into &lt;code&gt;src/client/index.html&lt;/code&gt;. This won&amp;rsquo;t work because we&amp;rsquo;re not copying or linking in the CSS correctly.&lt;/p&gt;

&lt;h2 id=&quot;vendor-css&quot;&gt;Vendor CSS&lt;/h2&gt;

&lt;p&gt;There are two types of CSS - vendor and site-specific - and each will be handled slightly differently. Vendor CSS is anything that comes from a Bower package, and site-specific CSS will be anything in &lt;code&gt;/src/client/css&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ll start by adding a dependency task to the &lt;code&gt;rev-and-inject&lt;/code&gt; task:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gulp.task('rev-and-inject', ['vendorcss'], function() {
	// existing rev-and-inject task
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In my &lt;a href=&quot;hello-world-its-gulp.html&quot;&gt;last post&lt;/a&gt; I declared the &lt;code&gt;config&lt;/code&gt; object within &lt;code&gt;gulpfile.js&lt;/code&gt;. I immediately regret this decision and move it into its own file - &lt;code&gt;gulp-config.json&lt;/code&gt;. Now I need to explicitly add the CSS files that will be included in the site:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
	&quot;paths&quot;: {
		&quot;client&quot;: &quot;src/client/&quot;,
		&quot;server&quot;: &quot;src/server/&quot;,
		&quot;dist&quot;: &quot;src/client-dist&quot;,
		&quot;vendorcss&quot;: [
			&quot;bower_components/bootstrap/dist/css/bootstrap.css&quot;,
			&quot;bower_components/bootstrap/dist/css/bootstrap-theme.css&quot;
		]
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;config&lt;/code&gt; object is now initialised using &lt;code&gt;require()&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var config = require('./gulp-config.json');
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we get to install some more dependencies!&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.npmjs.com/package/gulp-concat&quot;&gt;&lt;code&gt;gulp-concat&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install --save-dev gulp-concat
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;Concatenates files&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Pull in the &lt;code&gt;concat&lt;/code&gt; dependency at the top of &lt;code&gt;gulpfile.js&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var concat = require('gulp-concat');
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now add the &lt;code&gt;vendorcss&lt;/code&gt; task:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gulp.task('vendorcss', function(){
return gulp
	// set source
	.src(config.paths.vendorcss)
	// write to vendor.min.css
	.pipe(concat('vendor.min.css'))
	// write to dest
	.pipe(gulp.dest(config.paths.destination));
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This takes all of the vendor CSS files specified in &lt;code&gt;gulp-config.json&lt;/code&gt; and bundles them into &lt;code&gt;/src/site-dist/vendor.min.css&lt;/code&gt;. Very exciting but it hasn&amp;rsquo;t minified the CSS yet. Time for some more plugins:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.npmjs.com/package/gulp-bytediff&quot;&gt;&lt;code&gt;gulp-bytediff&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install --save-dev gulp-bytediff
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;Compare file sizes before and after your gulp build process.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;bytediff&lt;/code&gt; is just used to output the file size reduction from minification.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.npmjs.com/package/gulp-minify-css&quot;&gt;&lt;code&gt;gulp-minify-css&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install --save-dev gulp-minify-css
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;Minify css with clean-css.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Add the &lt;code&gt;bytediff&lt;/code&gt; and &lt;code&gt;minify-css&lt;/code&gt; dependencies at the top of &lt;code&gt;gulpfile.js&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var bytediff = require('gulp-bytediff');
var minifyCss = require('gulp-minify-css');
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then add the minify and bytediff steps to the pipeline (in &lt;code&gt;gulp.task('vendorcss'..&lt;/code&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;return gulp
	// set source
	.src(config.paths.vendorcss)
	// write to vendor.min.css
	.pipe(concat('vendor.min.css'))

	// start tracking size
	.pipe(bytediff.start())
	// minify css
	.pipe(minifyCss())
	// stop tracking size and output it using bytediffFormatter
	.pipe(bytediff.stop(bytediffFormatter))

	// write to dest
	.pipe(gulp.dest(config.paths.destination));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;bytediff.stop(bytediffFormatter)&lt;/code&gt; uses a new function to format the file size difference. This function needs to be added:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function bytediffFormatter(data) {
	var formatPercent = function(num, precision) {
		return (num * 100).toFixed(precision);
	};
    var difference = (data.savings &amp;gt; 0) ? ' smaller.' : ' larger.';
    
    return data.fileName + ' went from ' +
        (data.startSize / 1000).toFixed(2) + ' kB to ' + (data.endSize / 1000).toFixed(2) + ' kB' +
        ' and is ' + formatPercent(1 - data.percent, 2) + '%' + difference;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now when I run &lt;code&gt;gulp build&lt;/code&gt; the CSS is minified:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[09:10:18] Starting 'vendorcss'...
[gulp] [09:10:18] Compressing, bundling and copying vendor CSS
[09:10:18] vendor.min.css went from 164.02 kB to 135.50 kB and is 17.39% smaller.
[09:10:18] Finished 'vendorcss' after 298 ms
[09:10:18] Starting 'rev-and-inject'...
[09:10:18] Finished 'rev-and-inject' after 5.79 ms
[09:10:18] Starting 'build'...
[09:10:18] gulp-notify: [Gulp notification] Build complete
[09:10:18] Finished 'build' after 48 ms
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;index.html&lt;/code&gt; now needs a reference to the minified CSS file. It could be hard-coded to &lt;code&gt;vendor.min.css&lt;/code&gt; but that is subject to change if the build script changes. So we need to &lt;em&gt;inject&lt;/em&gt; the path to the &lt;code&gt;vendor.min.css&lt;/code&gt; artifact directly into &lt;code&gt;index.html&lt;/code&gt; as it is being written.&lt;/p&gt;

&lt;p&gt;Install yet another plugin:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.npmjs.com/package/gulp-inject&quot;&gt;&lt;code&gt;gulp-inject&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install --save-dev gulp-inject
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;A javascript, stylesheet and webcomponent injection plugin for Gulp, i.e. inject file references into your index.html&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Add the new &lt;code&gt;inject&lt;/code&gt; dependency to the top of &lt;code&gt;gulpfile.js&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var inject = require('gulp-inject');
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now in the &lt;code&gt;rev-and-inject&lt;/code&gt; task add a local method that wraps &lt;code&gt;inject()&lt;/code&gt; with some common options:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var localInject = function(pathGlob, name) {
	var options = {
		// Strip out the 'src/client-dist-app' part from the path to vendor.min.css
		ignorePaths = config.paths.destination,
		// Don't read file being injected, just get the path
		read: false,
		// add a prefix to the injected path
		addPrefix: config.paths.buildPrefix
	};
};
&lt;/code&gt;&lt;/pre&gt;

&lt;aside&gt;The `read: false` option is interesting, if it is set to true you can use a transform to [inject the contents](https://www.npmjs.com/package/gulp-inject/#injecting-files-contents) of the file into the output.&lt;/aside&gt;

&lt;p&gt;There is a new &lt;code&gt;buildPrefix&lt;/code&gt; value in the config that needs to be added to &lt;code&gt;gulp-config.json&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
	&quot;paths&quot;: {
		// ...
		&quot;buildPrefix&quot;: &quot;app&quot;,
		// ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is needed because when the site will get hosted by Nancy, it will be available at &lt;code&gt;{yoursite}/app&lt;/code&gt;. So the injected path will be &lt;code&gt;/app/content/vendor.min.css&lt;/code&gt;. In a minute I&amp;rsquo;ll set up a static server using Node.js for testing the output.&lt;/p&gt;

&lt;p&gt;The inject step now needs to be added to the &lt;code&gt;rev-and-inject&lt;/code&gt; task pipeline:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gulp.task('rev-and-inject', ['vendorcss'], function() {
	var indexPath = path.join(config.paths.source, 'index.html');

	var localInject = //...

	return gulp
		.src([].concat(indexPath))

		// inject into inject-vendor:css
		.pipe(localInject(
			path.join(config.paths.destination, 'vendor.min.css'),
			'inject-vendor'))

		.pipe(gulp.dest(config.paths.distribution))
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now in &lt;code&gt;/src/client/index.html&lt;/code&gt; we just need to replace the link to &lt;code&gt;bootstrap.min.css&lt;/code&gt; to the &lt;code&gt;inject-vendor:css&lt;/code&gt; placeholder:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;title&amp;gt;Bootstrap 101 Template&amp;lt;/title&amp;gt;

&amp;lt;!-- inject-vendor:css --&amp;gt;
&amp;lt;!-- endinject --&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, running &lt;code&gt;gulp build&lt;/code&gt; should inject the correct path into &lt;code&gt;/src/client-dist/index.html&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!-- inject-vendor:css --&amp;gt;
&amp;lt;link rel=&quot;stylesheet&quot; href=&quot;/app/vendor.min.css&quot;&amp;gt;
&amp;lt;!-- endinject --&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;use-nodejs-to-serve-the-static-website&quot;&gt;Use Node.js to serve the static website&lt;/h3&gt;

&lt;p&gt;At the moment the output is going to &lt;code&gt;/src/client-dist&lt;/code&gt;. When the site is eventually hosted on Nancy it will be served from &lt;code&gt;/app&lt;/code&gt;, so the injected paths currently all start with &lt;code&gt;/app&lt;/code&gt;, which means that the build output can&amp;rsquo;t be viewed properly yet. I&amp;rsquo;m going to set up a quick, static server to publish the site. More dependencies!&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.npmjs.com/package/connect&quot;&gt;&lt;code&gt;connect&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install --save-dev connect
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;High performance middleware framework&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;https://www.npmjs.com/package/serve-static&quot;&gt;&lt;code&gt;serve-static&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install --save-dev serve-static
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;Serve static files&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Add the new dependencies at the top of &lt;code&gt;gulpfile.js&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var connect = require('connect');
var serveStatic = require('serve-static');
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now add a new task:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gulp.task('serve', function(){
	var sourcePath = path.join(__dirname, config.paths.destination);
	var port = 12857;
	var serveFromPath = '/' + config.paths.buildPrefix;

	log('Hosting ' + sourcePath + ' at http://localhost:' + port + serveFromPath);

	connect()
		.use(serveFromPath, serveStatic(sourcePath))
		.listen(port);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now running &lt;code&gt;gulp serve&lt;/code&gt; will serve the static content from &lt;a href=&quot;http://localhost:12857/app&quot;&gt;http://localhost:12857/app&lt;/a&gt;. I can leave that running in one console while rebuilding in another.&lt;/p&gt;

&lt;p&gt;Interestingly, this way of serving a static site could probably be used all the way through to production, as the interaction with the server is all done on the client side via REST calls.&lt;/p&gt;

&lt;h2 id=&quot;site-specific-css&quot;&gt;Site-specific CSS&lt;/h2&gt;

&lt;p&gt;In &lt;code&gt;gulpfile.js&lt;/code&gt; add a new &lt;code&gt;css&lt;/code&gt; task:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gulp.task('css', function() {
	return gulp
		// set source (src/**/*.css)
		.src([path.join(config.paths.client, '**/*.css')])
		// write to site.min.css
		.pipe(concat('site.min.css'))
		// start tracking size
		.pipe(bytediff.start())
		// minify the css
		.pipe(minifyCss())
		// stop tracking size and output it
		.pipe(bytediff.stop(bytediffFormatter))
		// write to dest/content
		.pipe(gulp.dest(config.paths.destination));
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is getting a bit familiar. Instead of using a set of explicit tasks from &lt;code&gt;gulp-config.json&lt;/code&gt; I&amp;rsquo;ve just assumed that anything named &lt;code&gt;*.css&lt;/code&gt; anywhere in the client should be injected into the static site distribution. The concatenated, minified output gets written to &lt;code&gt;/src/client-dist/content/site.min.css&lt;/code&gt;. Now in the &lt;code&gt;rev-and-inject&lt;/code&gt; task the &lt;code&gt;css&lt;/code&gt; task needs to be added to the prerequisites:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gulp.task('rev-and-inject', ['vendorcss', 'css'], function(){
	// ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And the path to the new &lt;code&gt;site.min.css&lt;/code&gt; needs to be injected (this goes after the &lt;code&gt;inject-vendor:css&lt;/code&gt; injection):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// inject into inject:css
.pipe(localInject(config.paths.destination))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that there is no name placeholder used. This will inject into the default &lt;code&gt;inject:css&lt;/code&gt; placeholder, which needs to be added to &lt;code&gt;index.html&lt;/code&gt; after the existing &lt;code&gt;inject-vendor:css&lt;/code&gt; placeholder:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!-- inject:css --&amp;gt;
&amp;lt;!-- endinject --&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now if you add some CSS files to &lt;code&gt;/src/client&lt;/code&gt; they will be injected into &lt;code&gt;index.html&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;vendor-javascript&quot;&gt;Vendor JavaScript&lt;/h2&gt;

&lt;p&gt;One more dependency:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.npmjs.com/package/gulp-uglify&quot;&gt;&lt;code&gt;gulp-uglify&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install --save-dev gulp-uglify
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;Minify files with UglifyJS.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Vendor JS is configured the same way vendor CSS is, in &lt;code&gt;gulp-config.json&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	&quot;vendorcss&quot;: [
		// ...
	],
	&quot;vendorjs&quot;: [
		&quot;bower_components/jquery/dist/jquery.js&quot;,
		&quot;bower_components/bootstrap/dist/bootstrap.js&quot;
	]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;uglify&lt;/code&gt; is used instead of &lt;code&gt;minifyCss&lt;/code&gt;. Add the dependency at the top of &lt;code&gt;gulpfile.js&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var uglify = require('gulp-uglify');
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now create the &lt;code&gt;vendorjs&lt;/code&gt; task:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gulp.task('vendorjs', function(){
	return gulp
		// set source
		.src(config.paths.vendorjs)
		// write to vendor.min.js
		.pipe(concat('vendor.min.js'))
		// start tracking size
		.pipe(bytediff.start())
		// uglify js
		.pipe(uglify())
		// stop tracking size and output it using bytediffFormatter
		.pipe(bytediff.stop(bytediffFormatter))
 
		// write to dest
		.pipe(gulp.dest(config.paths.destination));
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In &lt;code&gt;rev-and-inject&lt;/code&gt;, the &lt;code&gt;vendorcss&lt;/code&gt; prerequisite task needs to be added:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gulp.task('rev-and-inject', ['vendorcss', 'css', 'vendorjs'], function(){
	// ...	
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And the newly minified &lt;code&gt;content/script/vendor.min.js&lt;/code&gt; needs to be injected (after the &lt;code&gt;inject:css&lt;/code&gt; injection):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// inject into inject-vendor:js
.pipe(localInject(
	path.join(config.paths.destination, 'vendor.min.js'),
	'inject-vendor'))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now the &lt;code&gt;inject-vendor:css&lt;/code&gt; placeholder needs to be added to &lt;code&gt;index.html&lt;/code&gt; at the end of the &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; element:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!-- inject-vendor:css --&amp;gt;
&amp;lt;!-- endinject --&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;site-specific-javascript&quot;&gt;Site-specific JavaScript&lt;/h2&gt;

&lt;p&gt;To support AngularJS, the site-specific JS task will need a couple of extra steps, but I&amp;rsquo;ll leave that for the next post. Meanwhile, it will be similar to the site-specific CSS task, bundling and minifying all &lt;code&gt;*.js&lt;/code&gt; files in &lt;code&gt;/src/client&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gulp.task('js', function() {
	return gulp
		// set source (src/**/*.js)
		.src([path.join(config.paths.client, '**/*.js')])
		// write to site.min.js
		.pipe(concat('site.min.js'))
		// start tracking size
		.pipe(bytediff.start())
		// uglify js
		.pipe(uglify())
		// stop tracking size and output it using bytediffFormatter
		.pipe(bytediff.stop(bytediffFormatter))
 
		// write to dest
		.pipe(gulp.dest(config.paths.destination));
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In &lt;code&gt;rev-and-inject&lt;/code&gt;, the &lt;code&gt;js&lt;/code&gt; prerequisite task needs to be added:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gulp.task('rev-and-inject', ['vendorcss', 'css', 'vendorjs'], function(){
	// ...	
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And &lt;code&gt;content/script/site.min.js&lt;/code&gt; needs to be injected (after the &lt;code&gt;inject-vendor:js&lt;/code&gt; injection):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// inject into inject:js
.pipe(localInject(
	path.join(config.paths.destination, 'site.min.js')))
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;fonts-and-images&quot;&gt;Fonts and images&lt;/h2&gt;

&lt;p&gt;Site assets that aren&amp;rsquo;t CSS or JS need to be processed as well. Fonts are pretty straightforward, I&amp;rsquo;ll just copy everything in &lt;code&gt;content/fonts&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gulp.task('fonts', function(){
	log('Copy fonts');

	return gulp
		.src([path.join(config.paths.client, 'content/fonts/*')])
		.pipe(gulp.dest(path.join(config.paths.destination, 'content/fonts')));
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Since this can be done outside of the &lt;code&gt;rev-and-inject&lt;/code&gt; process, it gets added to the &lt;code&gt;build&lt;/code&gt; task:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gulp.task('build', ['rev-and-inject', 'fonts'], function() {
	// ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Images could be a straight copy as well, or you can pass them through an image optimization plugin. Install two more dependencies:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.npmjs.com/package/gulp-cache&quot;&gt;&lt;code&gt;gulp-cache&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install --save-dev gulp-cache
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;A cache proxy task for Gulp&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;https://www.npmjs.com/package/gulp-imagemin&quot;&gt;&lt;code&gt;gulp-imagemin&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install --save-dev gulp-imagemin
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;Minify PNG, JPEG, GIF and SVG images&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;imagemin&lt;/code&gt; is an image minifier. This performs some compression on PNG images:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gulp.task('images', function(){
	log('Compress, cache and copy images');

	return gulp
		.src([path.join(config.paths.client, 'content/images/*')])
		.pipe(cache(imagemin({
			optimizationLevel: 3
		})))
		.pipe(gulp.dest(path.join(config.paths.destination, 'content/images')));
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This task also gets added as a prerequisite to the &lt;code&gt;build&lt;/code&gt; task:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gulp.task('build', ['rev-and-inject', 'fonts', 'images'], function() {
	// ...
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;revisioning-and-cache-busting&quot;&gt;Revisioning and cache-busting&lt;/h2&gt;

&lt;p&gt;Revisioning is a way of cache-busting (forcing the browser to reload assets) by appending a hash to the filename. Since this hash is unique for a particular revision of the file (as it is a hash of the file&amp;rsquo;s contents) as long as the source file doesn&amp;rsquo;t change, the revisioned file name will stay the same and will reload from the browser&amp;rsquo;s cache. This uses the &lt;code&gt;gulp-rev&lt;/code&gt; and &lt;code&gt;gulp-rev-replace&lt;/code&gt; plugins:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.npmjs.com/package/gulp-rev&quot;&gt;&lt;code&gt;gulp-rev&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install --save-dev gulp-rev
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;Static asset revisioning by appending content hash to filenames: unicorn.css =&amp;gt; unicorn-098f6bcd.css&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;https://www.npmjs.com/package/gulp-rev-replace&quot;&gt;&lt;code&gt;gulp-rev-replace&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install --save-dev gulp-rev-replace
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;Rewrite occurences of filenames which have been renamed by gulp-rev&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Add the new dependencies to the top of &lt;code&gt;gulpfile.js&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var rev = require('gulp-rev');
var revReplace = require('gulp-rev-replace');
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now the &lt;code&gt;build&lt;/code&gt; task gets a bit of a rewrite:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var indexFilter = filter('index.html');
var cssFilter = filter(&quot;**/*.min.css&quot;);
var jsFilter = filter(&quot;**/*.min.js&quot;);
var manifestFilter = filter('rev-manifest.json');

return gulp
	// 1. set source (/src/client/)
	.src([].concat(
		path.join(config.paths.client, 'index.html'), 
		path.join(config.paths.destination, '*.min.css'),
		path.join(config.paths.destination, '*.min.js')))

	// 2. add the revision to the css files
	.pipe(cssFilter)
	.pipe(rev())
	.pipe(gulp.dest(config.paths.destination))
	.pipe(cssFilter.restore())

	// 3. add the revision to the js files
	.pipe(jsFilter)
	.pipe(rev())
	.pipe(gulp.dest(config.paths.destination))
	.pipe(jsFilter.restore())

	// 4. inject css and js
	.pipe(indexFilter)
	.pipe(localInject(path.join(config.paths.destination, 'vendor.min.css'), 'inject-vendor'))
	.pipe(localInject(path.join(config.paths.destination, 'site.min.css')))
	.pipe(localInject(path.join(config.paths.destination, 'vendor.min.js'), 'inject-vendor'))
	.pipe(localInject(path.join(config.paths.destination, 'site.min.js')))
	.pipe(gulp.dest(config.paths.destination))
	.pipe(indexFilter.restore())

	// 5. substitute in new revved filenames
	.pipe(revReplace())
	.pipe(gulp.dest(config.paths.destination));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I&amp;rsquo;ve numbered the stages of this pipeline. &lt;/p&gt;

&lt;p&gt;In step 1 we select &lt;code&gt;index.html&lt;/code&gt; and the &lt;code&gt;*.min.css&lt;/code&gt; and &lt;code&gt;*.min.js&lt;/code&gt; files.&lt;/p&gt;

&lt;p&gt;In step 2 we filter down to just the &lt;code&gt;*.min.css&lt;/code&gt; files, then apply the revisioning hash to the filenames (using &lt;code&gt;rev()&lt;/code&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// filter to *.min.css
.pipe(cssFilter)
// add the revision to the files
.pipe(rev())
// write the files
.pipe(gulp.dest(config.paths.destination))
// clear the filter
.pipe(cssFilter.restore())
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Step 3 is the same as step 2 except for &lt;code&gt;*.min.js&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In step 4 we filter down to just &lt;code&gt;index.html&lt;/code&gt; and do the existing CSS and JS injections.&lt;/p&gt;

&lt;p&gt;In step 5 we substitute the newly revisioned filenames into &lt;code&gt;index.html&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;and-finally&quot;&gt;And finally&amp;hellip;&lt;/h2&gt;

&lt;p&gt;The end result looks like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/j3WY60e.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;index.html&lt;/code&gt; points to the concatenated, minified, and hashed files:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&quot;en&quot;&amp;gt;
	&amp;lt;head&amp;gt;
		&amp;lt;!-- inject-vendor:css --&amp;gt;
		&amp;lt;link rel=&quot;stylesheet&quot; href=&quot;/app/vendor.min-a491bda8.css&quot;&amp;gt;
		&amp;lt;!-- endinject --&amp;gt;

		&amp;lt;!-- inject:css --&amp;gt;
		&amp;lt;link rel=&quot;stylesheet&quot; href=&quot;/app/site.min-238af6ba.css&quot;&amp;gt;
		&amp;lt;!-- endinject --&amp;gt;
		&amp;lt;/head&amp;gt;
	&amp;lt;body&amp;gt;
		&amp;lt;h1&amp;gt;Hello, world!&amp;lt;/h1&amp;gt;

		&amp;lt;!-- inject-vendor:js --&amp;gt;
		&amp;lt;script src=&quot;/app/vendor.min-8e07c5e8.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
		&amp;lt;!-- endinject --&amp;gt;

		&amp;lt;!-- inject:js --&amp;gt;
		&amp;lt;script src=&quot;/app/site.min-5b54178e.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
		&amp;lt;!-- endinject --&amp;gt;
	&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I&amp;rsquo;m not entirely happy with this so &lt;a href=&quot;http://bendetat.com/cleaning-and-simplifying-the-gulp-pipeline.html&quot;&gt;next I&amp;rsquo;ll try to simplify things&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;further-reading-and-resources&quot;&gt;Further reading and resources&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/johnpapa/ng-demos/blob/master/grunt-gulp/build-gulp/gulpfile.js&quot;&gt;https://github.com/johnpapa/ng-demos/blob/master/grunt-gulp/build-gulp/gulpfile.js&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/gertjvr/ng-template&quot;&gt;https://github.com/gertjvr/ng-template&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://gulpjs.com/&quot;&gt;http://gulpjs.com/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://nodejs.org/api/&quot;&gt;http://nodejs.org/api/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/bendetat/nancy-gulp-bower-angular-learnings/blob/8a723f7f95880974b15cbe054891a3db7e32e336/gulpfile-unclean.js&quot;&gt;&lt;code&gt;gulpfile.js&lt;/code&gt; as of this post&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/bendetat/nancy-gulp-bower-angular-learnings/blob/8a723f7f95880974b15cbe054891a3db7e32e336/gulpfile.js&quot;&gt;cleaned &lt;code&gt;gulpfile.js&lt;/code&gt;&lt;/a&gt; which I will use from here on&lt;/li&gt;
&lt;/ul&gt;

</description>
				<pubDate>Fri, 30 Jan 2015 00:00:00 +1000</pubDate>
				<link>http://bendetat.com/a-useful-build-pipeline-using-gulp-and-bower.html</link>
				<guid isPermaLink="true">http://bendetat.com/a-useful-build-pipeline-using-gulp-and-bower.html</guid>
			</item>
		
			<item>
				<author>Ben Scott - ben.scott@readify.net</author>
				<title>Hello World! It's Gulp!</title>
				<description>&lt;p&gt;&lt;strong&gt;DISCLAIMER:&lt;/strong&gt; I&amp;rsquo;m learning in the open here. This is the first time I&amp;rsquo;ve used Gulp and I&amp;rsquo;m sure I&amp;rsquo;m missing a heap of really important stuff. Enjoy!&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Part 1: Hello World! It&amp;rsquo;s Gulp!&lt;/li&gt;
  &lt;li&gt;Part 2: &lt;a href=&quot;http://bendetat.com/a-useful-build-pipeline-using-gulp-and-bower.html&quot;&gt;A useful build pipeline using Gulp and Bower&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Part 3: &lt;a href=&quot;http://bendetat.com/cleaning-and-simplifying-the-gulp-pipeline.html&quot;&gt;Cleaning and simplifying the Gulp pipeline&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;http://gulpjs.org&quot;&gt;Gulp&lt;/a&gt; is a Node.js based build tool. It executes &lt;code&gt;gulpfile.js&lt;/code&gt; in the project root to set up a build pipeline, doing things like bundling, minification, and artifact copying.&lt;/p&gt;

&lt;p&gt;This is useful in a workflow where you have an essentially static website that uses a client-side framework such as AngularJS, backed onto a web service that exposes functionality via something like a REST API. Build tools like Gulp and JS packagement management tools such as &lt;a href=&quot;http://bower.io&quot;&gt;Bower&lt;/a&gt; can be used to manage these complex client-side sites.&lt;/p&gt;

&lt;p&gt;The static site that I&amp;rsquo;ll hopefully end up generating in the next post will be used with a &lt;a href=&quot;http://nancyfx.org&quot;&gt;Nancy&lt;/a&gt; website. The end result of this post is a Gulp build script that simply copies an &lt;code&gt;index.html&lt;/code&gt; file from &lt;code&gt;/src/client&lt;/code&gt; to &lt;code&gt;/src/client-dist&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;prerequisites&quot;&gt;Prerequisites&lt;/h2&gt;

&lt;p&gt;Install Node and NPM. The easiest way may be via &lt;a href=&quot;http://chocolatey.org&quot;&gt;Chocolatey&lt;/a&gt;, this does both:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cinst nodejs.install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After installation, you may need to add &lt;code&gt;C:\Program Files\nodejs&lt;/code&gt; to the system path and create a new folder in &lt;code&gt;C:\Users\ben_000\AppData\Roaming&lt;/code&gt; named &lt;code&gt;npm&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Get NPM to create a &lt;code&gt;package.json&lt;/code&gt; file in the project root by running &lt;code&gt;npm install&lt;/code&gt; and working through the wizard. Now install Gulp using NPM:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install --save-dev gulp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;--save-dev&lt;/code&gt; flag adds the dependencies to &lt;code&gt;package.json&lt;/code&gt;. This means that when you open the repository in a new environment you can just do &lt;code&gt;npm install&lt;/code&gt; to automatically install the project&amp;rsquo;s NPM dependencies. &lt;/p&gt;

&lt;p&gt;Note that Gulp itself should also be installed globally so you can use &lt;code&gt;gulp&lt;/code&gt; on the command line:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install -g gulp
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;helloworlding-gulp&quot;&gt;helloworlding Gulp&lt;/h2&gt;

&lt;p&gt;Create a file &lt;code&gt;gulpfile.js&lt;/code&gt; in the project root. Start out by importing the Gulp module:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var gulp = require('gulp');
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;gulp.task()&lt;/code&gt; defines a task that&amp;rsquo;s available from the command line.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gulp.task('hello', function() {
	console.log('Hello world!')
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you run &lt;code&gt;gulp hello&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Î» gulp hello
[10:22:08] Using gulpfile c:\source\angular-learnings\gulpfile.js
[10:22:08] Starting 'hello'...
Hello world!
[10:22:08] Finished 'hello' after 316 Î¼s
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;gulp.task&lt;/code&gt; also lets you run prerequisite tasks:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gulp.task('hello', ['one', 'two', 'three'], function() {
	console.log('Hello world!')
});

gulp.task('one', function(){
	console.log('one');
});

gulp.task('two', function(){
	console.log('two');
});

gulp.task('three', function(){
	console.log('three');
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now &lt;code&gt;gulp hello&lt;/code&gt; does this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[10:24:49] Starting 'one'...
one
[10:24:49] Finished 'one' after 200 Î¼s
[10:24:49] Starting 'two'...
two
[10:24:49] Finished 'two' after 151 Î¼s
[10:24:49] Starting 'three'...
three
[10:24:49] Finished 'three' after 154 Î¼s
[10:24:49] Starting 'hello'...
Hello world!
[10:24:49] Finished 'hello' after 135 Î¼s
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now make you a build pipeline. Empty out &lt;code&gt;gulpfile.js&lt;/code&gt; and start again, partner.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://media.giphy.com/media/a1wyl0YQrCGm4/giphy.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;lots-of-scripting-just-to-copy-a-file&quot;&gt;Lots of scripting just to copy a file!&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;m just going to start out with a simple build pipeline that basically copies &lt;code&gt;index.html&lt;/code&gt; to the server.&lt;/p&gt;

&lt;p&gt;Install some more NPM packages. &lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.npmjs.com/package/gulp-load-plugins&quot;&gt;&lt;code&gt;gulp-load-plugins&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install --save-dev gulp-load-plugins
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;Loads in any gulp plugins and attaches them to the global scope, or an object of your choice.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Eg.:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var gutil = require('gulp-load-plugins')([
	'colors', 'env', 'log', 'pipeline'
]);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&quot;https://www.npmjs.com/package/gulp-notify&quot;&gt;&lt;code&gt;gulp-notify&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install --save-dev gulp-notify
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;gulp plugin to send messages based on Vinyl Files or Errors to Mac OS X, Linux or Windows using the node-notifier module. Fallbacks to Growl or simply logging&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;https://www.npmjs.com/package/gulp-filter&quot;&gt;&lt;code&gt;gulp-filter&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install --save-dev gulp-filter
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&quot;https://www.npmjs.com/package/chalk&quot;&gt;&lt;code&gt;chalk&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install --save-dev chalk
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;Terminal string styling done right&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;https://www.npmjs.com/package/dateformat&quot;&gt;&lt;code&gt;dateformat&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install --save-dev dateformat
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;A node.js package for Steven Levithan&amp;rsquo;s excellent dateFormat() function.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;https://www.npmjs.com/package/del&quot;&gt;&lt;code&gt;del&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install --save-dev del
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;Delete files/folders using globs&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Whew, that&amp;rsquo;s a bunch of dependencies. At the top of &lt;code&gt;gulpfile.js&lt;/code&gt;, pull them in using &lt;code&gt;require()&lt;/code&gt; and get some utility dependencies into scope:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var gulp = require('gulp');
var notify = require('gulp-notify');
var filter = require('gulp-filter');
var plugins = require('gulp-load-plugins')();
var del = require('del');
var path = require('path');

var gutil = plugins.loadUtils([
	'colors', 'log'
]);

var log = gutil.log;
var colors = gutil.colors;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To centralise the build paths, add this next:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var config = {
	&quot;paths&quot;: {
		&quot;source&quot;: &quot;src/client&quot;,
		&quot;distribution&quot;: &quot;src/client-dist&quot;
	}
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This could be put into another file like &lt;code&gt;gulp-config.json&lt;/code&gt; and pulled in with a &lt;code&gt;require()&lt;/code&gt; but for now this will do.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ll split out the actual copy process into a gulp task called &lt;code&gt;rev-and-inject&lt;/code&gt;. This will eventually be more involved including adding a revision number for cache busting and injecting minified and bundled resources.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gulp.task('rev-and-inject', function() {
	var indexPath = path.join(config.paths.source, 'index.html');

	return gulp
		// set source
		.src([].concat(indexPath))
		// write to dest
		.pipe(gulp.dest(config.paths.distribution))
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;build&lt;/code&gt; task calls &lt;code&gt;rev--and-inject&lt;/code&gt; before displaying a notification (using a toast!):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gulp.task('build', function(){
	return gulp
		.src('')
		.pipe(notify({
			onLast: true,
			message: 'Build complete'
	}));
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In &lt;code&gt;src/client&lt;/code&gt; I&amp;rsquo;ve added an &lt;code&gt;index.html&lt;/code&gt; just for testing. Run &lt;code&gt;gulp build&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[15:05:05] Starting 'rev-and-inject'...
[15:05:05] Finished 'rev-and-inject' after 24 ms
[15:05:05] Starting 'build'...
[15:05:05] gulp-notify: [Gulp notification] Build complete
[15:05:05] Finished 'build' after 35 ms
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can add a quick &lt;code&gt;clean&lt;/code&gt; task too, which will delete the &lt;code&gt;src/client-dist&lt;/code&gt; folder:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gulp.task('clean', function(){
	log('Cleaning: ' + config.paths.distribution);

	del([].concat(config.paths.distribution));
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&quot;http://bendetat.com/a-useful-build-pipeline-using-gulp-and-bower.html&quot;&gt;Next I&amp;rsquo;ll add some value to the build pipeline&lt;/a&gt; by minifying and bundling JS and CSS, and injecting the results into &lt;code&gt;index.html&lt;/code&gt;. The result will be a static website set up for some AngularJS work.&lt;/p&gt;

&lt;h2 id=&quot;further-reading-and-resources&quot;&gt;Further reading and resources&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/johnpapa/ng-demos/blob/master/grunt-gulp/build-gulp/gulpfile.js&quot;&gt;https://github.com/johnpapa/ng-demos/blob/master/grunt-gulp/build-gulp/gulpfile.js&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/gertjvr/ng-template&quot;&gt;https://github.com/gertjvr/ng-template&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://gulpjs.com/&quot;&gt;http://gulpjs.com/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://nodejs.org/api/&quot;&gt;http://nodejs.org/api/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
				<pubDate>Tue, 27 Jan 2015 00:00:00 +1000</pubDate>
				<link>http://bendetat.com/hello-world-its-gulp.html</link>
				<guid isPermaLink="true">http://bendetat.com/hello-world-its-gulp.html</guid>
			</item>
		
			<item>
				<author>Ben Scott - ben.scott@readify.net</author>
				<title>A convention test for projects referencing other project references instead of NuGet packages</title>
				<description>&lt;p&gt;Earlier this week I was running into problems when adding a solution to a CI build server. Although there were no problems running the solution locally, the build server was complaining about not being able to resolve a reference for a project.&lt;/p&gt;

&lt;p&gt;The solution was using NuGet package restore, which I happen to prefer over checking in the &lt;code&gt;packages&lt;/code&gt; folder (at least for smaller projects with few developers), but I was confident that the packages were being restored correctly, including the unresolved reference.&lt;/p&gt;

&lt;p&gt;The problem was that the project was referencing an assembly from the &lt;code&gt;/bin/debug&lt;/code&gt; folder of another project, rather than the project referencing the correct NuGet package. This usually happens when using something like Resharper to automatically add a reference. The fix itself is easy:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Delete the reference from the project&lt;/li&gt;
  &lt;li&gt;Right-click the solution&lt;/li&gt;
  &lt;li&gt;Select &amp;lsquo;Manage NuGet Packages for Solution&amp;rsquo;&lt;/li&gt;
  &lt;li&gt;&amp;lsquo;Manage&amp;rsquo; the package&lt;/li&gt;
  &lt;li&gt;Add the project to the package:&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/Zr5S9VX.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;What I really want to do is add a convention test to make sure this doesn&amp;rsquo;t happen again. Why? Because this happens fairly infrequently, but when it does it can be hard to diagnose because it could potentially be caused by a number of things. In my experience, most of the time it is caused by a bad reference. Nevertheless I always seem to burn too much time figuring it out. In my opinion, the ROI of this convention test will probably make it worthwhile.&lt;/p&gt;

&lt;h2 id=&quot;turns-out&quot;&gt;Turns out&lt;/h2&gt;

&lt;p&gt;It&amp;rsquo;s a bit tricky to get to the projects in a solution file. I didn&amp;rsquo;t want to waste too much time in the internals of the build system so I found an &lt;a href=&quot;http://stackoverflow.com/a/4634505/149259&quot;&gt;answer on Stack Overflow&lt;/a&gt; that includes two wrapper classes for getting the solution, then iterating on the projects. The wrapper classes can be copied from &lt;a href=&quot;https://gist.github.com/bendetat/9a5a336d82b51ac0b564&quot;&gt;this gist&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You&amp;rsquo;ll need to add a reference to &lt;code&gt;Microsoft.Build&lt;/code&gt;. Some of the classes that are used are actually deprecated, but this should work for long enough to get a good return on this test. The &lt;code&gt;Solution&lt;/code&gt; wrapper class reads a &lt;code&gt;.sln&lt;/code&gt; file and exposes a list of &lt;code&gt;SolutionProject&lt;/code&gt; instance. Each &lt;code&gt;SolutionProject&lt;/code&gt; exposes some of the properties of the project within the solution including the relative path, which I use to build a set of &lt;code&gt;Microsoft.Build.Project&lt;/code&gt; instances for the convention test.&lt;/p&gt;

&lt;h2 id=&quot;test-cases&quot;&gt;Test cases&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;m using NUnit, so my &lt;a href=&quot;http://www.nunit.org/index.php?p=testCaseSource&amp;amp;r=2.5&quot;&gt;test cases&lt;/a&gt; come from a public method that returns an enumeration of &lt;code&gt;TestCastData&lt;/code&gt; instances:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public IEnumerable&amp;lt;TestCaseData&amp;gt; AllProjects
{
    get
    {
        var solution = new Solution(&quot;../../../../MySolution.sln&quot;);
        var allProjects = solution.Projects
            .Where(x =&amp;gt; x.RelativePath != &quot;.nuget&quot;)
            .Where(x =&amp;gt; x.ProjectName != &quot;Microsoft.Build.Evaluation.Project&quot;)
            .ToArray();
        var allProjectNames = allProjects.Select(x =&amp;gt; x.ProjectName).ToArray();
        
        return allProjects.Select(x =&amp;gt;
        {
            var project = new Project(&quot;../../../../&quot; + x.RelativePath);
            var testCase = new TestCaseData(project, allProjectNames);
            testCase.SetName(x.ProjectName);

            return testCase;
        });
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Opens the solution file (as an instance of the above &lt;code&gt;Solution&lt;/code&gt; wrapper). I&amp;rsquo;ve hard-coded the relative path to the solution because there&amp;rsquo;s no need to get fancy - the tests are running in &lt;code&gt;src/MyProject/bin/[debug|release]/&lt;/code&gt; relative to the solution file. If you don&amp;rsquo;t keep the projects in a &lt;code&gt;/src&lt;/code&gt; subdirectory then take out one of the &lt;code&gt;../&lt;/code&gt; bits.&lt;/li&gt;
  &lt;li&gt;Get all of the projects (as an instance of the above &lt;code&gt;SolutionProject&lt;/code&gt; wrapper), except for &lt;code&gt;.nuget&lt;/code&gt; and &lt;code&gt;Microsoft.Build.Evaluation.Project&lt;/code&gt;, which are included in the solution as project references.&lt;/li&gt;
  &lt;li&gt;Select out all the names of the projects. This is passed into each &lt;code&gt;TestCaseData&lt;/code&gt; for comparison in the actual test.&lt;/li&gt;
  &lt;li&gt;Build up and return the &lt;code&gt;TestCaseData&lt;/code&gt; enumeration:
    &lt;ol&gt;
      &lt;li&gt;Construct a new &lt;code&gt;Microsoft.Build.Project&lt;/code&gt; instance using the relative path. Note that this hasn&amp;rsquo;t been tested with solution folder (it would &lt;em&gt;probably&lt;/em&gt; work because I would hope that the relative path includes the solution folder).&lt;/li&gt;
      &lt;li&gt;Build a new &lt;code&gt;TestCaseData&lt;/code&gt; instance with the project and the list of project names build up above.&lt;/li&gt;
      &lt;li&gt;Set the name of the test case to the name of the project.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;bangarang&quot;&gt;Bangarang&lt;/h2&gt;

&lt;p&gt;That&amp;rsquo;s a &lt;a href=&quot;http://www.imdb.com/title/tt0102057/&quot;&gt;Hook&lt;/a&gt; reference, not some &amp;lsquo;popular&amp;rsquo; EDM song.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m using Shouldly for the assertion.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[Test, TestCaseSource(&quot;AllProjects&quot;)]
public void ProjectShouldNotReferenceAssembliesInOtherProjects(Project project, string[] allProjectNames)
{
        var startsWithProjectName = new Func&amp;lt;string, string, bool&amp;gt;((x, projectName) =&amp;gt; x.StartsWith(&quot;..\\&quot; + projectName + &quot;\\&quot;));
        var isReferenceInAnotherProject = new Func&amp;lt;string, bool&amp;gt;(x =&amp;gt; allProjectNames.Any(projectName =&amp;gt; startsWithProjectName(x, projectName)));

        var badReferences = from projectItem in project.GetItems(&quot;Reference&quot;)
                            from metaData in projectItem.Metadata
                            let reference = metaData.EvaluatedValue
                            where isReferenceInAnotherProject(reference)
                            select reference;

        badReferences.ShouldBeEmpty();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This was jammed together in LinqPad, but it&amp;rsquo;s pretty straightforward. The first two lines set up some helpers to simplify the query. Then the bad references are determined by finding the references in the project, then checking if the reference is in another project using a fairly naive path check.&lt;/p&gt;

&lt;p&gt;Failures look like this, showing the bad reference in the &lt;code&gt;Tests&lt;/code&gt; assembly:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/Hkc6y9a.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Viz.&lt;/p&gt;

&lt;iframe width=&quot;420&quot; height=&quot;315&quot; src=&quot;//www.youtube.com/embed/E2VCwBzGdPM&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

</description>
				<pubDate>Sat, 17 Jan 2015 00:00:00 +1000</pubDate>
				<link>http://bendetat.com/convention-test-for-projects-referencing-other-project-references-instead-of-nuget-packages.html</link>
				<guid isPermaLink="true">http://bendetat.com/convention-test-for-projects-referencing-other-project-references-instead-of-nuget-packages.html</guid>
			</item>
		
			<item>
				<author>Ben Scott - ben.scott@readify.net</author>
				<title>Xamarin Studio borking on a Unified API project</title>
				<description>&lt;p&gt;I created a Unified API iOS Binding Project in Xamarin Studio (but this may happen for all unified API projects). This is in Xamarin Studio 5.5.4. When I went to build the project I got an error, something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Error: could not import 'blah'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&quot;http://forums.xamarin.com/discussion/27217&quot;&gt;Turns out&lt;/a&gt; the generated project file &lt;a href=&quot;http://forums.xamarin.com/discussion/comment/87535/#Comment_87535&quot;&gt;has some errors&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Hi, i did succeed in the end. Here was the solution for me: For some reason, the binding project with Unified API has some errors in it&amp;rsquo;s project file. After creating the project, i saved it. and opened it with a text editor.
Look for the Importproject element that claims to import the ObjCruntime, this line has a faulty path. It should be:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;Import Project=&quot;$(MSBuildExtensionsPath)\Xamarin\Xamarin.ObjcBinding.CSharp.targets&quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;Also, i added this to the propertygroups:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;TargetFrameworkIdentifier&amp;gt;Xamarin.iOS&amp;lt;/TargetFrameworkIdentifier&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(Note: add the framework identifier to each of the &lt;code&gt;PropertyGroup&lt;/code&gt; elements)&lt;/p&gt;

</description>
				<pubDate>Mon, 12 Jan 2015 00:00:00 +1000</pubDate>
				<link>http://bendetat.com/xamarin-studio-borking-on-unified-api-project.html</link>
				<guid isPermaLink="true">http://bendetat.com/xamarin-studio-borking-on-unified-api-project.html</guid>
			</item>
		
			<item>
				<author>Ben Scott - ben.scott@readify.net</author>
				<title>Access IIS Express from another machine</title>
				<description>&lt;p&gt;By default, IIS Express (via Visual Studio) will only allow connections from the local machine. This is a Good Thing but sometimes you need to test sites and services from another machine. I&amp;rsquo;ve found several guide that explain how to do this but they always seem to miss some steps. This will show how to share an IIS Express site via the host&amp;rsquo;s IP address. Using the machine name is also possible as is using the HOSTS file to fake a domain (like &lt;code&gt;api.mysite.example.com&lt;/code&gt;) but both of these scenarios are outside the scope of these instructions. This has only been tested on computers on the same subnet which should be sufficient for most test scenarios.&lt;/p&gt;

&lt;h2 id=&quot;site-works-locally&quot;&gt;1. Site works locally&lt;/h2&gt;

&lt;p&gt;First, your project&amp;rsquo;s Web properties should look something like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/yDI4IZs.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This is the default for a new website. The port may be different and &amp;lsquo;Apply server settings to all users (store in project file)&amp;rsquo; doesn&amp;rsquo;t have to be checked. The site should also run locally without issues. Make a note of the port.&lt;/p&gt;

&lt;h2 id=&quot;set-up-httpsys&quot;&gt;2. Set up HTTP.sys&lt;/h2&gt;

&lt;p&gt;HTTP.sys is a component of Windows (Vista and above) that handles HTTP requests. The url that is going to be shared needs to be reserved in HTTP.sys&amp;rsquo;s access control list (ACL). Open an &lt;em&gt;administrative&lt;/em&gt; console. If the console doesn&amp;rsquo;t have admin rights, this won&amp;rsquo;t work. Find out your IP address and run this code to reserve the url in the ACL.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;netsh http add urlacl url=http://192.168.0.6:60985/ user=everyone
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You should get back this message:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;URL reservation successfully added
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If not, check that the console has admin rights and that the url hasn&amp;rsquo;t already been reserved in the ACL. If you need to, the reservation can be deleted:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;netsh http delete urlacl url=http://192.168.0.6:60985/
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;open-up-the-firewall&quot;&gt;3. Open up the firewall&lt;/h2&gt;

&lt;p&gt;Open the Windows Firewall (or whatever firewall you may have) and create an inbound rule allowing the above port (eg. 60985). Make sure it&amp;rsquo;s &lt;strong&gt;incoming&lt;/strong&gt;! Yes I burned time when I accidently made it outgoing. Uncheck &amp;lsquo;Public&amp;rsquo; if you don&amp;rsquo;t want the port to be open at cafes and airports.&lt;/p&gt;

&lt;h2 id=&quot;add-the-new-site-to-iss-expresss-configuration&quot;&gt;4. Add the new site to ISS Express&amp;rsquo;s configuration&lt;/h2&gt;

&lt;p&gt;At this point, the port should actually be available from another computer, but IIS Express will only respond to requests for &lt;code&gt;localhost&lt;/code&gt;. Edit &lt;code&gt;%USERPROFILE%\Documents\iisexpress\config\applicationhost.config&lt;/code&gt; and find the site definition for your project. The easiest way might be to search for the port as it should be unique across the IIS Express instance.  Add a new binding to the site for the external facing address:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/vz9OSBl.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Make sure the application isn&amp;rsquo;t running and kill IIS Express:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/sfSkFrQ.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;strikeprofitstrike-troubleshooting&quot;&gt;5. &lt;strike&gt;Profit!&lt;/strike&gt; Troubleshooting!&lt;/h2&gt;

&lt;p&gt;Restart Visual Studio as administrator and relaunch the application. It should now work on an external machine. If it doesn&amp;rsquo;t work:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;See if you can access the site locally using the IP address. If you cannot, make sure the IIS Express configuration is correct and that it did in fact restart.&lt;/li&gt;
  &lt;li&gt;Make sure the firewall is configured correctly - it should be an &lt;em&gt;inbound&lt;/em&gt; rule allowing traffic on the required port from your subnet.&lt;/li&gt;
  &lt;li&gt;Check the error on the remote machine.
    &lt;ul&gt;
      &lt;li&gt;If it is a timeout (&lt;code&gt;x.x.x.x took too long to respond&lt;/code&gt;) it&amp;rsquo;s probably the host&amp;rsquo;s firewall or ACL, or an unrelated network issue.&lt;/li&gt;
      &lt;li&gt;if it is a 503 Service Unavailable (which should return immediately) it&amp;rsquo;s probably the IIS Express configuration.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;If Visual Studio can&amp;rsquo;t run the project locally saying something like &amp;lsquo;The site http://x.x.x.x:41234 could not be created&amp;rsquo;, make sure the ACL reservation was created.&lt;/li&gt;
&lt;/ul&gt;
</description>
				<pubDate>Wed, 07 Jan 2015 00:00:00 +1000</pubDate>
				<link>http://bendetat.com/access-iis-express-from-another-machine.html</link>
				<guid isPermaLink="true">http://bendetat.com/access-iis-express-from-another-machine.html</guid>
			</item>
		
	</channel>
</rss>