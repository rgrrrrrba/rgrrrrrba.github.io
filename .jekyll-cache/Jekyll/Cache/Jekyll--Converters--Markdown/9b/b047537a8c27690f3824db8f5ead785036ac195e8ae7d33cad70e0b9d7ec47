I".<p>I did two new things yesterday:</p>

<ul>
  <li>Figured out how to use GitHub Actions (GHA) to deploy to Docker Hub</li>
  <li>Got multi-arch builds to deploy to the same tag</li>
</ul>

<p>Here’s the <a href="https://github.com/becdetat/partsbin/blob/main/.github/workflows/docker-image.yml">GitHub Action workflow</a> if you just want to see the code. I’ll spend the rest of this post explaining it part by part.</p>

<p>A GitHub Action is defined by a YAML file. In this case I’m using it for continuous delivery—creating a Docker image containing a <a href="https://partsbin.page">small Blazor application I’ve been working on</a>. Because I want to be able to run this application both on ARM64 (ie. Apple M1/M2) and AMD64 machines (and some time in the future Raspberry Pi and other SBCs), to keep it simple I need to be able to build for the different architectures automatically and have them combined into a single Docker image tag.</p>

<p>This turned out to be harder than I expected but easier than I dreaded…</p>

<h2 id="setting-up">Setting up</h2>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>name: Build image and deploy to Docker Hub
on:
  workflow_dispatch:
  push:
    branches:
      - main
jobs:
</code></pre></div></div>
<p>This first section sets the name of the action. It then specfies what events trigger the action (<code class="language-plaintext highlighter-rouge">on:</code>).</p>

<p>There are two triggers. The first is <code class="language-plaintext highlighter-rouge">workflow_dispatch</code>, which adds a button to the action page that lets you do a manual deploy.</p>

<p>The second is a <code class="language-plaintext highlighter-rouge">push</code> trigger, which happens whenever a push is made to the <code class="language-plaintext highlighter-rouge">main</code> branch. So far I’ve only been working on the main branch, but now that I’ve got this set up I’ll work using a PR model—even though I’m currently the sole contributor to this project.</p>

<p>The last line (<code class="language-plaintext highlighter-rouge">jobs:</code>) is where we start declaring the jobs that make up the action.</p>

<h2 id="enter-the-matrix-neo">Enter the Matrix, Neo</h2>
<p>I need to run two builds—a GitHub hosted runner (<code class="language-plaintext highlighter-rouge">ubuntu-latest</code>) and a self-hosted runner on my MacBook Pro (<code class="language-plaintext highlighter-rouge">macOS</code>). I needed a self-hosted runner because I want an ARM64 build, so I (and hopefully others) can run the application on M1 and M2 based Macs. It doesn’t seem that any ARM64 GitHub hosted runners exist at the moment—there are some third-party runners but since I happen to be typing on a hefty MBP I figured self-hosting a little runner would be fine.</p>

<p>Eventually I’ll probably also set up a Raspberry Pi build, as the app can also be used on a small home or workshop server.</p>

<p>Setting up my self-hosted runner was incredibly easy. Nothing like the old days of setting up TeamCity or Octopus Deploy runners and having to mess with port forwarding.</p>

<p>Here are <a href="https://docs.github.com/en/actions/hosting-your-own-runners/adding-self-hosted-runners">the instructions for adding a self-hosted runner</a>. There are <a href="https://docs.github.com/en/actions/hosting-your-own-runners/configuring-the-self-hosted-runner-application-as-a-service?platform=mac">additional steps required to run it as a service</a>, which for some reason are hidden away…</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  build-and-push:
    strategy:
      matrix:
        os: [ubuntu-latest, macOS]
    runs-on: ${{ matrix.os }}
    steps:
</code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">strategy</code> and <code class="language-plaintext highlighter-rouge">matrix</code> parts sets up a matrix of build options. The builds execute in parallel, however there are ways to limit how many builds run at the same time (to reduce resource load). I didn’t need to set any limits as there are only two parallel builds.</p>

<p>You could specify any number of matrix elements and GHA will run the job for each multiple in the matrix. For example:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>matrix:
    os: [ubuntu-latest, macOS]
    node_version: [10, 11]
</code></pre></div></div>

<p>This would run the job four times, once for each combination of <code class="language-plaintext highlighter-rouge">os</code> and <code class="language-plaintext highlighter-rouge">node_version</code>, <em>in parallel</em>.</p>

<p>For my purposes I only needed to run it on each OS (and therefore underlying architecture—ARM64 and AMD64).</p>

<p>The <code class="language-plaintext highlighter-rouge">runs-on</code> value specifies which OS the job is currently running on.</p>

<h2 id="build-and-push-the-os-specific-images">Build and push the OS-specific images</h2>
<p>Remember that these steps will run two times, in parallel, one on an <code class="language-plaintext highlighter-rouge">ubuntu-latest</code> environment and one in a <code class="language-plaintext highlighter-rouge">macOS</code> environment.</p>

<p>This first step checks out the repository to the runner. The <code class="language-plaintext highlighter-rouge">uses</code> instruction pulls in an action to do this automagically (without having to authenticate then <code class="language-plaintext highlighter-rouge">git pull</code> etc).</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>      - 
        name: Checkout
        uses: actions/checkout@v3
</code></pre></div></div>

<p>The next step builds the code, using the <a href="https://github.com/becdetat/partsbin/blob/main/src/Dockerfile"><code class="language-plaintext highlighter-rouge">Dockerfile</code></a> which is part of the project. Note that the build gets tagged with the current OS for the running job.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>      -
        name: Build the image
        run: docker build -t becdetat/partsbin:latest-${{ matrix.os }} ./src
</code></pre></div></div>

<p>The final two steps in this job logs in to the Docker Hub and pushes the image.</p>

<p>Keep in mind that the image being pushed is for a single architecture (ARM64 or AMD64), so it gets tagged accordingly, as either <code class="language-plaintext highlighter-rouge">becdetat/partsbin:latest-ubuntu-latest</code> or <code class="language-plaintext highlighter-rouge">becdetat/partsbin:latest-macOS</code>.</p>

<p>The <code class="language-plaintext highlighter-rouge">secrets</code> being used for the username and password are configured in GitHub on the Settings page for the repository, under “Secrets and variables” and then “Actions”.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>      - 
        name: Log into Docker Hub
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      -
        name: Push image to Docker Hub
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:  
          context: ./src
          push: true
          tags: becdetat/partsbin:latest-${{ matrix.os }}
</code></pre></div></div>

<p>So at this point I have two images, one for <code class="language-plaintext highlighter-rouge">ubuntu-latest</code> and one for <code class="language-plaintext highlighter-rouge">macOS</code>, pushed up to Docker Hub. This is great, but if someone wants to use my app they would need to make sure they’re pulling the image that corresponds to their system architecture. I want to get smarter than that by creating a combined manifest.</p>

<h2 id="combine-and-push-a-manifest">Combine and push a manifest</h2>
<p>This is a separate job, because it needs to execute after the <code class="language-plaintext highlighter-rouge">build-and-push</code> job. In fact, jobs declared within a GitHub Action will execute in parallel with each other by default, so the <code class="language-plaintext highlighter-rouge">needs: build-and-push</code> item is needed to declare that the job should only execute after the <code class="language-plaintext highlighter-rouge">build-and-push</code> step completes.</p>

<p>Every job needs to specify what runner it can run on. The value isn’t as critical as the previous job, but <code class="language-plaintext highlighter-rouge">ubuntu-latest</code> is a good default option.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  create-combined-manifest:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
</code></pre></div></div>

<p>The first step logs into Docker Hub. This is exactly the same in the previous job.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>      - 
        name: Log into Docker Hub
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
</code></pre></div></div>

<p>The next step creates a combined manifest, containing the <code class="language-plaintext highlighter-rouge">:latest-macOS</code> and <code class="language-plaintext highlighter-rouge">:latest-ubuntu-latest</code> image tags. There are actions and other tools that do this, however the Docker CLI has these commands now so it’s easy enough to just use it directly. I believe that <code class="language-plaintext highlighter-rouge">docker manifest</code> was only added to the CLI within last year (2022) or so.</p>

<p>The first image is the name for the combined manifest, the second and third (<code class="language-plaintext highlighter-rouge">macOS</code>, <code class="language-plaintext highlighter-rouge">ubuntu-latest</code>) are the ones that get added in to the combined manifest.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>      - 
        name: Create manifest
        run: |
          docker manifest create \
            becdetat/partsbin:latest \
            becdetat/partsbin:latest-macOS \
            becdetat/partsbin:latest-ubuntu-latest
</code></pre></div></div>

<p>The final step is pretty sedate, given all the work that’s just been done. It just pushes that combined manifest that was just created up to Docker Hub.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>      -
        name: Push manifest
        run: docker manifest push becdetat/partsbin:latest
</code></pre></div></div>

<p>The result is extremely satisfying:</p>

<p><img src="/images/2023-03-01-github-actions-and-multi-arch-docker-deploys/docker-tag.png" alt="Docker Hub screenshot showing becdetat/partsbin:latest image with both architectures included in the digest" /></p>

<p>Executing a <code class="language-plaintext highlighter-rouge">docker pull becdetat/partsbin:latest</code> (or copying the example <code class="language-plaintext highlighter-rouge">Dockerfile</code> and running <code class="language-plaintext highlighter-rouge">docker up -d</code>) will now automatically pull down the correct image for the architecture of the machine you’re using, for great joy.</p>

:ET