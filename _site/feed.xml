<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Ben d'état - Ben Scott's blog</title>
		<description></description>		
		<link>http://bendetat.com</link>
		<atom:link href="http://bendetat.com/feed.xml" rel="self" type="application/rss+xml" />
		
			<item>
				<author>Ben Scott - ben.scott@readify.net</author>
				<title>Ubuntu Desktop in AWS EC2</title>
				<description>&lt;p&gt;This turned out to be much harder than I had hoped. Creating and connecting to a Windows Server VM is trivial in Azure but I thought I would try creating an Ubuntu VM with a desktop in AWS for the exercise (and hopefully in less time than it would take to download an Ubuntu ISO and set up a local VM - I failed). The main time sink was messing around with the SSH keys, which is admittedly a good thing because it’s got to be, excuse me, pretty damn secure. The other delay was in properly configuring X-Windows to show the Ubuntu desktop. Again this is probably a good thing because an OOTB Ubuntu instance is quite lean and most server-y things can be done via SSH rather in a GUI. That’s not what I was intending for this exercise though.&lt;/p&gt;

&lt;p&gt;I won’t go into &lt;a href=&quot;http://aws.amazon.com/&quot;&gt;creating an AWS account&lt;/a&gt; but wow, that UI. I thought Azure was arcane.&lt;/p&gt;

&lt;p&gt;To create a VM you find a section called ‘Create instance’, which lets you press a button called ‘Launch Instance’, which launches a virtual server, which is known as an Amazon EC2 instance. In Azure this is a big blue plus sign.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/SOJx4Np.png&quot; alt=&quot;pressss meeeee&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now select your VM image. I picked “Ubuntu Server 14.04 LTS (HVM), SSD Volume Type”. It’s free! For eligible! I selected the ‘t2.micro’ instance type, which is also free. This is exactly how much I want to spend. I left everything else as default and clicked ‘Review and Launch’, mainly because I didn’t realise there were other things to configure.&lt;/p&gt;

&lt;p&gt;By default a new security group will be created when launching a new instance, named something like &lt;code&gt;launch-wizard-1&lt;/code&gt;. This is ‘open to the world’, meaning that any IP address could connect to the instance if it has the proper credentials. A security group is basically a set of firewall rules. The only port open by default is 22 for SSH, which requires a private key. Because I’m using SSH tunnelling to forward the VNC port I don’t actually have to change the security group but you could limit port 22 to your static IP if you’ve got one.&lt;/p&gt;

&lt;p&gt;Now hit Launch. The next step lets you create a public &amp;amp; private key pair. Select ‘Create a new key pair’ and give it a nice name. Press Download Key Pair to download the private key then continue. If you hit ‘View instances’ you can see the new VM get provisioned. It’s not that exciting.&lt;/p&gt;

&lt;p&gt;I followed &lt;a href=&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/putty.html?console_help=true&quot;&gt;these instructions&lt;/a&gt; to use PuTTY to SSH into the VM but you could just use &lt;code&gt;ssh&lt;/code&gt; directly. I ended up needing to use SSH directly later on to create an SSH tunnel anyway.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ssh ubuntu@&amp;lt;PUBLIC DNS&amp;gt; -i &amp;lt;KEYFILE&amp;gt;.pem
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The value for &lt;code&gt;-i&lt;/code&gt; is the path to the .pem file downloaded previously.&lt;/p&gt;

&lt;p&gt;I followed &lt;a href=&quot;http://xmodulo.com/how-to-set-up-ubuntu-desktop-vm-on-amazon-ec2.html&quot;&gt;these instructions&lt;/a&gt; to install the Ubuntu desktop and a TightVNC server, but I ended up with the grey screen of an empty X-Windows session. I needed some &lt;a href=&quot;http://askubuntu.com/a/475036/29199&quot;&gt;extra work&lt;/a&gt; to get it going. You should just do the following instead ;)&lt;/p&gt;

&lt;p&gt;Update &lt;code&gt;apt-get&lt;/code&gt; and install lots of things:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo apt-get update
sudo apt-get intall ubuntu-desktop
sudo apt-get intall tightvncserver
sudo apt-get install gnome-panel gnome-settings-daemon metacity nautilus gnome-terminal
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Launch VNC server to create an initial configuration file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vncserver :1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Open the configuration file in VIM:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vim ~/.vnc/xstartup
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Edit the configuration file to look like this, using &lt;code&gt;i&lt;/code&gt; to enter insert mode, then &lt;code&gt;&amp;lt;escape&amp;gt;&lt;/code&gt; &lt;code&gt;:wq&lt;/code&gt; to save and exit:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/bin/sh

export XKL_XMODMAP_DISABLE=1
unset SESSION_MANAGER
unset DBUS_SESSION_BUS_ADDRESS

[ -x /etc/vnc/xstartup ] &amp;amp;&amp;amp; exec /etc/vnc/xstartup
[ -r $HOME/.Xresources ] &amp;amp;&amp;amp; xrdb $HOME/.Xresources
xsetroot -solid grey

vncconfig -iconic &amp;amp;
gnome-panel &amp;amp;
gnome-settings-daemon &amp;amp;
metacity &amp;amp;
nautilus &amp;amp;
gnome-terminal &amp;amp;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Kill and restart the VNC server to apply the settings. This needs to happen each time the VNC / X-Windows configuration is updated.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vncserver -kill :1
vncserver :1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After setting up the VNC server you need to create an SSH tunnel. Open a local console that has &lt;code&gt;ssh.exe&lt;/code&gt; in the path (Cmder didn’t have it but vanilla PowerShell did). The command to run is&lt;sup id=&quot;fnref:how-to-specify-a-private-key-in-ssh&quot;&gt;&lt;a href=&quot;#fn:how-to-specify-a-private-key-in-ssh&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ssh ubuntu@&amp;lt;PUBLIC DNS&amp;gt; -L 5902/127.0.0.1/5901 -i &amp;lt;KEYFILE&amp;gt;.pem
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;-L&lt;/code&gt; sets up the tunnel, from port &lt;code&gt;5902&lt;/code&gt; on &lt;code&gt;127.0.0.1&lt;/code&gt; (localhost) to port &lt;code&gt;5901&lt;/code&gt; on the remote server. Note that I’m setting my local endpoint to port 5902 - 5901 didn’t work for me.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/iYRRB3k.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you’re on Windows, &lt;a href=&quot;http://www.tightvnc.com/download.php&quot;&gt;download Tight-VNC&lt;/a&gt; instead of using apt-get to install VNC. Connect to &lt;code&gt;127.0.0.1::5902&lt;/code&gt; and use the password you gave above. You should now see your new shiny Ubuntu desktop:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/m7PRgMm.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you see an empty grey window like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/crHgZFM.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;, or if parts of the Ubuntu desktop seem to be missing, you will need to work on the VNC / X-Windows configuration. Make sure you’ve edited the &lt;code&gt;xstartup&lt;/code&gt; file for the user that the tunnel is logged in as for a start.&lt;/p&gt;

&lt;p&gt;Quick note: to delete an instance you just need to terminate it. It doesn’t disappear from the list immediately but apparently it will. &lt;em&gt;refresh&lt;/em&gt; nope, still there.&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:how-to-specify-a-private-key-in-ssh&quot;&gt;
      &lt;p&gt;http://xmodulo.com/how-to-specify-private-key-file-in-ssh.html &lt;a href=&quot;#fnref:how-to-specify-a-private-key-in-ssh&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
				<pubDate>Thu, 30 Jul 2015 00:00:00 +1000</pubDate>
				<link>http://bendetat.com/ubuntu-desktop-in-ec2.html</link>
				<guid isPermaLink="true">http://bendetat.com/ubuntu-desktop-in-ec2.html</guid>
			</item>
		
			<item>
				<author>Ben Scott - ben.scott@readify.net</author>
				<title>Controller scope in Angular JS directives</title>
				<description>&lt;p&gt;This is probably basic level Angular JS but I haven’t seen it mentioned anywhere. I’m probably missing something fundamental about directive scope.&lt;/p&gt;

&lt;p&gt;Say you’ve got this directive (&lt;a href=&quot;http://jsfiddle.net/10qwqc5r/2/&quot;&gt;JSFiddle&lt;/a&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;angular
    .module('app', [])
    .directive('thing', function() {
        return {
            restrict: 'E',
            replace: true,
            template: '&amp;lt;div&amp;gt;&amp;lt;input ng-model=&quot;vm.name&quot;/&amp;gt; Name: &amp;lt;/div&amp;gt;',
            controller: function() {
                this.name = '';
            },
            controllerAs: 'vm'
        };
    });
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Using it once works great:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;div ng-app=&quot;app&quot;&amp;gt;
	&amp;lt;thing&amp;gt;&amp;lt;/thing&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But if you use the directive multiple times, it becomes clear that the directive views all share the same controller:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;div ng-app=&quot;app&quot;&amp;gt;
    &amp;lt;thing&amp;gt;&amp;lt;/thing&amp;gt;
    &amp;lt;thing&amp;gt;&amp;lt;/thing&amp;gt;
    &amp;lt;thing&amp;gt;&amp;lt;/thing&amp;gt;
    &amp;lt;thing&amp;gt;&amp;lt;/thing&amp;gt;
    &amp;lt;thing&amp;gt;&amp;lt;/thing&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/Oqbl2Yy.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Typing in the first textbox affects all of the other directive views, ie. they are all pointing to the same controller.&lt;/p&gt;

&lt;p&gt;In fact, if you have different directives with the same &lt;code&gt;controllerAs&lt;/code&gt; value, you can see that the &lt;code&gt;vm&lt;/code&gt; instance for each directive is set to the last directive’s controller (&lt;a href=&quot;http://jsfiddle.net/10qwqc5r/3/&quot;&gt;JSFiddle&lt;/a&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;angular
    .module('app', [])
    .directive('firstDirective', function() {
        return {
            restrict: 'E',
            replace: true,
            template: '&amp;lt;div&amp;gt;first directive: &amp;lt;pre&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;',
            controller: function() {
                this.foo = 'Hi!';
            },
            controllerAs: 'vm'
        };
    })
    .directive('secondDirective', function(){
        return {
            restrict: 'E',
            replace: true,
            template: '&amp;lt;div&amp;gt;second directive: &amp;lt;pre&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;',
            controller: function() {
                this.bar = 'There?';
            },
            controllerAs: 'vm'
        };
    });

&amp;lt;div ng-app=&quot;app&quot;&amp;gt;
	&amp;lt;first-directive&amp;gt;&amp;lt;/first-directive&amp;gt;
	&amp;lt;second-directive&amp;gt;&amp;lt;/second-directive&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/9y6Rg6k.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you change the name of the &lt;code&gt;controllerAs&lt;/code&gt; alias - say to &lt;code&gt;firstDirectiveVm&lt;/code&gt; and &lt;code&gt;secondDirectiveVm&lt;/code&gt; - then the problem goes away, so Angular JS by default is setting &lt;code&gt;vm&lt;/code&gt; globally each time a directive uses &lt;code&gt;controllerAs: 'vm'&lt;/code&gt;, and going down the page, meaning the last &lt;code&gt;vm&lt;/code&gt; wins. This can obviously be a pretty tricky problem to diagnose. Besides which, this workaround of changing each directive’s &lt;code&gt;controllerAs&lt;/code&gt; value won’t work for multiple directives of the same type.&lt;/p&gt;

&lt;p&gt;The solution is to set &lt;code&gt;scope&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; in the directive declaration (&lt;a href=&quot;http://jsfiddle.net/10qwqc5r/4/&quot;&gt;JSFiddle&lt;/a&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;angular
    .module('app', [])
    .directive('thing', function() {
        return {
            restrict: 'E',
            replace: true,
            template: '&amp;lt;div&amp;gt;&amp;lt;input ng-model=&quot;vm.name&quot;/&amp;gt; Name: &amp;lt;/div&amp;gt;',
            controller: function() {
                this.name = '';
            },
            controllerAs: 'vm',
            scope: true
        };
    });
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/jUlaSCJ.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A lot more can happen in that &lt;code&gt;scope&lt;/code&gt; value than setting it to true. See the Angular JS docs for &lt;a href=&quot;https://docs.angularjs.org/guide/directive#isolating-the-scope-of-a-directive&quot;&gt;isolating directive scope&lt;/a&gt; for examples. Unfortunately, ‘scope’ seems to be an overloaded term in Angular JS world. This kind of ‘scope’ is talking about the scope of the element and attributes provided by the directive, in a way distinct from &lt;code&gt;$scope&lt;/code&gt;, which is what I’m trying to avoid by using &lt;code&gt;controllerAs&lt;/code&gt; in the first place.&lt;/p&gt;

&lt;p&gt;It seems strange to me that shared scope is the default, and that you need to set &lt;code&gt;scope&lt;/code&gt; to a non-falsy value to opt out of that. I’m sure I’m missing a lot of nuance around the reasons. In any case, setting &lt;code&gt;scope: true&lt;/code&gt; seems to be the happy path. &lt;/p&gt;

&lt;p&gt;I just wish I hadn’t wasted a full day rewriting an entire site before figuring out what was happening.&lt;/p&gt;

&lt;p&gt;:-(&lt;/p&gt;

</description>
				<pubDate>Sun, 28 Jun 2015 00:00:00 +1000</pubDate>
				<link>http://bendetat.com/controller-scope-in-angular-js-directives.html</link>
				<guid isPermaLink="true">http://bendetat.com/controller-scope-in-angular-js-directives.html</guid>
			</item>
		
			<item>
				<author>Ben Scott - ben.scott@readify.net</author>
				<title>Setting up TeamCity and GitVersion for an open source project</title>
				<description>&lt;p&gt;Note that I’m using TeamCity 9.0 (build 32060) and GitVersion 2.0.1. These steps may be different in future versions. GitVersion seems to be slated for a 3.0 release very soon.&lt;/p&gt;

&lt;h2 id=&quot;practice-makes-perfect&quot;&gt;Practice makes perfect&lt;/h2&gt;

&lt;p&gt;I’m setting up TeamCity using GitVersion for a new open source project that I want to deploy via NuGet. I’ve used TeamCity a few times to set up basic builds but I’ve never got &lt;a href=&quot;http://semver.org/&quot;&gt;SemVer&lt;/a&gt; working in a nice way before, so I thought this would be a nice opportunity to try &lt;a href=&quot;https://github.com/ParticularLabs/GitVersion&quot;&gt;GitVersion&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The Release configuration is triggered manually to deploy the last built version to NuGet. It would probably be nicer to do this from Octopus but for now I’ll just use TeamCity.&lt;/p&gt;

&lt;h2 id=&quot;preparing-the-build-agent&quot;&gt;Preparing the build agent&lt;/h2&gt;

&lt;p&gt;I’ve started out with an &lt;a href=&quot;http://bendetat.com/set-up-teamcity-on-an-azure-instance-redux.html&quot;&gt;Azure VM configured with TeamCity 9&lt;/a&gt;. I first installed GitVersion on my build agent using &lt;a href=&quot;https://chocolatey.org/&quot;&gt;Chocolatey&lt;/a&gt;. Install Chocolatey using an elevated Powershell console:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;iex ((new-object net.webclient).DownloadString('https://chocolatey.org/install.ps1'))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then install GitVersion:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cinst gitversion.portable
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You may also have to install &lt;a href=&quot;https://msysgit.github.io/&quot;&gt;msysgit&lt;/a&gt;. TeamCity has its own Git client built into the server but GitVersion needs to be able to access the Git history on the agent, which means the VCS checkout has to happen on the agent (configured below). Reboot the machine once this is done to make sure everything is on the path.&lt;/p&gt;

&lt;h2 id=&quot;teamcity-setup&quot;&gt;TeamCity setup&lt;/h2&gt;

&lt;p&gt;Now start setting up the project in TeamCity.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Under &lt;em&gt;Administration&lt;/em&gt;, create a new project&lt;/li&gt;
  &lt;li&gt;Create a build configuration called &lt;code&gt;CI&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;In the VCS roots, just paste the HTTPS clone URL from Github into the &lt;em&gt;Repository URL&lt;/em&gt;. Change the &lt;em&gt;Authentication method&lt;/em&gt; to &lt;em&gt;Password&lt;/em&gt; and enter your Github username and password. &lt;em&gt;Note:&lt;/em&gt; I’m using HTTPS because GitVersion uses LitGit2Sharp, which doesn’t support SSH at the time of writing :’-( (at least GitVersion doesn’t support it AFAIK)&lt;/li&gt;
  &lt;li&gt;Click &lt;em&gt;Create&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now create the first build step for GitVersion. I used &lt;a href=&quot;http://jake.ginnivan.net/blog/2014/07/09/my-typical-teamcity-build-setup/&quot;&gt;Jake Ginnivan’s post on his typical TeamCity build setup&lt;/a&gt; as a guide.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Click &lt;em&gt;Add build step&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;Select &lt;em&gt;Command Line&lt;/em&gt; as the &lt;em&gt;Runner type&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;Change the &lt;em&gt;Run&lt;/em&gt; value to &lt;em&gt;Executable with parameters&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Command executable&lt;/em&gt; is &lt;code&gt;GitVersion&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Command parameters&lt;/em&gt; is &lt;code&gt;. /updateAssemblyInfo /assemblyVersionFormat MajorMinorPatch /output buildserver&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Note that there is a space between the &lt;code&gt;.&lt;/code&gt; and the &lt;code&gt;/updateAssemblyInfo&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/stM7oSn.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note&lt;/em&gt; with the 3.0 release of GitVersion the command parameters may be able to be removed in favour of a &lt;code&gt;GitVersionConfig.yaml&lt;/code&gt; configuration file. Stay tuned.&lt;/p&gt;

&lt;p&gt;Now create another build step to build the solution.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Under &lt;em&gt;Build Steps&lt;/em&gt; click &lt;em&gt;Auto-detect build steps&lt;/em&gt;, which scans the repository and finds things to build. In this case it identified a &lt;em&gt;Visual Studio (sln)&lt;/em&gt; build step which just builds &lt;code&gt;PROJECT_NAME.sln&lt;/code&gt;. Select the step then clicked &lt;em&gt;Use selected&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;Under &lt;em&gt;Version Control Settings&lt;/em&gt;, change the &lt;em&gt;VCS checkout mode&lt;/em&gt; from &lt;em&gt;Automatically on server&lt;/em&gt; to &lt;em&gt;Automatically on agent&lt;/em&gt;. This will check out the repository on the agent, which means the &lt;code&gt;.git&lt;/code&gt; folder will exist and GitVersion should work properly.&lt;/li&gt;
  &lt;li&gt;Also check the &lt;em&gt;Clean build&lt;/em&gt; option.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To run GitVersion before building the solution:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Reorder build steps&lt;/li&gt;
  &lt;li&gt;Drag &lt;em&gt;GitVersion&lt;/em&gt; above &lt;em&gt;Visual Studio (sln)&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Apply&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now select &lt;em&gt;Triggers&lt;/em&gt; and &lt;em&gt;Add a new trigger&lt;/em&gt;. Select &lt;em&gt;VCS Trigger&lt;/em&gt; then &lt;em&gt;Save&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&quot;i-wonder-what-happens-if-i-press-this&quot;&gt;I wonder what happens if I press this…&lt;/h2&gt;

&lt;p&gt;Running the configuration worked for me at this point, resulting in a build versioned &lt;code&gt;0.1.0+21&lt;/code&gt; (there were 22 commits, so that’s 21 commits since version &lt;code&gt;0.0.0&lt;/code&gt;). If you get an error about not being able to find &lt;code&gt;GitVersion&lt;/code&gt; or &lt;code&gt;git.exe&lt;/code&gt; make sure the build agent has rebooted and that GitVersion and Git are on the path.&lt;/p&gt;

&lt;p&gt;Next you can add a step to run tests. I’m using xUnit. This is just a &lt;em&gt;Command Line&lt;/em&gt; runner with the following custom script:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;packages\xunit.runner.console.2.0.0\tools\xunit.console.exe src\YOUR_PROJECT.Tests\bin\Release\YOUR_PROJECT.Tests.dll
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;releasing-to-nuget&quot;&gt;Releasing to NuGet&lt;/h2&gt;

&lt;p&gt;First you need to add a &lt;code&gt;nuspec&lt;/code&gt; file alongside the library being released (add it to the project in Visual Studio) and push it up so TeamCity can see it. For example, &lt;code&gt;.\src\frankenwiki\Frankenwiki.nuspec&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&amp;gt; 
&amp;lt;package&amp;gt; 
	&amp;lt;metadata&amp;gt; 
		&amp;lt;id&amp;gt;frankenwiki&amp;lt;/id&amp;gt; 
		&amp;lt;title&amp;gt;Frankenwiki&amp;lt;/title&amp;gt;
		&amp;lt;version&amp;gt;0.0.0&amp;lt;/version&amp;gt; 
		&amp;lt;authors&amp;gt;Ben Scott&amp;lt;/authors&amp;gt;
		&amp;lt;description&amp;gt;Markdown based statically generated wiki engine&amp;lt;/description&amp;gt; 
		&amp;lt;language&amp;gt;en-US&amp;lt;/language&amp;gt;
		&amp;lt;licenseUrl&amp;gt;https://github.com/frankenwiki/frankenwiki/blob/master/LICENSE.md&amp;lt;/licenseUrl&amp;gt;
		&amp;lt;releaseNotes&amp;gt;https://github.com/frankenwiki/frankenwiki/releases&amp;lt;/releaseNotes&amp;gt;
		&amp;lt;projectUrl&amp;gt;http://frankenwiki.com&amp;lt;/projectUrl&amp;gt;
	&amp;lt;/metadata&amp;gt;
	&amp;lt;files&amp;gt;
		&amp;lt;file src=&quot;bin\release\Frankenwiki.dll&quot; target=&quot;lib\net451&quot;/&amp;gt;
	&amp;lt;/files&amp;gt;
&amp;lt;/package&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The easiest way to generate the NuGet package (&lt;code&gt;.nupkg&lt;/code&gt;) seems to be &lt;a href=&quot;http://docs.octopusdeploy.com/display/OD/Using+OctoPack&quot;&gt;Octopack&lt;/a&gt;. Install Octopack to the library being released and push the changes up to the repository. Now edit the CI configuration and in the &lt;em&gt;Visual Studio (sln)&lt;/em&gt; step  (the actual build step) show the advanced options and add this to the &lt;em&gt;Command line parameters&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/p:RunOctoPack=true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now when a build happens, OctoPack will create the &lt;code&gt;.nupkg&lt;/code&gt; file named something like &lt;code&gt;Frankenwiki.0.1.0.nupkg&lt;/code&gt;. This package gets consumed in the next step. Trigger a build now to make sure everything works and the package is created as an artifact.&lt;/p&gt;

&lt;p&gt;Create a new build configuration called &lt;em&gt;Release&lt;/em&gt; or &lt;em&gt;Promote&lt;/em&gt; or &lt;em&gt;Fly, my pretties, ah hahahaha!&lt;/em&gt;:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Attach it to the existing VCS root created above&lt;/li&gt;
  &lt;li&gt;Don’t use any of the detected build steps, just &lt;em&gt;configure build steps manually&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;Pick &lt;em&gt;NuGet Publish&lt;/em&gt; as the runner type&lt;/li&gt;
  &lt;li&gt;In &lt;em&gt;Packages&lt;/em&gt;, use a wildcard to specify the &lt;code&gt;.nupkg&lt;/code&gt; file (so it is independent of the version). Eg. &lt;code&gt;Frankenwiki.*.nupkg&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Paste in your &lt;a href=&quot;http://docs.nuget.org/Create/creating-and-publishing-a-package#publishing-using-nuget-command-line&quot;&gt;NuGet API key&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Save&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The last few steps are directly based on &lt;a href=&quot;http://jake.ginnivan.net/blog/2014/07/09/my-typical-teamcity-build-setup/&quot;&gt;Jake’s post&lt;/a&gt;. Go to &lt;em&gt;Build Features&lt;/em&gt; to set up labelling:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;em&gt;Add build feature&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;Select &lt;em&gt;VCS Labelling&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;Select the existing VCS root&lt;/li&gt;
  &lt;li&gt;The default labelling pattern is &lt;code&gt;build-%system.build.number%&lt;/code&gt;. Take out the &lt;code&gt;build-&lt;/code&gt; part so it is just &lt;code&gt;%system.build.number%&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Save&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now go to &lt;em&gt;Dependencies&lt;/em&gt; to set up the build chain:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Add a new snapshot dependency&lt;/li&gt;
  &lt;li&gt;Pick the CI build configuration and any other configurations that run before the Release configuration&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Do not run new build if there is a suitable one&lt;/em&gt; and &lt;em&gt;Only use successful builds from suitable ones&lt;/em&gt; should both be ticked, if they aren’t then tick them&lt;/li&gt;
  &lt;li&gt;Save&lt;/li&gt;
  &lt;li&gt;Add a new artifact dependency&lt;/li&gt;
  &lt;li&gt;Change &lt;em&gt;Get artifacts from&lt;/em&gt; to &lt;em&gt;Build from the same chain&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;In &lt;em&gt;Artifacts rules&lt;/em&gt; use the same wildcard specification as above to select the &lt;code&gt;.nupkg&lt;/code&gt; file&lt;/li&gt;
  &lt;li&gt;Check &lt;em&gt;Clean destination paths before downloading artifacts&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;Save&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Go to &lt;em&gt;General Settings&lt;/em&gt; and show advanced options. Change the &lt;em&gt;Build number format&lt;/em&gt; to the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;%dep.MyProject_Ci.build.number%
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;where &lt;code&gt;MyProject_Ci&lt;/code&gt; is the build configuration ID of the CI step. Once you type in &lt;code&gt;%dep&lt;/code&gt; it will suggest the available configurations.&lt;/p&gt;

&lt;p&gt;Now you should be able to trigger a Release, which should successfully publish the package to NuGet! If everything works.&lt;/p&gt;

&lt;h2 id=&quot;tell-teamcity-to-build-feature-branches-and-tags&quot;&gt;Tell TeamCity to build feature branches and tags&lt;/h2&gt;

&lt;p&gt;TeamCity can build feature branches and tags. This lets GitVersion version feature branches to reduce surprises.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;In &lt;em&gt;Project Settings&lt;/em&gt; select &lt;em&gt;VCS Roots&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;Select the single VCS root created above&lt;/li&gt;
  &lt;li&gt;Make sure the advanced options are visible&lt;/li&gt;
  &lt;li&gt;In &lt;em&gt;Branch specification&lt;/em&gt;, enter &lt;code&gt;+:refs/heads/*&lt;/code&gt; (&lt;a href=&quot;https://confluence.jetbrains.com/display/TCD8/Working+with+Feature+Branches&quot;&gt;Working with Feature Branches&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Check &lt;em&gt;Enable to use tags in the branch specification&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;Save&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;using-gitversion&quot;&gt;Using GitVersion&lt;/h2&gt;

&lt;p&gt;Jake’s post about &lt;a href=&quot;http://jake.ginnivan.net/blog/2014/05/25/simple-versioning-and-release-notes/&quot;&gt;Simple Versioning and Release Notes&lt;/a&gt; has some great info about changing the version but a good one seems to be using a feature branching strategy.&lt;/p&gt;

&lt;p&gt;Push a branch with the new version number in the name. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git checkout -b version-0.3.0
git commit ...
git push
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that just pushing the branch won’t trigger the branch build, there needs to be a non-empty commit.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/SGxLhKx.png&quot; alt=&quot;Feature branches building in TeamCity&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can see that TeamCity has built a new release from the feature branch and GitVersion has versioned it at &lt;code&gt;0.3.0-beta.1+4&lt;/code&gt;. Subsequent commits to this feature branch will increment the build number (eg. &lt;code&gt;0.3.0-beta.1+5&lt;/code&gt;). When the feature branch is merged into master, the master version will become &lt;code&gt;0.3.0&lt;/code&gt; and you can just manually run the Release configuration to deploy to NuGet.&lt;/p&gt;

&lt;h2 id=&quot;extra-tricks-and-gotchas&quot;&gt;Extra tricks and gotchas&lt;/h2&gt;

&lt;h3 id=&quot;commits-with-number-can-have-unexpected-results&quot;&gt;Commits with number can have unexpected results&lt;/h3&gt;

&lt;p&gt;Don’t add a branch or a commit with a version number in it unless you expect it to bump the version number. I merged a branch called &lt;code&gt;change-to-dotnet-4.5.1&lt;/code&gt; which GitVersion helpfully interpreted as a version bump to &lt;code&gt;4.5.1&lt;/code&gt;. I had to fix this by rewriting the commit comments to say &lt;code&gt;4dot5dot1&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;check-the-versioning-scheme&quot;&gt;Check the versioning scheme&lt;/h3&gt;

&lt;p&gt;If GitVersion report a particular version but Octopack generates nuspec files with a different version, check in the &lt;code&gt;AssemblyInfo.cs&lt;/code&gt; file for a different version in the &lt;code&gt;AssemblyVersion&lt;/code&gt; and &lt;code&gt;AssemblyFileVersion&lt;/code&gt; attributes. This can be due to the versioning scheme, which can be set using the &lt;code&gt;/assemblyVersionFormat&lt;/code&gt; parameter as above (or in &lt;code&gt;GitVersionConfig.yaml&lt;/code&gt; once it is supported by GitVersion).&lt;/p&gt;

</description>
				<pubDate>Thu, 25 Jun 2015 00:00:00 +1000</pubDate>
				<link>http://bendetat.com/setting-up-teamcity-and-gitversion-for-an-open-source-project.html</link>
				<guid isPermaLink="true">http://bendetat.com/setting-up-teamcity-and-gitversion-for-an-open-source-project.html</guid>
			</item>
		
			<item>
				<author>Ben Scott - ben.scott@readify.net</author>
				<title>A short, executable rant on why I dislike object initialization syntax</title>
				<description>&lt;pre&gt;&lt;code&gt;void Main()
{
	// Why I ~~Hate~ Dislike Object Initialization Syntax
	// (executable in LinqPad)
	
	// There are three reasons why I despise initialization syntax for all but the most trivial
	// applications. The first two are fairly common and obvious:

	// 1. By design, a class built for object initialization syntax has to have public setters,
	// meaning that the resulting object is mutable.

	// 2. Because a constructor isn't used, there is no way for business rules or domain
	// invariants to be enforced. It is trivial to miss a value or set a value to something
	// that breaks a business rule, which can be difficult and annoying to debug and prevent.

	// The third reason is a bit less common and seems to defy expectations. It involves using
	// array initialization syntax inside of an object initializer.
	
	// This throws a null reference exception:
	
	//var brokens = new Brokens { Ints = { 1, 2, 3 } };
	
	// This is because Ints isn't initialised, and array initialization syntax is just 
	// syntactic sugar for foo.Add(1). You can see this if you try to declare your collection
	// as a straight-up array:
	
	//var brokensWithArray = new BrokensWithArray { Ints = { 1,2,3 } };
	// Build error: Cannot initialize object of type 'int[]' with a collection initializer
	
	// To get the same syntax to work, the class must initialize Ints in the
	// default constructor (a non-default constructor won't work):
	
	var works = new Works { Ints = { 1, 2, 3 } };
	
	// But as far as the consumer is concerned, Brokens and Works are equivalent (they have
	// matching public interfaces). This means hours of fun debugging!
	
	// This syntax also works, by initializing the list before adding the values:
	
	var worksUsingBrokens = new Brokens { Ints = new List&amp;lt;int&amp;gt;() { 1, 2, 3 } };
	
	// This also works with a struct:
	
	var brokensStruct = new BrokensStruct { Ints = new List&amp;lt;int&amp;gt;() { 1, 2, 3 } };
	
	// But since structs can't have parameterless public constructors, they can never use
	// the simpler object initialization syntax:
	
	//struct WorksStruct {
	//	public List&amp;lt;int&amp;gt; Ints { get; set; }
	//	public WorksStruct() {
	//		Ints = new List&amp;lt;int&amp;gt;();
	//	}
	//}
	// Build error: Structs cannot contain explicit parameterless constructors

	// The moral of the story: In C#, prefer using an explicit, parameterised constructor
	// over object initialization syntax. If you need a default constructor (eg. for
	// serialization), mark it with [Obsolete] to indicate your deep dissatifaction with
	// the code you have been forced to write.
}

// Define other methods and classes here
class Brokens {
	public List&amp;lt;int&amp;gt; Ints { get; set; }
}

class Works {
	public List&amp;lt;int&amp;gt; Ints { get; set; }
	
	public Works() {
		Ints = new List&amp;lt;int&amp;gt;();
	}
}

class BrokensWithArray {
	public int[] Ints { get; set; }
}

struct BrokensStruct {
	public List&amp;lt;int&amp;gt; Ints { get; set; }
}
&lt;/code&gt;&lt;/pre&gt;
</description>
				<pubDate>Fri, 22 May 2015 00:00:00 +1000</pubDate>
				<link>http://bendetat.com/a-short-executable-rant-on-why-i-dislike-object-initialization-syntax.html</link>
				<guid isPermaLink="true">http://bendetat.com/a-short-executable-rant-on-why-i-dislike-object-initialization-syntax.html</guid>
			</item>
		
			<item>
				<author>Ben Scott - ben.scott@readify.net</author>
				<title>Simplicity - pattern matching in C#</title>
				<description>&lt;p&gt;&lt;em&gt;TL;DR;&lt;/em&gt; Check out my awesome new library for &lt;a href=&quot;https://www.nuget.org/packages/Simplicity&quot;&gt;pattern matching in C# - Simplicity&lt;/a&gt; (&lt;a href=&quot;https://github.com/bendetat/Simplicity&quot;&gt;GitHub&lt;/a&gt;) or just copy the contents of the &lt;a href=&quot;https://github.com/bendetat/Simplicity/blob/master/src/Simplicity/PatternMatching.cs&quot;&gt;single file&lt;/a&gt; into your project for near-instant gratification.&lt;/p&gt;

&lt;p&gt;Pattern matching is a method of transforming data in some way, similar to &lt;code&gt;map&lt;/code&gt; (&lt;code&gt;.Select()&lt;/code&gt; in LINQ) but closer to a &lt;code&gt;switch&lt;/code&gt; statement in structure. It is a first class language construct in many functional languages including F#:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let name = &quot;Ben&quot;

let result =
	match name with 
	| &quot;Fiona&quot; -&amp;gt; &quot;It's Fiona!&quot;
	| &quot;Ben&quot; -&amp;gt; &quot;Hey it's me!&quot;
	| &quot;Steve&quot; -&amp;gt; &quot;Steve you rascal!&quot;
	| _ -&amp;gt; &quot;I don't know this person&quot;
	
// result = &quot;Hey it's me!&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That’s as deep an explanation of pattern matching in F# you’re going to get from me at this point, but this is conceptually similar to this &lt;code&gt;switch&lt;/code&gt; construct in C#:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var name = &quot;Ben&quot;;
string result;

switch (name) {
	case &quot;Fiona&quot;:
		result =  &quot;It's Fiona!&quot;;
		break;
	case &quot;Ben&quot;:
		result = &quot;Hey it's me!&quot;;
		break;
	case &quot;Steve&quot;:
		result = &quot;Steve you rascal!&quot;;
		break;
	default:
		result = &quot;I don't know this person&quot;;
		break;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is of course pretty average to read, relies on &lt;code&gt;break&lt;/code&gt; for execution control, and isn’t ‘pure’ since &lt;code&gt;result&lt;/code&gt; is mutated during execution.&lt;/p&gt;

&lt;aside class=&quot;pull-right well&quot;&gt;
	&lt;p&gt;I also found a couple of extant libraries that provide similar (and possibly more) functionality:&lt;/p&gt;
	&lt;ul&gt;
		&lt;li&gt;&lt;a href=&quot;https://github.com/johansson/PatternMatching&quot;&gt;johansson/PatternMatching&lt;/a&gt;&lt;/li&gt;
		&lt;li&gt;&lt;a href=&quot;https://github.com/Patrickkk/FunctionalSharp&quot;&gt;Patrickkk/FunctionalSharp&lt;/a&gt;&lt;/li&gt;
	&lt;/ul&gt;
&lt;/aside&gt;

&lt;p&gt;When I found out about pattern matching I wanted to write code the same way in C#. I found a great &lt;a href=&quot;http://codebetter.com/matthewpodwysocki/2008/09/16/functional-c-pattern-matching/&quot;&gt;article by Matt Podwysocki&lt;/a&gt; and adapted and extended the code into a single-file library called &lt;a href=&quot;https://github.com/bendetat/Simplicity&quot;&gt;Simplicity&lt;/a&gt;. Install it &lt;a href=&quot;https://www.nuget.org/packages/Simplicity&quot;&gt;using NuGet&lt;/a&gt; (&lt;code&gt;install-package PatternMatching&lt;/code&gt;) or just &lt;a href=&quot;https://github.com/bendetat/Simplicity/blob/master/src/Simplicity/PatternMatching.cs&quot;&gt;copy the single file&lt;/a&gt; into your project.&lt;/p&gt;

&lt;p&gt;Now for the fun part. Here’s the above example using my library. It adds an generic extension method called &lt;code&gt;Match()&lt;/code&gt; which is the usual entry point. The match statement is built up using a fluent interface.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var name = &quot;Ben&quot;;
var result = name.Match()
	.With(x =&amp;gt; x == &quot;Fiona&quot;, &quot;It's Fiona!&quot;)
	.With(x =&amp;gt; x == &quot;Ben&quot;, &quot;Hey it's me!&quot;)
	.With(x =&amp;gt; x == &quot;Steve&quot;, &quot;Steve you rascal!&quot;)
	.Else(&quot;I don't know this person&quot;)
	.Do();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The result can be an action, taking the value as a parameter:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var name = &quot;George&quot;;
var result = name.Match()
	.With(x =&amp;gt; x == &quot;Fiona&quot;, &quot;It's Fiona!&quot;)
	.With(x =&amp;gt; x == &quot;Ben&quot;, x =&amp;gt; string.Format(&quot;Hey it's {0}!&quot;, x))
	.With(x =&amp;gt; x == &quot;Steve&quot;, &quot;Steve you rascal!&quot;)
	.Else(x =&amp;gt; string.Format(&quot;I don't know {0}&quot;, x))
	.Do();

// result = &quot;I don't know George&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;Else&lt;/code&gt; value is optional but if it falls through without matching and there’s no &lt;code&gt;Else&lt;/code&gt; value it throws an &lt;code&gt;IncompletePatternMatchException&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var name = &quot;Elton&quot;;
var result = name.Match()
	.With(x =&amp;gt; x == &quot;John&quot;, &quot;matched&quot;)
	.With(x =&amp;gt; x == &quot;Paul&quot;, &quot;matched&quot;)
	.Do();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;F# has a wicked type system that C# can’t match, but I can set the output type to dynamic:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var question = &quot;meaning of life&quot;;
var result = question.Match().WithOutputType&amp;lt;dynamic&amp;gt;()
    .With(x =&amp;gt; x.Contains(&quot;roads&quot;), &quot;Blowing in the wind&quot;)
    .With(x =&amp;gt; x.Contains(&quot;life&quot;), 42)
    .Else(&quot;Ask again later&quot;)
    .Do();

// result = (int)42
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;Do()&lt;/code&gt; call evaluates the patterns against the value being matched on, but there’s also an implicit cast operator to the output type that removes the need much of the time. When &lt;code&gt;total&lt;/code&gt; is calculated, the &lt;code&gt;gstRate&lt;/code&gt; match is implicitly cast to &lt;code&gt;decimal&lt;/code&gt; from the pattern match type, which is &lt;code&gt;PatternMatchOnValue&amp;lt;string, decimal&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var country = &quot;NZ&quot;;
var gstRate = country.Match()
	.With(&quot;AU&quot;, 0.1m)
	.With(&quot;NZ&quot;, 0.15m)
	.Else(0.0m);

var total = 2300.0m * (1.0m + gstRate);

// total = 2645.0m
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All of the examples up until now have used the &lt;code&gt;Match()&lt;/code&gt; generic extension method to apply the match statement to the value that gets called with &lt;code&gt;Match()&lt;/code&gt;. I’ve also implemented matching without an input value using the static &lt;code&gt;PatternMatch.Match()&lt;/code&gt; method. This lets you write a match statement that can do things like match on different values or methods, or close over a local value as below:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var eggs = 2;
var basket = PatternMatch.Match()
	.With(() =&amp;gt; eggs == 0, &quot;No eggs&quot;)
	.With(() =&amp;gt; eggs == 1, &quot;One egg&quot;)
	.With(() =&amp;gt; eggs &amp;gt; 1, string.Format(&quot;{0} eggs&quot;, eggs))
	.Else(&quot;Invalid number of eggs&quot;);

var twoEggs = basket.Do();
eggs = 0;
var zeroEggs = basket.Do();
eggs = int.MinValue;
var invalidEggs = basket.Do();

// twoEggs = &quot;2 eggs&quot;
// zeroEggs = &quot;No eggs&quot;
// invalidEggs = &quot;Invalid number of eggs&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There’s also a &lt;code&gt;.ToFunc()&lt;/code&gt; method that gets rid of the &lt;code&gt;.Do()&lt;/code&gt; call by transforming the match statement into a &lt;code&gt;Func&amp;lt;TOut&amp;gt;&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var footwear = &quot;boots&quot;;
var intention = PatternMatch.Match()
	.With(() =&amp;gt; footwear == &quot;red slippers&quot;, &quot;following the Yellow Brick Road&quot;)
	.With(() =&amp;gt; footwear == &quot;boots&quot;, &quot;walking&quot;)
	.With(() =&amp;gt; footwear == &quot;these shoes&quot;, &quot;I don't think so&quot;)
	.ToFunc();

var walking = intention();
footwear = &quot;these shoes&quot;;
var noWayJose = intention();

// walking = &quot;walking&quot;
// noWayJose = &quot;I don't think so&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is getting quite DRY but closing over a local mutable value will have the purists climbing the walls, myself included. So the final form goes back to processing an input, deferred until the match statement is executed. The syntax is a little verbose because C# can’t infer the types of the lambdas without help, but I’m pretty happy with the result - a reusable &lt;code&gt;Func&amp;lt;TIn, TOut&amp;gt;&lt;/code&gt; value that is defined declaratively with no flow control or mutated state:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var processName = PatternMatch.Match&amp;lt;string, string&amp;gt;()
	.With(x =&amp;gt; x.StartsWith(&quot;A&quot;), &quot;Starts with A&quot;)
	.With(x =&amp;gt; x.StartsWith(&quot;B&quot;), &quot;Starts with B&quot;)
	.With(x =&amp;gt; x.StartsWith(&quot;C&quot;), &quot;Starts with C&quot;)
	.With(x =&amp;gt; x.StartsWith(&quot;D&quot;), &quot;Starts with D&quot;)
	.With(x =&amp;gt; x.StartsWith(&quot;E&quot;), &quot;Starts with E&quot;)
	.With(x =&amp;gt; x.StartsWith(&quot;F&quot;), x =&amp;gt; string.Format(&quot;{0} starts with F&quot;, x))
	.Else(&quot;Unknown&quot;)
	.ToFunc();
	
var alfred = processName(&quot;Alfred&quot;);
var fiona = processName(&quot;Fiona&quot;);
var ben = processName(&quot;Ben&quot;);
var xerces = processName(&quot;Xerces&quot;);

// alfred = &quot;Starts with A&quot;
// fiona = &quot;Fiona starts with F&quot;
// ben = &quot;Starts with B&quot;
// xerces = &quot;Unknown&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that this isn’t especially performant! The match statement is built up as a list of expressions that are then looped through naively when evaluated. This could probably be improved using some form of caching. &lt;a href=&quot;https://github.com/bendetat/Simplicity&quot;&gt;Submit a pull request!&lt;/a&gt;&lt;/p&gt;
</description>
				<pubDate>Fri, 15 May 2015 00:00:00 +1000</pubDate>
				<link>http://bendetat.com/simplicity-pattern-matching-in-c-sharp.html</link>
				<guid isPermaLink="true">http://bendetat.com/simplicity-pattern-matching-in-c-sharp.html</guid>
			</item>
		
			<item>
				<author>Ben Scott - ben.scott@readify.net</author>
				<title>Class and method invariants and validation</title>
				<description>&lt;p&gt;I was chatting to my man &lt;a href=&quot;https://twitter.com/todthomson&quot;&gt;Tod&lt;/a&gt; and we came up with a cool pattern for validating both class and method invariants in a way that seems to scale.&lt;/p&gt;

&lt;p&gt;Given a simple class &lt;code&gt;Person&lt;/code&gt;, with some methods for updating from another &lt;code&gt;Person&lt;/code&gt; and updating just the name:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class Person
{
	public string Name { get; private set; }
	private int _age;

	public Person(string name, int age)
	{
		Name = name;
		_age = age;
	}

	public void UpdateFrom(Person person)
	{
		Name = person.Name;
		_age = person._age;
	}

	public void UpdateName(string name)
	{
		Name = name;
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The private &lt;code&gt;_age&lt;/code&gt; is just to demonstrate a private field.&lt;/p&gt;

&lt;p&gt;First add some validation on the constructor. I’m using my &lt;a href=&quot;https://github.com/bendetat/check&quot;&gt;Check&lt;/a&gt; library but this could be implemented in any way that throws an exception if the rule isn’t set.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public Person(string name, int age)
{
	// method invariants
	Check.That(() =&amp;gt; name).IsNotNullOrEmpty();
	Check.That(() =&amp;gt; age &amp;gt;= 0);

	Name = name;
	_age = age;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is what I’m calling a &lt;em&gt;method invariant&lt;/em&gt; - a set of rules that validate the input to a method.&lt;/p&gt;

&lt;p&gt;We also want to validate the state of a person at the end of the method.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;static void Validate(Person person)
{
	Check.That(() =&amp;gt; person.Name).IsNotNullOrEmpty();
	Check.That(() =&amp;gt; person._ge &amp;gt;= 0);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This should happen at the end of each method that changes the state of the person. For example, the constructor becomes:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public Person(string name, int age)
{
	// method invariants
	Check.That(() =&amp;gt; name).IsNotNullOrEmpty();
	Check.That(() =&amp;gt; age &amp;gt;= 0);

	Name = name;
	_age = age;

	// validate myself
	Validate(this);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;UpdateName()&lt;/code&gt; method needs to do the same thing:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public void UpdateName(string name)
{
	Check.That(() =&amp;gt; name).IsNotNullOrEmpty();

	Name = name;

	Validate(this);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;UpdateFrom()&lt;/code&gt; method can validate the entire incoming person:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public void UpdateFrom(Person person)
{
	Validate(person);

	Name = person.Name;
	_age = person._age;

	Validate(this);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Shweet.&lt;/p&gt;
</description>
				<pubDate>Tue, 24 Feb 2015 00:00:00 +1000</pubDate>
				<link>http://bendetat.com/class-and-method-invariants-and-validation.html</link>
				<guid isPermaLink="true">http://bendetat.com/class-and-method-invariants-and-validation.html</guid>
			</item>
		
			<item>
				<author>Ben Scott - ben.scott@readify.net</author>
				<title>Karma and Mocha for AngularJS testing</title>
				<description>&lt;h2 id=&quot;setting-up-karma-with-mocha-phantomjs-and-chai&quot;&gt;Setting up Karma with Mocha, PhantomJS and Chai&lt;/h2&gt;

&lt;p&gt;I’m following the &lt;a href=&quot;http://karma-runner.github.io/0.12/intro/installation.html&quot;&gt;installation guide&lt;/a&gt; at &lt;a href=&quot;http://karma-runner.github.io&quot;&gt;karma-runner.github.io&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I already have Node.js and NPM installed so I won’t go through the process for that, but I’ve found the easiest way to get running is via &lt;a href=&quot;https://chocolatey.org/packages/nodejs.install&quot;&gt;Chocolatey NuGet&lt;/a&gt; using &lt;code&gt;choco install nodejs.install&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;First up, install Karma:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install --save-dev karma
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now install some plugins for Karma. The installation instructions are for Jasmine and the Chrome launcher, but I want &lt;a href=&quot;http://mochajs.org/&quot;&gt;Mocha&lt;/a&gt; as the testing framework and &lt;a href=&quot;http://phantomjs.org/&quot;&gt;PhantomJS&lt;/a&gt; for a headless (window-less) test environment.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;Huh? I thought Karma was the test environment&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Karma is a test &lt;em&gt;runner&lt;/em&gt;. Much like how NUnit has a test runner .exe which can run test assemblies that use the NUnit test framework assemblies. In this case the test runner can run tests based on different test frameworks - in this case. Mocha. Because I’m setting up tests for client-side JavaScript - in particular, I’m going to use AngularJS - the tests need to be run inside a browser environment so that there is a usable DOM. PhantomJS is a WebKit based headless browser that will allow tests to run without opening a browser window.&lt;/p&gt;

&lt;p&gt;So now the Karma plugins for Mocha and PhantomJS need to be installed. The plugins have Mocha and PhantomJS as dependencies, so only the plugins need to be installed. I also want to use &lt;a href=&quot;http://chaijs.com/&quot;&gt;Chai&lt;/a&gt; as the assertion library.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install --save-dev karma-mocha
npm install --save-dev karma-phantomjs-launcher
npm install --save-dev karma-chai
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To make it easier to run &lt;code&gt;karma&lt;/code&gt; from the command line you can install &lt;code&gt;karma-cli&lt;/code&gt; globally, which will run the local version without having to specify the path to karma (&lt;code&gt;node node_modules/karma/bin/karma&lt;/code&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install -g karma-cli
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Karma needs a configuration file. Generate it using &lt;code&gt;karma init&lt;/code&gt; and answer the questions. For this demo all of my code is going to live in &lt;code&gt;./source-and-tests&lt;/code&gt;. If I were using a Gulp build chain this would probably need to be tweaked.&lt;/p&gt;

&lt;dl&gt;
  &lt;dt&gt;Which testing framework do you want to use ?&lt;/dt&gt;
  &lt;dd&gt;&lt;code&gt;mocha&lt;/code&gt;&lt;/dd&gt;
  &lt;dt&gt;Do you want to use Require.js ?&lt;/dt&gt;
  &lt;dd&gt;&lt;code&gt;no&lt;/code&gt;&lt;/dd&gt;
  &lt;dt&gt;Do you want to capture any browsers automatically ?&lt;/dt&gt;
  &lt;dd&gt;&lt;code&gt;PhantomJS&lt;/code&gt;&lt;/dd&gt;
  &lt;dt&gt;What is the location of your source and test files ?&lt;/dt&gt;
  &lt;dd&gt;&lt;code&gt;source-and-tests/**/*.js&lt;/code&gt;&lt;/dd&gt;
  &lt;dt&gt;Should any of the files included by the previous patterns be excluded ?&lt;/dt&gt;
  &lt;dd&gt;&lt;em&gt;leave blank&lt;/em&gt;&lt;/dd&gt;
  &lt;dt&gt;Do you want Karma to watch all the files and run the tests on change ?&lt;/dt&gt;
  &lt;dd&gt;&lt;code&gt;yes&lt;/code&gt;&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;This generates a file called &lt;code&gt;karma-conf.js&lt;/code&gt;, which configures Karma for a test run. You can have multiple configuration files pointing to different test suites or browser configurations, which can be run by specifying the name of the configuration file (&lt;code&gt;karma start my.conf.ks&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;To get Chai included in the test pipeline, we need to edit &lt;code&gt;karma-conf.js&lt;/code&gt; and add it to the &lt;code&gt;frameworks&lt;/code&gt; setting:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;frameworks: ['mocha', 'chai'],
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Running &lt;code&gt;karma start&lt;/code&gt; will execute the default &lt;code&gt;karma-conf.js&lt;/code&gt; (or &lt;code&gt;karma-conf.coffee&lt;/code&gt;). First we need a test to run. In &lt;code&gt;./source-and-tests/&lt;/code&gt; I created &lt;code&gt;array-tests.js&lt;/code&gt; which just contains the &lt;a href=&quot;http://mochajs.org/#synchronous-code&quot;&gt;first example&lt;/a&gt; from Mocha’s documentation.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;describe('Array', function(){
  describe('#indexOf()', function(){
    it('should return -1 when the value is not present', function(){
      assert.equal(-1, [1,2,3].indexOf(5));
      assert.equal(-1, [1,2,3].indexOf(0));
    })
  })
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Running &lt;code&gt;karma start&lt;/code&gt; should find and run this test, then watch for changes to the watched files and repeating.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/cwTVVjT.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;adding-angularjs-to-the-mix&quot;&gt;Adding AngularJS to the mix&lt;/h2&gt;

&lt;p&gt;I’ll use Bower to install AngularJS.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install --save-dev bower 
npm install -g bower
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This installs Bower to &lt;code&gt;./node_modules/bower&lt;/code&gt;, then installs it globally. Now we need to create a configuration file for Bower:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;bower init
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can just &lt;kbd&gt;enter&lt;/kbd&gt; through the configuration, accepting all the defaults. This creates a &lt;code&gt;bower.json&lt;/code&gt; file, which will save the dependencies added by Bower. Now use Bower to install AngularJS and angular-mocks:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;bower install --save angular
bower install --save angular-mocks
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This installs AngularJS to &lt;code&gt;./bower_components/angular&lt;/code&gt; and angular-mocks to &lt;code&gt;./bower_components/angular-mocks&lt;/code&gt;. The angular-mocks package gives us methods to resolve our application’s components and create mocks of AngularJS services.&lt;/p&gt;

&lt;p&gt;I’m not going through how to integrate AngularJS an actual website as there are a number of techniques ranging from ASP.NET MVC bundling and minification to more advanced build chains such as Gulp or Grunt. Instead I’ll just show how to include AngularJS in the test suite, create a simple controller, and write a test against a property exposed by the controller.&lt;/p&gt;

&lt;p&gt;To include AngularJS and angular-mocks in Karma’s test run, edit the &lt;code&gt;files&lt;/code&gt; config setting in &lt;code&gt;karma.conf.js&lt;/code&gt;. Any future dependencies for the codebase and tests will need to be added here too, unless they are imported in some other way.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;files: [
	'bower_components/angular/angular.js',
	'bower_components/angular-mocks/angular-mocks.js',
	'source-and-tests/**/*.js'
],
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The controller to test is very simple at this stage (&lt;code&gt;MyController.js&lt;/code&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(function(){
	angular.module('my-module', []);

	angular
		.module('my-module')
		.controller('MyController', [
			function(){
				var self = this;

				self.firstName = '';
				self.lastName = '';

				self.getFullName = function(){
					return self.firstName + ' ' + self.lastName;
				};

				return self;
			}
	]);
})();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This creates a module called &lt;code&gt;my-module&lt;/code&gt; and creates a controller called &lt;code&gt;MyController&lt;/code&gt; that exposes &lt;code&gt;firstName&lt;/code&gt;, &lt;code&gt;lastName&lt;/code&gt; and &lt;code&gt;getFullName()&lt;/code&gt;. I want to test the result of &lt;code&gt;getFullName()&lt;/code&gt; (&lt;code&gt;MyControllerTests.js&lt;/code&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;describe('MyController', function(){
	beforeEach(module('my-module'));

	describe('getFullName()', function(){
		it('should handle names correctly', inject(function($controller){
			var myController = $controller('MyController');

			myController.firstName = 'George';
			myController.lastName = 'Harrison';

			myController.getFullName().should.equal('George Harrison');
		}));
	});
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This does some interesting things.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;beforeEach(module('my-module'));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This loads the &lt;code&gt;my-module&lt;/code&gt; module before each test in the &lt;code&gt;MyController&lt;/code&gt; suite.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;it('should handle names correctly', inject(function($controller){
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This injects &lt;code&gt;$controller&lt;/code&gt; into the test. &lt;code&gt;$controller&lt;/code&gt; allows resolving registered controllers.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var myController = $controller('MyController');
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This resolves an instance of the &lt;code&gt;MyController&lt;/code&gt; controller. The instance is then used as the test subject.&lt;/p&gt;

&lt;h2 id=&quot;scope-injection&quot;&gt;$scope injection&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;$scope&lt;/code&gt; that gets injected in to an Angular controller is just a JS object. I’ll assign a value and a method to &lt;code&gt;$scope&lt;/code&gt; for another test. The controller declaration changes to this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;angular
	.module('my-module')
	.controller('MyController', [
		'$scope',
		function($scope){
			var self = this;

			// ...

			$scope.songs = [
				'Here Comes The Sun'
			];

			$scope.addSong = function(song) {
				$scope.songs.push(song);
			};

			return self;
		}
]);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The existing test can just pass in an empty object to the controller resolution:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var myController = $controller('MyController', {
	$scope: {}
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now the new test can inject, use and inspect a mock scope:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;describe('addSong()', function(){
	it('should add songs', inject(function($controller) {
		var scope = {};
		var myController = $controller('MyController', {
			$scope: scope
		});

		scope.addSong('While My Guitar Gently Weeps');

		scope.songs.should.contain('While My Guitar Gently Weeps');
	}));
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;injecting-and-mocking-http&quot;&gt;Injecting and mocking $http&lt;/h2&gt;

&lt;p&gt;So now I’ve got a web service that I call to populate something on &lt;code&gt;$scope&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;angular
	.module('my-module')
	.controller('MyController', [
		'$scope', '$http',
		function($scope, $http){
			var self = this;

			// ...

			$scope.instruments = ['foo'];

			$http.get('api/get-instruments')
				.success(function(data) {
					$scope.instruments = data;
				});

			return self;
		}
]);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;a href=&quot;https://docs.angularjs.org/api/ngMock/service/$httpBackend&quot;&gt;&lt;code&gt;$httpBackend&lt;/code&gt;&lt;/a&gt; is an &lt;code&gt;angular-mocks&lt;/code&gt; service that fakes the &lt;code&gt;$http&lt;/code&gt; service:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;describe('get-instruments result', function(){
	it('should be added to scope', inject(function($controller, $httpBackend){
		var scope = {};
		$httpBackend
			.when('GET', 'api/get-instruments')
			.respond([
				'vocals', 'guitar', 'sitar'
			]);
		var myController = $controller('MyController', {
			$scope: scope
		});

		$httpBackend.flush();

		scope.instruments.should.contain('guitar');
	}));
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;$httpBackend.flush()&lt;/code&gt; simulates the async calls completing, so they can be tested synchronously.&lt;/p&gt;

&lt;h2 id=&quot;simulating-http-errors&quot;&gt;Simulating $http errors&lt;/h2&gt;

&lt;p&gt;If the call to &lt;code&gt;api/get-instruments&lt;/code&gt; fails, I want to set a status to ‘ERROR’:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$scope.instruments = ['foo'];
$scope.status = '';

$http.get('api/get-instruments')
	.success(function(data) {
		$scope.instruments = data;
	})
	.error(function(e) {
		$scope.status = 'ERROR';
	});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To simulate the error, you can just tell the &lt;code&gt;$httpBackend&lt;/code&gt; to respond with an error code (500):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;describe('get-instruments with error', function(){
	it('should have a status with error', inject(function($controller, $httpBackend){
		var scope = {};
		$httpBackend
			.when('GET', 'api/get-instruments')
			.respond(500, '');
		var myController = $controller('MyController', {
			$scope: scope
		});

		$httpBackend.flush();

		scope.status.should.equal('ERROR');
	}));
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;here-is-a-cat-doing-some-tdd&quot;&gt;Here is a cat doing some TDD&lt;/h2&gt;

&lt;p&gt;Please imagine that this cat is really stoked about now being able to test front-end JavaScript.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://bendetat.com/images/tdd-cat.jpg&quot; alt=&quot;Source: http://www.aaamovies.com/Pictures%5CTestCatProfilePicture.jpg&quot; /&gt;&lt;/p&gt;

</description>
				<pubDate>Sat, 21 Feb 2015 00:00:00 +1000</pubDate>
				<link>http://bendetat.com/karma-and-mocha-for-angular-testing.html</link>
				<guid isPermaLink="true">http://bendetat.com/karma-and-mocha-for-angular-testing.html</guid>
			</item>
		
			<item>
				<author>Ben Scott - ben.scott@readify.net</author>
				<title>Cleaning and simplifying the Gulp pipeline</title>
				<description>&lt;p&gt;&lt;strong&gt;DISCLAIMER:&lt;/strong&gt; I’m learning in the open here. This is the first time I’ve used Gulp and Bower and I’m sure I’m missing a heap of really important stuff. Enjoy!&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Part 1: &lt;a href=&quot;http://bendetat.com/hello-world-its-gulp.html&quot;&gt;Hello World! It’s Gulp!&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Part 2: &lt;a href=&quot;http://bendetat.com/a-useful-build-pipeline-using-gulp-and-bower.html&quot;&gt;A useful build pipeline using Gulp and Bower&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Part 3: Cleaning and simplifying the Gulp pipeline&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I wasn’t entirely happy with how the &lt;a href=&quot;https://github.com/bendetat/nancy-gulp-bower-angular-learnings/blob/8a723f7f95880974b15cbe054891a3db7e32e336/gulpfile.js&quot;&gt;previous build script&lt;/a&gt; wrote out the minified JS and CSS files next to &lt;code&gt;index.html&lt;/code&gt;, or how the vendor files had to be specified in the configuration, so I did some playing with the &lt;code&gt;gulp-useref&lt;/code&gt; plugin and cleaned things up significantly.&lt;/p&gt;

&lt;p&gt;I installed two new dependencies.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.npmjs.com/package/gulp-useref&quot;&gt;&lt;code&gt;gulp-usered&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install --save-dev gulp-useref
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;Parse build blocks in HTML files to replace references to non-optimized scripts or stylesheets.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;https://www.npmjs.com/package/gulp-if&quot;&gt;&lt;code&gt;gulp-if&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install --save-dev gulp-if
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;Conditionally run a task&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I moved all the dependencies into &lt;code&gt;$&lt;/code&gt;, deleted the dependencies I wouldn’t need any more and added &lt;code&gt;useref&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var $ = {
	if: require('gulp-if'),
	notify: require('gulp-notify'),
	rev: require('gulp-rev'),
	revReplace: require('gulp-rev-replace'),
	useref: require('gulp-useref'),
	filter: require('gulp-filter'),
	uglify: require('gulp-uglify'),
	minifyCss: require('gulp-minify-css'),
	del: require('del'),
	path: require('path'),
	connect: require('connect'),
	serveStatic: require('serve-static'),
	log: require('gulp-load-plugins')()
		.loadUtils(['log'])
		.log
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then I deleted the &lt;code&gt;rev-and-inject&lt;/code&gt; task plus all of the CSS and JS tasks, and replaced the &lt;code&gt;build&lt;/code&gt; task with this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gulp.task('build', ['fonts', 'images'], function() {
	var cssFilter = $.filter('**/*.css');
	var jsFilter = $.filter('**/*.js');
	var assets = $.useref.assets();

	return gulp
		.src($.path.join(config.paths.client, '*.html'))
		.pipe(assets)
		.pipe($.if('*.js', $.uglify()))
		.pipe($.if('*.css', $.minifyCss()))
		.pipe($.rev())
		.pipe(assets.restore())
		.pipe($.useref())
		.pipe($.revReplace())
		.pipe(gulp.dest(config.paths.destination))

		.pipe($.notify({
			onLast: true,
			message: 'Build complete'
		}))
		;
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;$useref.assets()&lt;/code&gt; scans the &lt;code&gt;.html&lt;/code&gt; files for JS and CSS references. The &lt;code&gt;gulp-if&lt;/code&gt; plugin lets you do basic logic, this replaces the &lt;code&gt;gulp-filter&lt;/code&gt; plugin to perform conditional minification. &lt;code&gt;rev&lt;/code&gt; and &lt;code&gt;revReplace&lt;/code&gt; do the same cache busting as before.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;index.html&lt;/code&gt; now contains the relative references to the JS and CSS files. CSS is in the header:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;head&amp;gt;
    &amp;lt;!-- build:css content/site.min.css --&amp;gt;
    &amp;lt;link href=&quot;../../bower_components/bootstrap/dist/css/bootstrap.css&quot; rel=&quot;stylesheet&quot;&amp;gt;
    &amp;lt;link href=&quot;../../bower_components/bootstrap/dist/css/bootstrap-theme.css&quot; rel=&quot;stylesheet&quot;&amp;gt;
    &amp;lt;link href=&quot;content/css/site.css&quot;/&amp;gt;
    &amp;lt;!-- endbuild --&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;JS at the end of the body:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	&amp;lt;!-- build:js content/site.min.js --&amp;gt;
	&amp;lt;script type=&quot;text/javascript&quot; src=&quot;../../bower_components/jquery/dist/jquery.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
	&amp;lt;script type=&quot;text/javascript&quot; src=&quot;../../bower_components/bootstrap/dist/bootstrap.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
	&amp;lt;script type=&quot;text/javascript&quot; src=&quot;content/script/site.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
	&amp;lt;!-- endbuild --&amp;gt;
&amp;lt;/body&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The output path is specified in the &lt;code&gt;build:css&lt;/code&gt; / &lt;code&gt;build.js&lt;/code&gt; placeholder. Another benefit of this approach is that the development &lt;code&gt;index.html&lt;/code&gt; is actually usable as is - those &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; will resolve to the un-mangled originals.&lt;/p&gt;

&lt;h2 id=&quot;file-watching&quot;&gt;File watching&lt;/h2&gt;

&lt;p&gt;In the &lt;code&gt;serve&lt;/code&gt; task (which sets up a static web server hosting the built site) I used &lt;code&gt;gulp.watch&lt;/code&gt; to listen for changes in the source folder and trigger a build:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;return gulp.watch(config.paths.client + '/**', ['build']);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now if a file changes, the files get rebuilt in the same process as the server. Because that server is just serving the entire source path any changes are available instantly.&lt;/p&gt;

&lt;p&gt;Here is the &lt;a href=&quot;https://github.com/bendetat/nancy-gulp-bower-angular-learnings/blob/bfdcced8a1d664d0a933db64c255bfb7268913a0/gulpfile.js&quot;&gt;&lt;code&gt;gulpfile.js&lt;/code&gt; as at this post&lt;/a&gt;. Next I’ll get some AngularJS happening.&lt;/p&gt;

&lt;h2 id=&quot;further-reading-and-resources&quot;&gt;Further reading and resources&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/johnpapa/ng-demos/blob/master/grunt-gulp/build-gulp/gulpfile.js&quot;&gt;https://github.com/johnpapa/ng-demos/blob/master/grunt-gulp/build-gulp/gulpfile.js&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/gertjvr/ng-template&quot;&gt;https://github.com/gertjvr/ng-template&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://gulpjs.com/&quot;&gt;http://gulpjs.com/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://nodejs.org/api/&quot;&gt;http://nodejs.org/api/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/bendetat/nancy-gulp-bower-angular-learnings/blob/bfdcced8a1d664d0a933db64c255bfb7268913a0/gulpfile.js&quot;&gt;&lt;code&gt;gulpfile.js&lt;/code&gt; as of this post&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
				<pubDate>Fri, 30 Jan 2015 00:00:00 +1000</pubDate>
				<link>http://bendetat.com/cleaning-and-simplifying-the-gulp-pipeline.html</link>
				<guid isPermaLink="true">http://bendetat.com/cleaning-and-simplifying-the-gulp-pipeline.html</guid>
			</item>
		
			<item>
				<author>Ben Scott - ben.scott@readify.net</author>
				<title>A useful build pipeline using Gulp and Bower</title>
				<description>&lt;p&gt;&lt;strong&gt;DISCLAIMER:&lt;/strong&gt; I’m learning in the open here. This is the first time I’ve used Gulp and Bower and I’m sure I’m missing a heap of really important stuff. Enjoy!&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Part 1: &lt;a href=&quot;http://bendetat.com/hello-world-its-gulp.html&quot;&gt;Hello World! It’s Gulp!&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Part 2: A useful build pipeline using Gulp and Bower&lt;/li&gt;
  &lt;li&gt;Part 3: &lt;a href=&quot;http://bendetat.com/cleaning-and-simplifying-the-gulp-pipeline.html&quot;&gt;Cleaning and simplifying the Gulp pipeline&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Big thanks to my colleague &lt;a href=&quot;http://blog.gertjvr.com/&quot;&gt;Gert JvR&lt;/a&gt; whose &lt;a href=&quot;https://github.com/gertjvr/ng-template&quot;&gt;ng-template&lt;/a&gt; project I am deconstructing.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/bendetat/nancy-gulp-bower-angular-learnings/blob/8a723f7f95880974b15cbe054891a3db7e32e336/gulpfile-unclean.js&quot;&gt;&lt;code&gt;gulpfile.js&lt;/code&gt; as of this post&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/bendetat/nancy-gulp-bower-angular-learnings/blob/8a723f7f95880974b15cbe054891a3db7e32e336/gulpfile.js&quot;&gt;cleaned &lt;code&gt;gulpfile.js&lt;/code&gt;&lt;/a&gt; which I will use from here on&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;have-you-any-bootstrap&quot;&gt;Have you any Bootstrap?&lt;/h2&gt;

&lt;p&gt;I want to use Bootstrap, but…&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://cdn.meme.am/instances/500x/58510881.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Bower is a JavaScript package manager. So is NPM, in fact we’ll use NPM to install Bower. The difference is that NPM is designed as a server-side (or developer-side) package manager, whereas Bower is only a front-end (client-side) package manager. NPM &lt;a href=&quot;http://browserify.org&quot;&gt;can be used for client-side package management&lt;/a&gt; but hopefully it will be easier to manage the two scenarios independently by using the package manager designed for the task.&lt;/p&gt;

&lt;p&gt;Install Bower to the project (and globally) using NPM:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install --save-dev -g bower
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now create &lt;code&gt;bower.json&lt;/code&gt; by running &lt;code&gt;bower init&lt;/code&gt; and following the instructions. Bower should not be ready to install Bootstrap:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;bower install bootstrap --save
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This installs all of Bootstrap (including the separate jQuery dependency) into &lt;code&gt;/bower_components&lt;/code&gt;. It also adds a reference to the dependency in &lt;code&gt;bower.json&lt;/code&gt; - if it doesn’t you may have forgotten the &lt;code&gt;--save&lt;/code&gt; argument.&lt;/p&gt;

&lt;p&gt;I then copied the &lt;a href=&quot;http://getbootstrap.com/getting-started/#template&quot;&gt;minimal Bootstrap HTML&lt;/a&gt; into &lt;code&gt;src/client/index.html&lt;/code&gt;. This won’t work because we’re not copying or linking in the CSS correctly.&lt;/p&gt;

&lt;h2 id=&quot;vendor-css&quot;&gt;Vendor CSS&lt;/h2&gt;

&lt;p&gt;There are two types of CSS - vendor and site-specific - and each will be handled slightly differently. Vendor CSS is anything that comes from a Bower package, and site-specific CSS will be anything in &lt;code&gt;/src/client/css&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I’ll start by adding a dependency task to the &lt;code&gt;rev-and-inject&lt;/code&gt; task:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gulp.task('rev-and-inject', ['vendorcss'], function() {
	// existing rev-and-inject task
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In my &lt;a href=&quot;hello-world-its-gulp.html&quot;&gt;last post&lt;/a&gt; I declared the &lt;code&gt;config&lt;/code&gt; object within &lt;code&gt;gulpfile.js&lt;/code&gt;. I immediately regret this decision and move it into its own file - &lt;code&gt;gulp-config.json&lt;/code&gt;. Now I need to explicitly add the CSS files that will be included in the site:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
	&quot;paths&quot;: {
		&quot;client&quot;: &quot;src/client/&quot;,
		&quot;server&quot;: &quot;src/server/&quot;,
		&quot;dist&quot;: &quot;src/client-dist&quot;,
		&quot;vendorcss&quot;: [
			&quot;bower_components/bootstrap/dist/css/bootstrap.css&quot;,
			&quot;bower_components/bootstrap/dist/css/bootstrap-theme.css&quot;
		]
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;config&lt;/code&gt; object is now initialised using &lt;code&gt;require()&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var config = require('./gulp-config.json');
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we get to install some more dependencies!&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.npmjs.com/package/gulp-concat&quot;&gt;&lt;code&gt;gulp-concat&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install --save-dev gulp-concat
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;Concatenates files&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Pull in the &lt;code&gt;concat&lt;/code&gt; dependency at the top of &lt;code&gt;gulpfile.js&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var concat = require('gulp-concat');
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now add the &lt;code&gt;vendorcss&lt;/code&gt; task:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gulp.task('vendorcss', function(){
return gulp
	// set source
	.src(config.paths.vendorcss)
	// write to vendor.min.css
	.pipe(concat('vendor.min.css'))
	// write to dest
	.pipe(gulp.dest(config.paths.destination));
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This takes all of the vendor CSS files specified in &lt;code&gt;gulp-config.json&lt;/code&gt; and bundles them into &lt;code&gt;/src/site-dist/vendor.min.css&lt;/code&gt;. Very exciting but it hasn’t minified the CSS yet. Time for some more plugins:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.npmjs.com/package/gulp-bytediff&quot;&gt;&lt;code&gt;gulp-bytediff&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install --save-dev gulp-bytediff
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;Compare file sizes before and after your gulp build process.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;bytediff&lt;/code&gt; is just used to output the file size reduction from minification.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.npmjs.com/package/gulp-minify-css&quot;&gt;&lt;code&gt;gulp-minify-css&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install --save-dev gulp-minify-css
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;Minify css with clean-css.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Add the &lt;code&gt;bytediff&lt;/code&gt; and &lt;code&gt;minify-css&lt;/code&gt; dependencies at the top of &lt;code&gt;gulpfile.js&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var bytediff = require('gulp-bytediff');
var minifyCss = require('gulp-minify-css');
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then add the minify and bytediff steps to the pipeline (in &lt;code&gt;gulp.task('vendorcss'..&lt;/code&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;return gulp
	// set source
	.src(config.paths.vendorcss)
	// write to vendor.min.css
	.pipe(concat('vendor.min.css'))

	// start tracking size
	.pipe(bytediff.start())
	// minify css
	.pipe(minifyCss())
	// stop tracking size and output it using bytediffFormatter
	.pipe(bytediff.stop(bytediffFormatter))

	// write to dest
	.pipe(gulp.dest(config.paths.destination));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;bytediff.stop(bytediffFormatter)&lt;/code&gt; uses a new function to format the file size difference. This function needs to be added:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function bytediffFormatter(data) {
	var formatPercent = function(num, precision) {
		return (num * 100).toFixed(precision);
	};
    var difference = (data.savings &amp;gt; 0) ? ' smaller.' : ' larger.';
    
    return data.fileName + ' went from ' +
        (data.startSize / 1000).toFixed(2) + ' kB to ' + (data.endSize / 1000).toFixed(2) + ' kB' +
        ' and is ' + formatPercent(1 - data.percent, 2) + '%' + difference;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now when I run &lt;code&gt;gulp build&lt;/code&gt; the CSS is minified:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[09:10:18] Starting 'vendorcss'...
[gulp] [09:10:18] Compressing, bundling and copying vendor CSS
[09:10:18] vendor.min.css went from 164.02 kB to 135.50 kB and is 17.39% smaller.
[09:10:18] Finished 'vendorcss' after 298 ms
[09:10:18] Starting 'rev-and-inject'...
[09:10:18] Finished 'rev-and-inject' after 5.79 ms
[09:10:18] Starting 'build'...
[09:10:18] gulp-notify: [Gulp notification] Build complete
[09:10:18] Finished 'build' after 48 ms
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;index.html&lt;/code&gt; now needs a reference to the minified CSS file. It could be hard-coded to &lt;code&gt;vendor.min.css&lt;/code&gt; but that is subject to change if the build script changes. So we need to &lt;em&gt;inject&lt;/em&gt; the path to the &lt;code&gt;vendor.min.css&lt;/code&gt; artifact directly into &lt;code&gt;index.html&lt;/code&gt; as it is being written.&lt;/p&gt;

&lt;p&gt;Install yet another plugin:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.npmjs.com/package/gulp-inject&quot;&gt;&lt;code&gt;gulp-inject&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install --save-dev gulp-inject
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;A javascript, stylesheet and webcomponent injection plugin for Gulp, i.e. inject file references into your index.html&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Add the new &lt;code&gt;inject&lt;/code&gt; dependency to the top of &lt;code&gt;gulpfile.js&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var inject = require('gulp-inject');
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now in the &lt;code&gt;rev-and-inject&lt;/code&gt; task add a local method that wraps &lt;code&gt;inject()&lt;/code&gt; with some common options:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var localInject = function(pathGlob, name) {
	var options = {
		// Strip out the 'src/client-dist-app' part from the path to vendor.min.css
		ignorePaths = config.paths.destination,
		// Don't read file being injected, just get the path
		read: false,
		// add a prefix to the injected path
		addPrefix: config.paths.buildPrefix
	};
};
&lt;/code&gt;&lt;/pre&gt;

&lt;aside&gt;The `read: false` option is interesting, if it is set to true you can use a transform to [inject the contents](https://www.npmjs.com/package/gulp-inject/#injecting-files-contents) of the file into the output.&lt;/aside&gt;

&lt;p&gt;There is a new &lt;code&gt;buildPrefix&lt;/code&gt; value in the config that needs to be added to &lt;code&gt;gulp-config.json&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
	&quot;paths&quot;: {
		// ...
		&quot;buildPrefix&quot;: &quot;app&quot;,
		// ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is needed because when the site will get hosted by Nancy, it will be available at &lt;code&gt;{yoursite}/app&lt;/code&gt;. So the injected path will be &lt;code&gt;/app/content/vendor.min.css&lt;/code&gt;. In a minute I’ll set up a static server using Node.js for testing the output.&lt;/p&gt;

&lt;p&gt;The inject step now needs to be added to the &lt;code&gt;rev-and-inject&lt;/code&gt; task pipeline:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gulp.task('rev-and-inject', ['vendorcss'], function() {
	var indexPath = path.join(config.paths.source, 'index.html');

	var localInject = //...

	return gulp
		.src([].concat(indexPath))

		// inject into inject-vendor:css
		.pipe(localInject(
			path.join(config.paths.destination, 'vendor.min.css'),
			'inject-vendor'))

		.pipe(gulp.dest(config.paths.distribution))
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now in &lt;code&gt;/src/client/index.html&lt;/code&gt; we just need to replace the link to &lt;code&gt;bootstrap.min.css&lt;/code&gt; to the &lt;code&gt;inject-vendor:css&lt;/code&gt; placeholder:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;title&amp;gt;Bootstrap 101 Template&amp;lt;/title&amp;gt;

&amp;lt;!-- inject-vendor:css --&amp;gt;
&amp;lt;!-- endinject --&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, running &lt;code&gt;gulp build&lt;/code&gt; should inject the correct path into &lt;code&gt;/src/client-dist/index.html&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!-- inject-vendor:css --&amp;gt;
&amp;lt;link rel=&quot;stylesheet&quot; href=&quot;/app/vendor.min.css&quot;&amp;gt;
&amp;lt;!-- endinject --&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;use-nodejs-to-serve-the-static-website&quot;&gt;Use Node.js to serve the static website&lt;/h3&gt;

&lt;p&gt;At the moment the output is going to &lt;code&gt;/src/client-dist&lt;/code&gt;. When the site is eventually hosted on Nancy it will be served from &lt;code&gt;/app&lt;/code&gt;, so the injected paths currently all start with &lt;code&gt;/app&lt;/code&gt;, which means that the build output can’t be viewed properly yet. I’m going to set up a quick, static server to publish the site. More dependencies!&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.npmjs.com/package/connect&quot;&gt;&lt;code&gt;connect&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install --save-dev connect
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;High performance middleware framework&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;https://www.npmjs.com/package/serve-static&quot;&gt;&lt;code&gt;serve-static&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install --save-dev serve-static
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;Serve static files&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Add the new dependencies at the top of &lt;code&gt;gulpfile.js&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var connect = require('connect');
var serveStatic = require('serve-static');
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now add a new task:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gulp.task('serve', function(){
	var sourcePath = path.join(__dirname, config.paths.destination);
	var port = 12857;
	var serveFromPath = '/' + config.paths.buildPrefix;

	log('Hosting ' + sourcePath + ' at http://localhost:' + port + serveFromPath);

	connect()
		.use(serveFromPath, serveStatic(sourcePath))
		.listen(port);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now running &lt;code&gt;gulp serve&lt;/code&gt; will serve the static content from &lt;a href=&quot;http://localhost:12857/app&quot;&gt;http://localhost:12857/app&lt;/a&gt;. I can leave that running in one console while rebuilding in another.&lt;/p&gt;

&lt;p&gt;Interestingly, this way of serving a static site could probably be used all the way through to production, as the interaction with the server is all done on the client side via REST calls.&lt;/p&gt;

&lt;h2 id=&quot;site-specific-css&quot;&gt;Site-specific CSS&lt;/h2&gt;

&lt;p&gt;In &lt;code&gt;gulpfile.js&lt;/code&gt; add a new &lt;code&gt;css&lt;/code&gt; task:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gulp.task('css', function() {
	return gulp
		// set source (src/**/*.css)
		.src([path.join(config.paths.client, '**/*.css')])
		// write to site.min.css
		.pipe(concat('site.min.css'))
		// start tracking size
		.pipe(bytediff.start())
		// minify the css
		.pipe(minifyCss())
		// stop tracking size and output it
		.pipe(bytediff.stop(bytediffFormatter))
		// write to dest/content
		.pipe(gulp.dest(config.paths.destination));
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is getting a bit familiar. Instead of using a set of explicit tasks from &lt;code&gt;gulp-config.json&lt;/code&gt; I’ve just assumed that anything named &lt;code&gt;*.css&lt;/code&gt; anywhere in the client should be injected into the static site distribution. The concatenated, minified output gets written to &lt;code&gt;/src/client-dist/content/site.min.css&lt;/code&gt;. Now in the &lt;code&gt;rev-and-inject&lt;/code&gt; task the &lt;code&gt;css&lt;/code&gt; task needs to be added to the prerequisites:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gulp.task('rev-and-inject', ['vendorcss', 'css'], function(){
	// ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And the path to the new &lt;code&gt;site.min.css&lt;/code&gt; needs to be injected (this goes after the &lt;code&gt;inject-vendor:css&lt;/code&gt; injection):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// inject into inject:css
.pipe(localInject(config.paths.destination))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that there is no name placeholder used. This will inject into the default &lt;code&gt;inject:css&lt;/code&gt; placeholder, which needs to be added to &lt;code&gt;index.html&lt;/code&gt; after the existing &lt;code&gt;inject-vendor:css&lt;/code&gt; placeholder:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!-- inject:css --&amp;gt;
&amp;lt;!-- endinject --&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now if you add some CSS files to &lt;code&gt;/src/client&lt;/code&gt; they will be injected into &lt;code&gt;index.html&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;vendor-javascript&quot;&gt;Vendor JavaScript&lt;/h2&gt;

&lt;p&gt;One more dependency:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.npmjs.com/package/gulp-uglify&quot;&gt;&lt;code&gt;gulp-uglify&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install --save-dev gulp-uglify
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;Minify files with UglifyJS.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Vendor JS is configured the same way vendor CSS is, in &lt;code&gt;gulp-config.json&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	&quot;vendorcss&quot;: [
		// ...
	],
	&quot;vendorjs&quot;: [
		&quot;bower_components/jquery/dist/jquery.js&quot;,
		&quot;bower_components/bootstrap/dist/bootstrap.js&quot;
	]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;uglify&lt;/code&gt; is used instead of &lt;code&gt;minifyCss&lt;/code&gt;. Add the dependency at the top of &lt;code&gt;gulpfile.js&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var uglify = require('gulp-uglify');
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now create the &lt;code&gt;vendorjs&lt;/code&gt; task:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gulp.task('vendorjs', function(){
	return gulp
		// set source
		.src(config.paths.vendorjs)
		// write to vendor.min.js
		.pipe(concat('vendor.min.js'))
		// start tracking size
		.pipe(bytediff.start())
		// uglify js
		.pipe(uglify())
		// stop tracking size and output it using bytediffFormatter
		.pipe(bytediff.stop(bytediffFormatter))
 
		// write to dest
		.pipe(gulp.dest(config.paths.destination));
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In &lt;code&gt;rev-and-inject&lt;/code&gt;, the &lt;code&gt;vendorcss&lt;/code&gt; prerequisite task needs to be added:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gulp.task('rev-and-inject', ['vendorcss', 'css', 'vendorjs'], function(){
	// ...	
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And the newly minified &lt;code&gt;content/script/vendor.min.js&lt;/code&gt; needs to be injected (after the &lt;code&gt;inject:css&lt;/code&gt; injection):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// inject into inject-vendor:js
.pipe(localInject(
	path.join(config.paths.destination, 'vendor.min.js'),
	'inject-vendor'))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now the &lt;code&gt;inject-vendor:css&lt;/code&gt; placeholder needs to be added to &lt;code&gt;index.html&lt;/code&gt; at the end of the &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; element:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!-- inject-vendor:css --&amp;gt;
&amp;lt;!-- endinject --&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;site-specific-javascript&quot;&gt;Site-specific JavaScript&lt;/h2&gt;

&lt;p&gt;To support AngularJS, the site-specific JS task will need a couple of extra steps, but I’ll leave that for the next post. Meanwhile, it will be similar to the site-specific CSS task, bundling and minifying all &lt;code&gt;*.js&lt;/code&gt; files in &lt;code&gt;/src/client&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gulp.task('js', function() {
	return gulp
		// set source (src/**/*.js)
		.src([path.join(config.paths.client, '**/*.js')])
		// write to site.min.js
		.pipe(concat('site.min.js'))
		// start tracking size
		.pipe(bytediff.start())
		// uglify js
		.pipe(uglify())
		// stop tracking size and output it using bytediffFormatter
		.pipe(bytediff.stop(bytediffFormatter))
 
		// write to dest
		.pipe(gulp.dest(config.paths.destination));
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In &lt;code&gt;rev-and-inject&lt;/code&gt;, the &lt;code&gt;js&lt;/code&gt; prerequisite task needs to be added:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gulp.task('rev-and-inject', ['vendorcss', 'css', 'vendorjs'], function(){
	// ...	
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And &lt;code&gt;content/script/site.min.js&lt;/code&gt; needs to be injected (after the &lt;code&gt;inject-vendor:js&lt;/code&gt; injection):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// inject into inject:js
.pipe(localInject(
	path.join(config.paths.destination, 'site.min.js')))
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;fonts-and-images&quot;&gt;Fonts and images&lt;/h2&gt;

&lt;p&gt;Site assets that aren’t CSS or JS need to be processed as well. Fonts are pretty straightforward, I’ll just copy everything in &lt;code&gt;content/fonts&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gulp.task('fonts', function(){
	log('Copy fonts');

	return gulp
		.src([path.join(config.paths.client, 'content/fonts/*')])
		.pipe(gulp.dest(path.join(config.paths.destination, 'content/fonts')));
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Since this can be done outside of the &lt;code&gt;rev-and-inject&lt;/code&gt; process, it gets added to the &lt;code&gt;build&lt;/code&gt; task:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gulp.task('build', ['rev-and-inject', 'fonts'], function() {
	// ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Images could be a straight copy as well, or you can pass them through an image optimization plugin. Install two more dependencies:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.npmjs.com/package/gulp-cache&quot;&gt;&lt;code&gt;gulp-cache&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install --save-dev gulp-cache
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;A cache proxy task for Gulp&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;https://www.npmjs.com/package/gulp-imagemin&quot;&gt;&lt;code&gt;gulp-imagemin&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install --save-dev gulp-imagemin
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;Minify PNG, JPEG, GIF and SVG images&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;imagemin&lt;/code&gt; is an image minifier. This performs some compression on PNG images:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gulp.task('images', function(){
	log('Compress, cache and copy images');

	return gulp
		.src([path.join(config.paths.client, 'content/images/*')])
		.pipe(cache(imagemin({
			optimizationLevel: 3
		})))
		.pipe(gulp.dest(path.join(config.paths.destination, 'content/images')));
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This task also gets added as a prerequisite to the &lt;code&gt;build&lt;/code&gt; task:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gulp.task('build', ['rev-and-inject', 'fonts', 'images'], function() {
	// ...
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;revisioning-and-cache-busting&quot;&gt;Revisioning and cache-busting&lt;/h2&gt;

&lt;p&gt;Revisioning is a way of cache-busting (forcing the browser to reload assets) by appending a hash to the filename. Since this hash is unique for a particular revision of the file (as it is a hash of the file’s contents) as long as the source file doesn’t change, the revisioned file name will stay the same and will reload from the browser’s cache. This uses the &lt;code&gt;gulp-rev&lt;/code&gt; and &lt;code&gt;gulp-rev-replace&lt;/code&gt; plugins:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.npmjs.com/package/gulp-rev&quot;&gt;&lt;code&gt;gulp-rev&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install --save-dev gulp-rev
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;Static asset revisioning by appending content hash to filenames: unicorn.css =&amp;gt; unicorn-098f6bcd.css&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;https://www.npmjs.com/package/gulp-rev-replace&quot;&gt;&lt;code&gt;gulp-rev-replace&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install --save-dev gulp-rev-replace
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;Rewrite occurences of filenames which have been renamed by gulp-rev&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Add the new dependencies to the top of &lt;code&gt;gulpfile.js&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var rev = require('gulp-rev');
var revReplace = require('gulp-rev-replace');
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now the &lt;code&gt;build&lt;/code&gt; task gets a bit of a rewrite:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var indexFilter = filter('index.html');
var cssFilter = filter(&quot;**/*.min.css&quot;);
var jsFilter = filter(&quot;**/*.min.js&quot;);
var manifestFilter = filter('rev-manifest.json');

return gulp
	// 1. set source (/src/client/)
	.src([].concat(
		path.join(config.paths.client, 'index.html'), 
		path.join(config.paths.destination, '*.min.css'),
		path.join(config.paths.destination, '*.min.js')))

	// 2. add the revision to the css files
	.pipe(cssFilter)
	.pipe(rev())
	.pipe(gulp.dest(config.paths.destination))
	.pipe(cssFilter.restore())

	// 3. add the revision to the js files
	.pipe(jsFilter)
	.pipe(rev())
	.pipe(gulp.dest(config.paths.destination))
	.pipe(jsFilter.restore())

	// 4. inject css and js
	.pipe(indexFilter)
	.pipe(localInject(path.join(config.paths.destination, 'vendor.min.css'), 'inject-vendor'))
	.pipe(localInject(path.join(config.paths.destination, 'site.min.css')))
	.pipe(localInject(path.join(config.paths.destination, 'vendor.min.js'), 'inject-vendor'))
	.pipe(localInject(path.join(config.paths.destination, 'site.min.js')))
	.pipe(gulp.dest(config.paths.destination))
	.pipe(indexFilter.restore())

	// 5. substitute in new revved filenames
	.pipe(revReplace())
	.pipe(gulp.dest(config.paths.destination));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I’ve numbered the stages of this pipeline. &lt;/p&gt;

&lt;p&gt;In step 1 we select &lt;code&gt;index.html&lt;/code&gt; and the &lt;code&gt;*.min.css&lt;/code&gt; and &lt;code&gt;*.min.js&lt;/code&gt; files.&lt;/p&gt;

&lt;p&gt;In step 2 we filter down to just the &lt;code&gt;*.min.css&lt;/code&gt; files, then apply the revisioning hash to the filenames (using &lt;code&gt;rev()&lt;/code&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// filter to *.min.css
.pipe(cssFilter)
// add the revision to the files
.pipe(rev())
// write the files
.pipe(gulp.dest(config.paths.destination))
// clear the filter
.pipe(cssFilter.restore())
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Step 3 is the same as step 2 except for &lt;code&gt;*.min.js&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In step 4 we filter down to just &lt;code&gt;index.html&lt;/code&gt; and do the existing CSS and JS injections.&lt;/p&gt;

&lt;p&gt;In step 5 we substitute the newly revisioned filenames into &lt;code&gt;index.html&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;and-finally&quot;&gt;And finally…&lt;/h2&gt;

&lt;p&gt;The end result looks like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/j3WY60e.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;index.html&lt;/code&gt; points to the concatenated, minified, and hashed files:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&quot;en&quot;&amp;gt;
	&amp;lt;head&amp;gt;
		&amp;lt;!-- inject-vendor:css --&amp;gt;
		&amp;lt;link rel=&quot;stylesheet&quot; href=&quot;/app/vendor.min-a491bda8.css&quot;&amp;gt;
		&amp;lt;!-- endinject --&amp;gt;

		&amp;lt;!-- inject:css --&amp;gt;
		&amp;lt;link rel=&quot;stylesheet&quot; href=&quot;/app/site.min-238af6ba.css&quot;&amp;gt;
		&amp;lt;!-- endinject --&amp;gt;
		&amp;lt;/head&amp;gt;
	&amp;lt;body&amp;gt;
		&amp;lt;h1&amp;gt;Hello, world!&amp;lt;/h1&amp;gt;

		&amp;lt;!-- inject-vendor:js --&amp;gt;
		&amp;lt;script src=&quot;/app/vendor.min-8e07c5e8.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
		&amp;lt;!-- endinject --&amp;gt;

		&amp;lt;!-- inject:js --&amp;gt;
		&amp;lt;script src=&quot;/app/site.min-5b54178e.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
		&amp;lt;!-- endinject --&amp;gt;
	&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I’m not entirely happy with this so &lt;a href=&quot;http://bendetat.com/cleaning-and-simplifying-the-gulp-pipeline.html&quot;&gt;next I’ll try to simplify things&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;further-reading-and-resources&quot;&gt;Further reading and resources&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/johnpapa/ng-demos/blob/master/grunt-gulp/build-gulp/gulpfile.js&quot;&gt;https://github.com/johnpapa/ng-demos/blob/master/grunt-gulp/build-gulp/gulpfile.js&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/gertjvr/ng-template&quot;&gt;https://github.com/gertjvr/ng-template&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://gulpjs.com/&quot;&gt;http://gulpjs.com/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://nodejs.org/api/&quot;&gt;http://nodejs.org/api/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/bendetat/nancy-gulp-bower-angular-learnings/blob/8a723f7f95880974b15cbe054891a3db7e32e336/gulpfile-unclean.js&quot;&gt;&lt;code&gt;gulpfile.js&lt;/code&gt; as of this post&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/bendetat/nancy-gulp-bower-angular-learnings/blob/8a723f7f95880974b15cbe054891a3db7e32e336/gulpfile.js&quot;&gt;cleaned &lt;code&gt;gulpfile.js&lt;/code&gt;&lt;/a&gt; which I will use from here on&lt;/li&gt;
&lt;/ul&gt;

</description>
				<pubDate>Fri, 30 Jan 2015 00:00:00 +1000</pubDate>
				<link>http://bendetat.com/a-useful-build-pipeline-using-gulp-and-bower.html</link>
				<guid isPermaLink="true">http://bendetat.com/a-useful-build-pipeline-using-gulp-and-bower.html</guid>
			</item>
		
			<item>
				<author>Ben Scott - ben.scott@readify.net</author>
				<title>Hello World! It's Gulp!</title>
				<description>&lt;p&gt;&lt;strong&gt;DISCLAIMER:&lt;/strong&gt; I’m learning in the open here. This is the first time I’ve used Gulp and I’m sure I’m missing a heap of really important stuff. Enjoy!&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Part 1: Hello World! It’s Gulp!&lt;/li&gt;
  &lt;li&gt;Part 2: &lt;a href=&quot;http://bendetat.com/a-useful-build-pipeline-using-gulp-and-bower.html&quot;&gt;A useful build pipeline using Gulp and Bower&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Part 3: &lt;a href=&quot;http://bendetat.com/cleaning-and-simplifying-the-gulp-pipeline.html&quot;&gt;Cleaning and simplifying the Gulp pipeline&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;http://gulpjs.org&quot;&gt;Gulp&lt;/a&gt; is a Node.js based build tool. It executes &lt;code&gt;gulpfile.js&lt;/code&gt; in the project root to set up a build pipeline, doing things like bundling, minification, and artifact copying.&lt;/p&gt;

&lt;p&gt;This is useful in a workflow where you have an essentially static website that uses a client-side framework such as AngularJS, backed onto a web service that exposes functionality via something like a REST API. Build tools like Gulp and JS packagement management tools such as &lt;a href=&quot;http://bower.io&quot;&gt;Bower&lt;/a&gt; can be used to manage these complex client-side sites.&lt;/p&gt;

&lt;p&gt;The static site that I’ll hopefully end up generating in the next post will be used with a &lt;a href=&quot;http://nancyfx.org&quot;&gt;Nancy&lt;/a&gt; website. The end result of this post is a Gulp build script that simply copies an &lt;code&gt;index.html&lt;/code&gt; file from &lt;code&gt;/src/client&lt;/code&gt; to &lt;code&gt;/src/client-dist&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;prerequisites&quot;&gt;Prerequisites&lt;/h2&gt;

&lt;p&gt;Install Node and NPM. The easiest way may be via &lt;a href=&quot;http://chocolatey.org&quot;&gt;Chocolatey&lt;/a&gt;, this does both:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cinst nodejs.install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After installation, you may need to add &lt;code&gt;C:\Program Files\nodejs&lt;/code&gt; to the system path and create a new folder in &lt;code&gt;C:\Users\ben_000\AppData\Roaming&lt;/code&gt; named &lt;code&gt;npm&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Get NPM to create a &lt;code&gt;package.json&lt;/code&gt; file in the project root by running &lt;code&gt;npm install&lt;/code&gt; and working through the wizard. Now install Gulp using NPM:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install --save-dev gulp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;--save-dev&lt;/code&gt; flag adds the dependencies to &lt;code&gt;package.json&lt;/code&gt;. This means that when you open the repository in a new environment you can just do &lt;code&gt;npm install&lt;/code&gt; to automatically install the project’s NPM dependencies. &lt;/p&gt;

&lt;p&gt;Note that Gulp itself should also be installed globally so you can use &lt;code&gt;gulp&lt;/code&gt; on the command line:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install -g gulp
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;helloworlding-gulp&quot;&gt;helloworlding Gulp&lt;/h2&gt;

&lt;p&gt;Create a file &lt;code&gt;gulpfile.js&lt;/code&gt; in the project root. Start out by importing the Gulp module:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var gulp = require('gulp');
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;gulp.task()&lt;/code&gt; defines a task that’s available from the command line.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gulp.task('hello', function() {
	console.log('Hello world!')
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you run &lt;code&gt;gulp hello&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;λ gulp hello
[10:22:08] Using gulpfile c:\source\angular-learnings\gulpfile.js
[10:22:08] Starting 'hello'...
Hello world!
[10:22:08] Finished 'hello' after 316 μs
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;gulp.task&lt;/code&gt; also lets you run prerequisite tasks:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gulp.task('hello', ['one', 'two', 'three'], function() {
	console.log('Hello world!')
});

gulp.task('one', function(){
	console.log('one');
});

gulp.task('two', function(){
	console.log('two');
});

gulp.task('three', function(){
	console.log('three');
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now &lt;code&gt;gulp hello&lt;/code&gt; does this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[10:24:49] Starting 'one'...
one
[10:24:49] Finished 'one' after 200 μs
[10:24:49] Starting 'two'...
two
[10:24:49] Finished 'two' after 151 μs
[10:24:49] Starting 'three'...
three
[10:24:49] Finished 'three' after 154 μs
[10:24:49] Starting 'hello'...
Hello world!
[10:24:49] Finished 'hello' after 135 μs
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now make you a build pipeline. Empty out &lt;code&gt;gulpfile.js&lt;/code&gt; and start again, partner.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://media.giphy.com/media/a1wyl0YQrCGm4/giphy.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;lots-of-scripting-just-to-copy-a-file&quot;&gt;Lots of scripting just to copy a file!&lt;/h2&gt;

&lt;p&gt;I’m just going to start out with a simple build pipeline that basically copies &lt;code&gt;index.html&lt;/code&gt; to the server.&lt;/p&gt;

&lt;p&gt;Install some more NPM packages. &lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.npmjs.com/package/gulp-load-plugins&quot;&gt;&lt;code&gt;gulp-load-plugins&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install --save-dev gulp-load-plugins
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;Loads in any gulp plugins and attaches them to the global scope, or an object of your choice.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Eg.:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var gutil = require('gulp-load-plugins')([
	'colors', 'env', 'log', 'pipeline'
]);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&quot;https://www.npmjs.com/package/gulp-notify&quot;&gt;&lt;code&gt;gulp-notify&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install --save-dev gulp-notify
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;gulp plugin to send messages based on Vinyl Files or Errors to Mac OS X, Linux or Windows using the node-notifier module. Fallbacks to Growl or simply logging&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;https://www.npmjs.com/package/gulp-filter&quot;&gt;&lt;code&gt;gulp-filter&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install --save-dev gulp-filter
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&quot;https://www.npmjs.com/package/chalk&quot;&gt;&lt;code&gt;chalk&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install --save-dev chalk
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;Terminal string styling done right&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;https://www.npmjs.com/package/dateformat&quot;&gt;&lt;code&gt;dateformat&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install --save-dev dateformat
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;A node.js package for Steven Levithan’s excellent dateFormat() function.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;https://www.npmjs.com/package/del&quot;&gt;&lt;code&gt;del&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install --save-dev del
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;Delete files/folders using globs&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Whew, that’s a bunch of dependencies. At the top of &lt;code&gt;gulpfile.js&lt;/code&gt;, pull them in using &lt;code&gt;require()&lt;/code&gt; and get some utility dependencies into scope:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var gulp = require('gulp');
var notify = require('gulp-notify');
var filter = require('gulp-filter');
var plugins = require('gulp-load-plugins')();
var del = require('del');
var path = require('path');

var gutil = plugins.loadUtils([
	'colors', 'log'
]);

var log = gutil.log;
var colors = gutil.colors;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To centralise the build paths, add this next:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var config = {
	&quot;paths&quot;: {
		&quot;source&quot;: &quot;src/client&quot;,
		&quot;distribution&quot;: &quot;src/client-dist&quot;
	}
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This could be put into another file like &lt;code&gt;gulp-config.json&lt;/code&gt; and pulled in with a &lt;code&gt;require()&lt;/code&gt; but for now this will do.&lt;/p&gt;

&lt;p&gt;I’ll split out the actual copy process into a gulp task called &lt;code&gt;rev-and-inject&lt;/code&gt;. This will eventually be more involved including adding a revision number for cache busting and injecting minified and bundled resources.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gulp.task('rev-and-inject', function() {
	var indexPath = path.join(config.paths.source, 'index.html');

	return gulp
		// set source
		.src([].concat(indexPath))
		// write to dest
		.pipe(gulp.dest(config.paths.distribution))
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;build&lt;/code&gt; task calls &lt;code&gt;rev--and-inject&lt;/code&gt; before displaying a notification (using a toast!):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gulp.task('build', function(){
	return gulp
		.src('')
		.pipe(notify({
			onLast: true,
			message: 'Build complete'
	}));
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In &lt;code&gt;src/client&lt;/code&gt; I’ve added an &lt;code&gt;index.html&lt;/code&gt; just for testing. Run &lt;code&gt;gulp build&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[15:05:05] Starting 'rev-and-inject'...
[15:05:05] Finished 'rev-and-inject' after 24 ms
[15:05:05] Starting 'build'...
[15:05:05] gulp-notify: [Gulp notification] Build complete
[15:05:05] Finished 'build' after 35 ms
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can add a quick &lt;code&gt;clean&lt;/code&gt; task too, which will delete the &lt;code&gt;src/client-dist&lt;/code&gt; folder:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gulp.task('clean', function(){
	log('Cleaning: ' + config.paths.distribution);

	del([].concat(config.paths.distribution));
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&quot;http://bendetat.com/a-useful-build-pipeline-using-gulp-and-bower.html&quot;&gt;Next I’ll add some value to the build pipeline&lt;/a&gt; by minifying and bundling JS and CSS, and injecting the results into &lt;code&gt;index.html&lt;/code&gt;. The result will be a static website set up for some AngularJS work.&lt;/p&gt;

&lt;h2 id=&quot;further-reading-and-resources&quot;&gt;Further reading and resources&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/johnpapa/ng-demos/blob/master/grunt-gulp/build-gulp/gulpfile.js&quot;&gt;https://github.com/johnpapa/ng-demos/blob/master/grunt-gulp/build-gulp/gulpfile.js&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/gertjvr/ng-template&quot;&gt;https://github.com/gertjvr/ng-template&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://gulpjs.com/&quot;&gt;http://gulpjs.com/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://nodejs.org/api/&quot;&gt;http://nodejs.org/api/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
				<pubDate>Tue, 27 Jan 2015 00:00:00 +1000</pubDate>
				<link>http://bendetat.com/hello-world-its-gulp.html</link>
				<guid isPermaLink="true">http://bendetat.com/hello-world-its-gulp.html</guid>
			</item>
		
	</channel>
</rss>