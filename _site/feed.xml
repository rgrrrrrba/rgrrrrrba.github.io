<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Ben d'Ã©tat - Ben Scott's blog</title>
		<description></description>		
		<link>http://bendetat.com</link>
		<atom:link href="http://bendetat.com/feed.xml" rel="self" type="application/rss+xml" />
		
			<item>
				<title>Set up TeamCity on an Azure virtual machine</title>
				<description>&lt;p&gt;&lt;strong&gt;DISCLAIMER:&lt;/strong&gt; I'm learning in the open here. I have barely used Azure and have only ever used already established TeamCity instances, so I'm really just messing around with two new things at the same time here. I'm sure I'm missing a heap of very important points.&lt;/p&gt;

&lt;h2&gt;Set up the VM&lt;/h2&gt;

&lt;h3&gt;Get started on Azure&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/AsSmaMo.png&quot; style=&quot;float:right&quot;/&gt; Setting up a new Azure account is pretty much as easy as hitting &lt;a href=&quot;http://windowsazure.com&quot;&gt;http://windowsazure.com&lt;/a&gt; and starting a free trial. You land in a sweet management console that is a lot easier to use than I expected, based on my experiences with Office 365 (early versions), OWA and SharePoint. &lt;a href=&quot;http://www.troyhunt.com/&quot;&gt;Troy Hunt&lt;/a&gt; recently released an awesome Azure demo video - &lt;a href=&quot;http://worldsgreatestazuredemo.com/&quot;&gt;http://worldsgreatestazuredemo.com/&lt;/a&gt; - which is a good introduction to Azure.&lt;/p&gt;

&lt;h3&gt;Create a new virtual machine&lt;/h3&gt;

&lt;p&gt;Select the VIRTUAL MACHINES tab and click NEW from the bottom menu. Select FROM GALLERY and pick 'Windows Server 2012 R2 Datacenter' (or whatever is most current). Hit next and give it a cool name. I just left the size at Small for now. Enter a username and password, which you will need to remote into the VM. Next through the rest of the pages and the VM will soon be provisioned:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/SzdGki7.png&quot; alt=&quot;http://i.imgur.com/SzdGki7.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Click that arrow to start managing the VM.&lt;/p&gt;

&lt;h3&gt;Open up the firewall&lt;/h3&gt;

&lt;p&gt;We'll want to open up port 80 for TeamCity. Select the ENDPOINTS tab and ADD a new one.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/nelGyMd.png&quot; alt=&quot;http://i.imgur.com/nelGyMd.png&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Note that you're ADDing an endpoint. The NEW button will start creating a new VM. It's like Microsoft wants you to keep adding more and more VMs.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Accept the first screen to add a stand-alone endpoints (load balancing sounds a little too technical for today although I'm sure it's a great idea). Pick HTTP from the NAME drop-down, which will automatically fill in the port number. Complete the screen.&lt;/p&gt;

&lt;p&gt;This opens port 80 on the &lt;em&gt;external&lt;/em&gt; firewall. The server's internal firewall will still need to be configured (below).&lt;/p&gt;

&lt;h3&gt;Attach a new disk&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/4Znf3hr.png&quot; style=&quot;float: left; padding-right: 1em;&quot;/&gt; The VM has two drives configured by default - C:, which contains the Windows installation, and D:, which is called temporary storage. They both sound a bit transient, so it is probably a good idea to attach a new disk, which can be managed separately and moved from machine to machine AFAIK.&lt;/p&gt;

&lt;p&gt;Attach a new disk by selecting the ATTACH option from the bottom menu. Select Empty Disk.  Accept the defaults, I gave it a size of 20 GB. I'm assuming it's easy to increase the size later. The disk will be attached and the status should return to running.&lt;/p&gt;

&lt;h3&gt;Remote in and start configuring the VM&lt;/h3&gt;

&lt;p&gt;Go to the DASHBOARD tab and select CONNECT from the bottom menu. This will download an .RDP file which will should open in Remote Desktop. Enter the username and password and you should get connected to the server's desktop.&lt;/p&gt;

&lt;h4&gt;IE Enhanced Security&lt;/h4&gt;

&lt;p&gt;Turn off IE Enhanced Security from the Server Manager, in the Local Server Tab. This will let you use Internet Explorer to download TeamCity (or to install Chrome to download TeamCity and lolcats).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/N5ouyt1.png&quot; alt=&quot;IE Enhanced Security&quot; /&gt;&lt;/p&gt;

&lt;h4&gt;Open port 80 in the firewall&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/376xLMi.png&quot; style=&quot;float:right&quot;/&gt; Open the Windows Firewall with Advanved Security MMC snap-in. Easiest way to find it is to search for &lt;code&gt;firewall&lt;/code&gt; from the start screen. Create a new inbound rule.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/MlQbntP.png&quot; alt=&quot;http://i.imgur.com/MlQbntP.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Select Port, specify local TCP port 80, Allow the connection, apply the rule to all profiles, and call the rule &lt;code&gt;TeamCity&lt;/code&gt; (so you can find it again ;-) ).&lt;/p&gt;

&lt;h4&gt;Format and assign the empty disk&lt;/h4&gt;

&lt;p&gt;The empty disk that we attached needs to be formatted and assigned to a drive letter in the server as well. You can think of attaching an empty disk as plugging in a new disk to any normal machine - the disk still needs be configured in the OS.&lt;/p&gt;

&lt;p&gt;In the Server Manager, select File and Storage Services, then Disks (under Volumes). The new disk should be online with a partition type of 'Unknown'. Right-click the disk and select New Volume...&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/vgarRGg.png&quot; alt=&quot;File and Storage Services - New Volume&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Next through everything and accept the defaults. It should be assigned to drive E:. I gave it a volume name of &lt;code&gt;bendetat-teamcity&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Just sit back for a moment and look at what we've achieved. We've got a new VM running the latest Windows Server OS, firewalls configured and remote desktop enabled. I haven't even taken out my credit card yet. Compare with the amount of work needed to boot up a new physical server in a network, or even provisioning a new VM in Hyper-V. Squeeeee? Indeed.&lt;/p&gt;&lt;/blockquote&gt;

&lt;h2&gt;Install TeamCity&lt;/h2&gt;

&lt;p&gt;I just downloaded the 'default free professional edition' of TeamCity from &lt;a href=&quot;http://www.jetbrains.com/teamcity/download/&quot;&gt;here&lt;/a&gt;. The version at the time of writing was 8.1.1.&lt;/p&gt;

&lt;p&gt;It downloads blazingly fast, I assume because the internet pipes are faster everywhere except here in Australia. Ahem.&lt;/p&gt;

&lt;p&gt;Start up the installer. Select &lt;code&gt;e:\TeamCity&lt;/code&gt; as the destination folder (or wherever the new disk was assigned). I also left the components as default, which installs a build agent and the server with Windows services. Change the TeamCity data directory to somewhere on the new disk - I used &lt;code&gt;e:\TeamCity-data&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;After installation the Build Agent properties configuration appears, I just left this as default. It knows what it was doing. Then the Server service Service Account selector sashays onto the screen. I left it as user account. The domain is the name of the machine, the username and password should be the same as used to RDP into the VM. Do the same for the TeamCity Agent service account. Next through and the services will start. After you finish the installation, TeamCity First Start should open in IE.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Note that at this point the TeamCity instance should actually be available &lt;strong&gt;to the public&lt;/strong&gt; at &lt;code&gt;&amp;lt;machine name&amp;gt;.cloudapp.net&lt;/code&gt;. Either turn off the firewall to configure it locally or &lt;em&gt;very quickly&lt;/em&gt; configure the administrator account before publicising the name of the server.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Start working through this wizard. I used the &lt;code&gt;Internal (HSQLDB)&lt;/code&gt; database type. I'll leave migrating to another database for later.&lt;/p&gt;

&lt;h2&gt;Fin&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/X1BGjuk.png&quot; alt=&quot;http://i.imgur.com/X1BGjuk.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Next I'll try adding a small OSS project to the TeamCity installation, with Github hooks and magic unicorns.&lt;/p&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.virtew.com/2012/08/18/setup-teamcity-on-an-azure-virtual-machine-for-windows-8-metro-style-apps/&quot;&gt;virtew - Setup TeamCity on an Azure Virtual Machine for Windows 8 Metro Style Apps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://worldsgreatestazuredemo.com/&quot;&gt;World's Greatest Azure Demo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
				<pubDate>Sun, 16 Mar 2014 00:00:00 +1000</pubDate>
				<link>http://bendetat.com/set-up-teamcity-on-an-azure-instance.html</link>
				<guid isPermaLink="true">http://bendetat.com/set-up-teamcity-on-an-azure-instance.html</guid>
			</item>
		
			<item>
				<title>Setting an image source using a trigger (WPF and Caliburn.Micro)</title>
				<description>&lt;p&gt;So all I'm doing here is creating a button that has a different images depending on the enum value that is bound to the control.&lt;/p&gt;

&lt;p&gt;The images used are linked as resources in a resource project - the build action is &lt;code&gt;Resource&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://snag.gy/o9v6X.jpg&quot; alt=&quot;Images are linked using a build action of Resource&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The button's view model (&lt;code&gt;ToggleMyEnumViewModel.cs&lt;/code&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class ToggleMyEnumViewModel : Screen
{
    MyEnum _myEnumProperty = MyEnum.Foo;

    public MyEnum MyEnumProperty
    {
        get { return _myEnumProperty; }
        set
        {
            _myEnumProperty = value;
            NotifyOfPropertyChange(() =&amp;gt; MyEnumProperty);
        }
    }

    public void ToggleMyThing()
    {
        MyEnumProperty = MyEnumProperty == MyEnum.Foo
            ? MyEnum.Bar
            : MyEnum.Foo;
    }
}

public enum MyEnum {
    Foo, Bar
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The button's XAML (&lt;code&gt;ToggleMyEnumView.xaml&lt;/code&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;Button x:Class=&quot;MyNamespace.ToggleMyEnumButton&quot;
             xmlns=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;
             xmlns:x=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;
             xmlns:mc=&quot;http://schemas.openxmlformats.org/markup-compatibility/2006&quot; 
             xmlns:d=&quot;http://schemas.microsoft.com/expression/blend/2008&quot;
             xmlns:local=&quot;clr-namespace:MyNamespace&quot;
             xmlns:i=&quot;http://schemas.microsoft.com/expression/2010/interactivity&quot;
             mc:Ignorable=&quot;d&quot; 
             Cursor=&quot;Hand&quot;
             Background=&quot;Transparent&quot;&amp;gt;
    &amp;lt;Image Stretch=&quot;Uniform&quot;&amp;gt;
        &amp;lt;Image.Resources&amp;gt;
            &amp;lt;Style x:Key=&quot;XButtonStyle&quot; TargetType=&quot;{x:Type Image}&quot;&amp;gt;
                &amp;lt;Style.Triggers&amp;gt;
                    &amp;lt;DataTrigger Binding=&quot;{Binding MyEnumProperty}&quot; Value=&quot;{x:Static local:MyEnum.Foo}&quot;&amp;gt;
                        &amp;lt;Setter Property=&quot;Image.Source&quot; Value=&quot;pack://application:,,,/MyProject.Assets;component/Images/foo.png&quot; /&amp;gt;
                    &amp;lt;/DataTrigger&amp;gt;
                    &amp;lt;DataTrigger Binding=&quot;{Binding MyEnumProperty}&quot; Value=&quot;{x:Static local:MyEnum.Bar}&quot;&amp;gt;
                        &amp;lt;Setter Property=&quot;Image.Source&quot; Value=&quot;pack://application:,,,/MyProject.Assets;component/Images/bar.png&quot; /&amp;gt;
                    &amp;lt;/DataTrigger&amp;gt;
                &amp;lt;/Style.Triggers&amp;gt;
            &amp;lt;/Style&amp;gt;
        &amp;lt;/Image.Resources&amp;gt;
    &amp;lt;/Image&amp;gt;

&amp;lt;i:Interaction.Triggers&amp;gt;
    &amp;lt;i:EventTrigger EventName=&quot;Click&quot;&amp;gt;
        &amp;lt;cal:ActionMessage MethodName=&quot;ToggleMyThing&quot;/&amp;gt;
    &amp;lt;/i:EventTrigger&amp;gt;
&amp;lt;/i:Interaction.Triggers&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;   &lt;/Button&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;&amp;lt;cal:ActionMessage MethodName=&quot;ToggleMyThing&quot;/&amp;gt;&lt;/code&gt; part is what binds the button click to the &lt;code&gt;ToggleMyThing&lt;/code&gt; method in the view model.&lt;/p&gt;

&lt;p&gt;Things to note in the view's XAML:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The style sits in the image's resources&lt;/li&gt;
&lt;li&gt;The target type of the style is set to the &lt;code&gt;Image&lt;/code&gt; type&lt;/li&gt;
&lt;li&gt;The trigger has to be a data trigger&lt;/li&gt;
&lt;li&gt;The trigger just sets the &lt;code&gt;Source&lt;/code&gt; property of the image based on the value of the &lt;code&gt;MyEnum&lt;/code&gt; property&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;This is then used as a content control bound to an instance of a &lt;code&gt;ToggleMyEnumViewModel&lt;/code&gt;. Consuming XAML:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;ContentControl x:Name=&quot;ToggleMyEnum&quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Consuming view model:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public ToggleMyEnumViewModel ToggleMyEnum { get; private set; }

public ConsumingViewModel()
{
    /// ...
    ToggleMyEnum = new ToggleMyEnumViewModel(); // or use an IOC factory
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This isn't exactly what I want, I would prefer to bind directly to a property on the consuming view model rather than indirectly with the &lt;code&gt;ToggleMyEnumViewModel&lt;/code&gt;.&lt;/p&gt;
</description>
				<pubDate>Wed, 29 Jan 2014 00:00:00 +1000</pubDate>
				<link>http://bendetat.com/setting-an-image-source-using-a-trigger-wpf.html</link>
				<guid isPermaLink="true">http://bendetat.com/setting-an-image-source-using-a-trigger-wpf.html</guid>
			</item>
		
			<item>
				<title>Git cherry-pick from another repository</title>
				<description>&lt;p&gt;Somehow.. somehow... I managed to overwrite a commit by force-pushing a branch that didn't include said commit.&lt;/p&gt;

&lt;p&gt;The commit was made in a local copy of the repository that I was working on in parallel with my normal working copy. So,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;c:\source\repo        &amp;lt;-- working copy
c:\source\repo-copy   &amp;lt;-- copy with the commit I need
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I didn't want to mess around with rebasing the &lt;code&gt;repo-copy&lt;/code&gt; to merge in the remote branch and totally muck everything up.&lt;/p&gt;

&lt;p&gt;The solution is to cherry pick the commit from the working copy. First add the local copy as a remote to the working copy:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;c:\source\repo&amp;gt; git remote add localcopy ../repo-copy
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This adds a remote called &lt;code&gt;localcopy&lt;/code&gt; which points to the local repo copy. Then, fetch from &lt;code&gt;localcopy&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;c:\source\repo&amp;gt; git fetch localcopy
remote: Counting objects: 500, done.                                                                                   
remote: Compressing objects: 100% (306/306), done.                                                                     
emote: Total 444 (delta 329), reused 149 (delta 132)                                                                   
Receiving objects: 100% (444/444), 58.53 KiB | 0 bytes/s, done.                                                        
Resolving deltas: 100% (329/329), completed with 35 local objects.                                                     
From ..\repo-copy\                                                                                                  
 * [new branch]      xxxx -&amp;gt; repo-copy/xxxx              
 ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;aside&amp;gt;&lt;/code&gt;What happened with  line 3 of the response? &lt;code&gt;emote&lt;/code&gt;? strange.&lt;code&gt;&amp;lt;/aside&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Then cherry-pick the appropriate commit:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;c:\source\repo-copy&amp;gt; git cherry-pick &amp;lt;commit-hash&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I had to resolve some conflicts but it all looks ok.&lt;/p&gt;
</description>
				<pubDate>Fri, 24 Jan 2014 00:00:00 +1000</pubDate>
				<link>http://bendetat.com/git-cherry-pick-from-another-repository.html</link>
				<guid isPermaLink="true">http://bendetat.com/git-cherry-pick-from-another-repository.html</guid>
			</item>
		
			<item>
				<title>Get running fast on GitHub and BitBucket</title>
				<description>&lt;h3&gt;GH4W&lt;/h3&gt;

&lt;p&gt;I use &lt;a href=&quot;http://windows.github.com/&quot;&gt;GitHub for Windows&lt;/a&gt; to get up and running quickly with GitHub on a new machine. Opening a Powershell instance from GH4W gives me a relatively nice msysgit setup. Then the &lt;code&gt;github_rsa.pub&lt;/code&gt; file in &lt;code&gt;C:\Users\**username**\.ssh&lt;/code&gt; can be used added to BitBucket to get that running with the same credentials.&lt;/p&gt;

&lt;h3&gt;Switch to Cmder&lt;/h3&gt;

&lt;p&gt;I just tried out &lt;a href=&quot;http://bliker.github.io/cmder/&quot;&gt;Cmder&lt;/a&gt; with great success as a Powershell replacement but the msysgit instance used in that doesn't work with the public key named &lt;code&gt;github_rsa.pub&lt;/code&gt;. I just copied &lt;code&gt;github_rsa.pub&lt;/code&gt; to &lt;code&gt;id_rsa.pub&lt;/code&gt; and &lt;code&gt;github_rsa&lt;/code&gt; to &lt;code&gt;id_rsa&lt;/code&gt;. Working well so far.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;update&lt;/strong&gt; hmm looks like this is a work in progress....&lt;/p&gt;

&lt;p&gt;Run this to configure git to push the current branch by default:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git config --global push.default current
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Also check this out: &lt;a href=&quot;https://help.github.com/articles/set-up-git&quot;&gt;https://help.github.com/articles/set-up-git&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Looks like password caching is an issue, but only with non-SSH remote urls. If &lt;code&gt;.git/config&lt;/code&gt; looks like this it shoud use the above keys:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[remote &quot;origin&quot;]
    url = git@github.com:rgrrrrrba/rgrrrrrba.github.io.git
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Merge tool&lt;/h3&gt;

&lt;p&gt;I also needed to set my merge tool. I use (and pay for) &lt;a href=&quot;http://www.scootersoftware.com/moreinfo.php&quot;&gt;Beyond Compare 3&lt;/a&gt; and the &lt;a href=&quot;http://www.scootersoftware.com/support.php?zz=kb_vcs&quot;&gt;instructions here&lt;/a&gt; were helpful. The commands to use are:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git config --global merge.tool bc3
git config --global mergetool.bc3.path &quot;C:/Program Files (x86)/Beyond Compare 3/BCompare.exe&quot;                 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice that you need to use forward-slashes in the path to BC. &lt;code&gt;~/.gitconfig&lt;/code&gt; should end up like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[merge]
    tool = bc3
[mergetool &quot;bc3&quot;]
    path = C:/Program Files (x86)/Beyond Compare 3/BCompare.exe
&lt;/code&gt;&lt;/pre&gt;
</description>
				<pubDate>Wed, 22 Jan 2014 00:00:00 +1000</pubDate>
				<link>http://bendetat.com/get-running-fast-on-github-and-bitbucket.html</link>
				<guid isPermaLink="true">http://bendetat.com/get-running-fast-on-github-and-bitbucket.html</guid>
			</item>
		
			<item>
				<title>Top/Bottom docking in XAML / WPF</title>
				<description>&lt;p&gt;You want a layout like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;^^ top content
^^ content that fills the control vv
bottom content (nav, actions,etc) vv
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;DockPanel&lt;/code&gt; is your friend but just setting &lt;code&gt;DockPanel.Dock&lt;/code&gt; on the top and bottom controls won't work. By default the last child control in the &lt;code&gt;DockPanel&lt;/code&gt; fills the panel:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;DockPanel&amp;gt;
    &amp;lt;Control DockPanel.Dock=&quot;Top&quot; x:Name=&quot;TopContentControl&quot; /&amp;gt;
    &amp;lt;Control DockPanel.Dock=&quot;Bottom&quot; x:Name=&quot;BottonNavControl&quot; /&amp;gt;
    &amp;lt;Control x:Name=&quot;FillControl&quot; /&amp;gt;
&amp;lt;/DockPanel&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you've just got content at the top and nav docked to the bottom, the top control can become the fill control. Just remember that is has to be the last control in the &lt;code&gt;DockPanel&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;DockPanel&amp;gt;
    &amp;lt;Control DockPanel.Dock=&quot;Bottom&quot; x:Name=&quot;BottomNavControl&quot; /&amp;gt;
    &amp;lt;Control x:Name=&quot;TopContentControl&quot; /&amp;gt;
&amp;lt;/DockPanel&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or if you want to keep the same control ordering and explicitly dock the top control to the top, the &quot;last child control in the &lt;code&gt;DockPanel&lt;/code&gt; filling the panel&quot; default can be turned off.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;DockPanel LastChildFill=&quot;False&quot;&amp;gt;
    &amp;lt;Control DockPanel.Dock=&quot;Top&quot; x:Name=&quot;TopContentControl&quot; /&amp;gt;
    &amp;lt;Control DockPanel.Dock=&quot;Bottom&quot; x:Name=&quot;BottomNavControl&quot; /&amp;gt;
&amp;lt;/DockPanel&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
				<pubDate>Fri, 10 Jan 2014 00:00:00 +1000</pubDate>
				<link>http://bendetat.com/top-bottom-docking-in-xaml-wpf.html</link>
				<guid isPermaLink="true">http://bendetat.com/top-bottom-docking-in-xaml-wpf.html</guid>
			</item>
		
			<item>
				<title>Set property System.Windows.ResourceDictionary.DeferrableContent threw an exception error in WPF</title>
				<description>&lt;p&gt;Ok so I'm working on a WPF launcher that loads a shell that loads a client. Three different appdomains. The launcher could load the shell. The shell could load the client. But when I tried to get the launcher to load the shell then the shell to load the client, I would get this lovely exception when the client instance was created:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Set property 'System.Windows.ResourceDictionary.DeferrableContent' threw an exception
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&quot;https://www.google.com.au/search?q=Set+property+'System.Windows.ResourceDictionary.DeferrableContent'+threw+an+exception.&amp;amp;oq=Set+property+'System.Windows.ResourceDictionary.DeferrableContent'+threw+an+exception.&amp;amp;aqs=chrome..69i57.519j0j4&amp;amp;sourceid=chrome&amp;amp;espv=210&amp;amp;es_sm=122&amp;amp;ie=UTF-8&quot;&gt;Googling the exception&lt;/a&gt; gave a lot of talk about duplicate values in the resource dictionaries, which I burned a pile of time on. Then I noticed that the exception had an inner exception which had an inner exception and so on, and the final exception was about a UI component being created in a non-UI thread (&lt;code&gt;InvalidOperationException&lt;/code&gt;, &quot;The calling thread must be STA, because many UI components require this.&quot;).&lt;/p&gt;

&lt;p&gt;Turned out I was doing this in the shell, to keep its UI responsive:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var launchCompletedResetEvent = new AutoResetEvent(false);
var worker = new BackgroundWorker();
worker.DoWork += (s,e) =&amp;gt; {
    ... // download and extract the client
};
worker.RunWorkerCompleted += (s,e) =&amp;gt; {
    ... // launch the client
    launchCompletedResetEvent.Set();
};
worker.RunWorkerAsync();
launchCompletedResetEvent.WaitOne();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;launchCompletedResetEvent&lt;/code&gt; mutex is so the shell didn't terminate before launching the client.&lt;/p&gt;

&lt;p&gt;This was launching the client in a non-UI thread. For some reason this seems to have worked when running the shell directly but not when running the shell through the launcher. Maybe when I ran the shell directly I was bypassing the download step and launching the client on the main thread. Actually that makes sense.&lt;/p&gt;

&lt;p&gt;I just had to move the client launch to after the &lt;code&gt;WaitOne&lt;/code&gt; to get everything working:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var launchCompletedResetEvent = new AutoResetEvent(false);
var worker = new BackgroundWorker();
worker.DoWork += (s,e) =&amp;gt; {
    ... // download and extract the client
};
worker.RunWorkerCompleted += (s,e) =&amp;gt; {
    launchCompletedResetEvent.Set();
};
worker.RunWorkerAsync();
launchCompletedResetEvent.WaitOne();
... // launch the client
&lt;/code&gt;&lt;/pre&gt;
</description>
				<pubDate>Fri, 20 Dec 2013 00:00:00 +1000</pubDate>
				<link>http://bendetat.com/set-property-system-windows-resourcedictionary-deferrablecontent-threw-an-exception-wpf.html</link>
				<guid isPermaLink="true">http://bendetat.com/set-property-system-windows-resourcedictionary-deferrablecontent-threw-an-exception-wpf.html</guid>
			</item>
		
			<item>
				<title>Starting out with convention tests and data-driven tests in xUnit</title>
				<description>&lt;p&gt;I'm really interested in convention tests, and as I want to get into xUnit I thought I would try taking some patterns that I've used in NUnit and applying them in xUnit.&lt;/p&gt;

&lt;p&gt;The test project I created while writing this post is &lt;a href=&quot;https://github.com/bendetat/convention-tests-in-xunit&quot;&gt;available on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;First steps&lt;/h2&gt;

&lt;p&gt;The first thing to notice is the xUnit has slightly different naming conventions compared to NUnit. This is a simple test in NUnit:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class ItShouldHaveTests
{
    [Test]
    public void AndItDoes()
    {
        Assert.True(true);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The equivalent in xUnit:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class ItShouldHaveTests
{
    [Fact]
    public void AndItDoes()
    {
        Assert.True(true);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So xUnit has &lt;code&gt;[Fact]&lt;/code&gt;s while NUnit has &lt;code&gt;[Test]&lt;/code&gt;s. Cool so far. Note that the class has to be public. In NUnit I would usually mark test fixtures with &lt;code&gt;[TestFixture]&lt;/code&gt; and the class usually ends up &lt;code&gt;internal&lt;/code&gt;, which Resharper's test runner will pick up. NUnit has been able to pick up public classes without the &lt;code&gt;[TestFixture]&lt;/code&gt; decoration for the past couple of years IIRC but I've had mixed success with Resharper's test runner. Sometimes I would spend valuable seconds wondering why tests weren't running and looking dumb, so I would automatically add the attribute. xUnit doesn't have a &lt;code&gt;[TestFixture]&lt;/code&gt; equivalent. It will just find all public classes that contain tests.&lt;/p&gt;

&lt;h2&gt;Comparisons with NUnit&lt;/h2&gt;

&lt;p&gt;The xUnit Wiki has a nice &lt;a href=&quot;http://xunit.codeplex.com/wikipage?title=Comparisons&quot;&gt;comparison page&lt;/a&gt; showing differences between NUnit, MSTest and itself.&lt;/p&gt;

&lt;p&gt;Apart from the obvious &lt;code&gt;[Fact]&lt;/code&gt; vs &lt;code&gt;[Test]&lt;/code&gt; and not needing &lt;code&gt;[TestFixture]&lt;/code&gt;, the big differences seem to be with how the two test frameworks handle fixture setup and teardown. NUnit uses &lt;code&gt;[SetUp]&lt;/code&gt; and &lt;code&gt;[TearDown]&lt;/code&gt; attributes to mark methods, while xUnit adds awesome to the mix by using the public constructor as the setup method. It just creates a new instance of the fixture class for each test. This completely obviates issues that have cropped up for me in NUnit around fixture state being shared between tests. Teardown is done by implementing &lt;code&gt;IDisposable&lt;/code&gt;, in the &lt;code&gt;Dispose&lt;/code&gt; method. I don't remember the last time I wrote a teardown method anyway, but using &lt;code&gt;IDisposable&lt;/code&gt; is a really nice and obvious convention. Shared fixture state can be implemented with the &lt;code&gt;IUseFixture&amp;lt;T&amp;gt;&lt;/code&gt; interface but I won't explore that here.&lt;/p&gt;

&lt;h2&gt;A data-driven test&lt;/h2&gt;

&lt;p&gt;I used NUnit's data-driven tests to TDD a simple Fibonacci number generator (my favourite integer sequence). The implementation of the generator is &lt;a href=&quot;https://github.com/bendetat/convention-tests-in-xunit/blob/master/src/MyApp.Shared/FibonacciGenerator.cs&quot;&gt;in the repo&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[Test]
[TestCase(0, 0)]
[TestCase(1, 1)]
[TestCase(2, 1)]
[TestCase(3, 2)]
[TestCase(4, 3)]
[TestCase(5, 5)]
[TestCase(6, 8)]
[TestCase(7, 13)]
[TestCase(8, 21)]
[TestCase(16, 987)]
public void TestNumber(int sequence, int result)
{
    Assert.AreEqual(result, FibonacciGenerator.For(sequence));
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;xUnit uses Theories for data driven tests, which sounds so cool. Interestingly, theories aren't part of xUnit out of the box. You need to install the &lt;code&gt;xunit.extensions&lt;/code&gt; package. Apart from the naming differences everything is pretty much the same.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[Theory]
[InlineData(0, 0)]
[InlineData(1, 1)]
[InlineData(2, 1)]
[InlineData(3, 2)]
[InlineData(4, 3)]
[InlineData(5, 5)]
[InlineData(6, 8)]
[InlineData(7, 13)]
[InlineData(8, 21)]
[InlineData(16, 987)]
public void TestNumber(int sequence, int result)
{
    Assert.Equal(result, FibonacciGenerator.For(sequence));
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;xUnit uses some reflection magic to show the name of the parameters in the test runner output, so while NUnit shows &lt;code&gt;TestNumber(7, 13)&lt;/code&gt;, xUnit shows &lt;code&gt;TestNumber(sequence: 7, result: 13)&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;Theory data sources&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;InlineData&lt;/code&gt; is only one of the data sources that xUnit provides. There doesn't seem to be much documentation around the source types, so I'm working from the &lt;a href=&quot;https://github.com/xunit/xunit/tree/master/test/test.xunit1/xunit.extensions/DataTheories/AcceptanceTests&quot;&gt;acceptance tests in the xUnit source&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;InlineData&lt;/h3&gt;

&lt;p&gt;As shown above, this is obviously on par with NUnit's &lt;code&gt;TestCase&lt;/code&gt;. It takes a &lt;code&gt;params&lt;/code&gt; array of objects and passes them into the test method.&lt;/p&gt;

&lt;h3&gt;ClassData&lt;/h3&gt;

&lt;p&gt;This uses a class as the source for the test data. The data source class implements &lt;code&gt;IEnumerable&amp;lt;object[]&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class FibonacciTestUsingClassData
{
    [Theory]
    [ClassData(typeof(FibonacciTestSource))]
    public void TestNumber(int sequence, int result)
    {
        Assert.Equal(result, FibonacciGenerator.For(sequence));
    }
}

class FibonacciTestSource : IEnumerable&amp;lt;object[]&amp;gt;
{
    public IEnumerator&amp;lt;object[]&amp;gt; GetEnumerator()
    {
        // ...
        yield return new object[] { 8, 21 };
        yield return new object[] { 16, 987 };
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The test data still has to be an array of &lt;code&gt;object&lt;/code&gt;, so I couldn't strongly type my test data. This is something I never liked about NUnit's data-driven tests, so it is disappointing that xUnit has the same limitation. However class data sources are obviously a great way of sharing test cases between fixtures.&lt;/p&gt;

&lt;h3&gt;ExcelData&lt;/h3&gt;

&lt;p&gt;This is pretty cool. The data source can be an Excel spreadsheet. This looks like a great way to manage lots of test cases outside of code. I coded up an example, but the JET engine isn't on 64-bit Windows so it didn't work. This dependence on JET is a problem IMO, one which has been around since Windows Vista made 64-bit relatively mainstream back in 2007.&lt;/p&gt;

&lt;p&gt;So I couldn't get to work, but I think this is how Excel driven tests would look:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[Theory]
[ExcelData(@&quot;MyApp.Tests\FibonacchiTestData.xlsx&quot;, &quot;select * from Data&quot;)]
public void TestNumber(int sequence, int result)
{
    Assert.Equal(result, FibonacciGenerator.For(sequence));
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;PropertyData&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;PropertyData&lt;/code&gt; is very similar to &lt;code&gt;ClassData&lt;/code&gt; but obviously on a property of the test class rather than a class of its own. This also looks closest to NUnit's &lt;code&gt;TestCaseSource&lt;/code&gt;, which references a method that returns &lt;code&gt;IEnumerable&amp;lt;TestCaseData&amp;gt;&lt;/code&gt;. xUnit doesn't have as much ceremony around the test data, although the enumerable still has return arrays of &lt;code&gt;object&lt;/code&gt;s.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public static IEnumerable&amp;lt;object[]&amp;gt; TestData
{
    get
    {
        // ...
        yield return new object[] { 8, 21 };
        yield return new object[] { 16, 987 };
    }
}

[Theory]
[PropertyData(&quot;TestData&quot;)]
public void TestNumber(int sequence, int result)
{
    Assert.Equal(result, FibonacciGenerator.For(sequence));
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;A simple convention test&lt;/h2&gt;

&lt;p&gt;So it looks like &lt;code&gt;PropertyData&lt;/code&gt; is the most appropriate for the simple convention test I'm going to put together.&lt;/p&gt;

&lt;p&gt;This is going to be really basic. The convention I'm testing is:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;All classes that implement &lt;code&gt;IDomainObject&lt;/code&gt; must have an empty constructor&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;This might be because those classes have to work with Entity Framework or nHibernate, or need to be deserialised in some way.&lt;/p&gt;

&lt;p&gt;So the first part is defining the data source:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public static IEnumerable&amp;lt;object[]&amp;gt; DomainObjectClasses
{
    get
    {
        // ... returns Types
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I like to think of this in terms of &quot;get all types that inherit from &lt;code&gt;IDomainObject&lt;/code&gt;&quot;. The &lt;code&gt;Type&lt;/code&gt; class has an &lt;code&gt;IsAssignableFrom(Type)&lt;/code&gt; method but for that to work I would have to invert the query, so something like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;from t in [types] where typeof(IDomainObject).IsAssignableFrom(t)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That doesn't read very naturally so I like to invert the method with an extension method, and add some generic love to the mix:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public static bool IsAssignableTo&amp;lt;T&amp;gt;(this Type fromType)
{
    return typeof(T).IsAssignableFrom(fromType);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt; Know what? This is included in Autofac. Loove Autofac.&lt;/p&gt;

&lt;p&gt;I also need to exclude abstract types from the query, so that abstract types can take a parameter in their constructor but concrete implementations have to provide a default constructor. This excludes the interface itself as well. There are a number of interesting methods and properties given by the &lt;code&gt;Type&lt;/code&gt; class.&lt;/p&gt;

&lt;p&gt;The complete data source is this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public static IEnumerable&amp;lt;object[]&amp;gt; DomainObjectClasses 
{
    get
    {
        return
            from type in typeof (IDomainObject).Assembly.GetTypes()
            where type.IsAssignableTo&amp;lt;IDomainObject&amp;gt;()
            where !type.IsAbstract
            select new [] { type };
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The test itself is hot:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[Theory]
[PropertyData(&quot;DomainObjectClasses&quot;)]
public void DomainObjectHasDefaultConstructor(Type type)
{
    Assert.NotNull(type.GetConstructor(Type.EmptyTypes));
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Er...&lt;/h2&gt;

&lt;p&gt;Fin.&lt;/p&gt;
</description>
				<pubDate>Sat, 14 Dec 2013 00:00:00 +1000</pubDate>
				<link>http://bendetat.com/starting-convention-tests-and-data-driven-tests-in-xunit.html</link>
				<guid isPermaLink="true">http://bendetat.com/starting-convention-tests-and-data-driven-tests-in-xunit.html</guid>
			</item>
		
			<item>
				<title>Try This One Simple Trick To Drastically Reduce Method Test Complexity And Reveal Intent Using Default Arguments</title>
				<description>&lt;h3&gt;YOU WON'T BELIEVE YOUR EYES&lt;/h3&gt;

&lt;p&gt;How search engine. Such marketing. Wow.&lt;/p&gt;

&lt;p&gt;A trap I fall into when writing tests is big 'arrange' or 'act' sections to test a single 'thing'. Here's a trivial example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[Test]
public void Member_first_name_is_updated_correctly()
{
    var member = new Member(....);

    member.Modify(&quot;First&quot;, &quot;Last&quot;, &quot;0400123456&quot;, new DateTime(2000, 1, 1));

    Assert.That(member.FirstName, Is.EqualTo(&quot;First&quot;);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The member instantiation could be taken care of using an &lt;a href=&quot;http://martinfowler.com/bliki/ObjectMother.html&quot;&gt;object mother pattern&lt;/a&gt; but the complexity of the &lt;code&gt;Modify()&lt;/code&gt; invocation (passing a dummy last name, phone number, etc) hides the intent of the test. That is, given a member, &lt;em&gt;when modifying the first name&lt;/em&gt;, the first name matches what it was modified to.&lt;/p&gt;

&lt;p&gt;Revealing that intent can be done by creating a proxy method over &lt;code&gt;member.Modify&lt;/code&gt;, which uses default parameters to allow the test to succinctly express the &lt;em&gt;when&lt;/em&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[Test]
public void Member_first_name_is_updated_correctly()
{
    var member = new Member(...);

    ModifyMember(member, first: &quot;First&quot;);

    Assert.That(member.FirstName, Is.EqualTo(&quot;First&quot;));
}

static void ModifyMember(Member member, string first = &quot;first&quot;, string last = &quot;last&quot;, string phone = &quot;0400123456&quot;, DateTime dateOfBirth = default(DateTime))
{
    if (dateOfBirth == default(DateTime))
        dateOfBirth = new DateTime(2000, 1, 1);
    member.Modify(first, last, phone, dateOfBirth);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now the test only reveals the subject of the test - the first name.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;dateOfBirth&lt;/code&gt; parameter is interesting. Default parameters have to be compile-time constants. &lt;code&gt;new DateTime(2000, 1, 1)&lt;/code&gt; is mutable, i.e. not a constant. We default to a magic value (&lt;code&gt;default(DateTime)&lt;/code&gt;) which is then converted to the default value for the &lt;code&gt;member.Modify()&lt;/code&gt; call. So to actually pass in &lt;code&gt;default(DateTime)&lt;/code&gt; another proxy method is needed:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;static void ModifyMemberWithDefaultDateOfBirth(Member member) 
{
    member.Modify(&quot;first&quot;, &quot;last&quot;, &quot;0400123456&quot;, default(DateTime));
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;which is annoying and not completely DRY, but at least the test is nice. A better way would be to use &lt;code&gt;DateTime?&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;static void ModifyMember(.... , DateTime? dateOfBirth = null)
{
    dateOfBirth = dateOfBirth ?? new DateTime(2000, 1, 1);
    member.Modify(...);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Of course this assumes that &lt;code&gt;member.Modify()&lt;/code&gt; doesn't accept a nullable date of birth.&lt;/p&gt;

&lt;p&gt;These proxy methods would quickly need to be used in multiple test fixtures, so could be appropriate to move them to the member's object mother. They &lt;em&gt;could&lt;/em&gt; be made into extension methods, but that may make things more confusing as the tests would appear to operate on the member in a way that isn't supported in the application itself. If indeed your tests are intended to be documentation for the application. Which they should be. Y'all.&lt;/p&gt;

&lt;p&gt;HT to my home boy &lt;a href=&quot;http://robdmoore.id.au/&quot;&gt;Rob Moore&lt;/a&gt; (&lt;a href=&quot;https://twitter.com/robdmoore&quot;&gt;@robdmoore&lt;/a&gt;) for showing me this ONE SIMPLE TRICK.&lt;/p&gt;
</description>
				<pubDate>Thu, 12 Dec 2013 00:00:00 +1000</pubDate>
				<link>http://bendetat.com/simplify-method-tests-using-default-arguments.html</link>
				<guid isPermaLink="true">http://bendetat.com/simplify-method-tests-using-default-arguments.html</guid>
			</item>
		
			<item>
				<title>Nested view models using Html.EditorFor</title>
				<description>&lt;p&gt;This was written while figuring out the best way to compose a view with a nested view model. &lt;a href=&quot;https://github.com/bendetat/test-nested-view-model&quot;&gt;Here is a Git repo&lt;/a&gt;. I haven't spent much time in ASP.NET MVC so be fair.&lt;/p&gt;

&lt;p&gt;I'm trying to illustrate composing a view. I suspect a better method would be &lt;code&gt;Html.EditorFor&lt;/code&gt; but that approach doesn't seem as rich as using partials (how would I use different editors for the same view model in a different context?).&lt;/p&gt;

&lt;p&gt;TL;DR: it turns out that &lt;code&gt;Html.EditorFor&lt;/code&gt; is &lt;em&gt;exactly&lt;/em&gt; the correct solution, and as you can specify the template it is as flexible as you would expect.&lt;/p&gt;

&lt;h3&gt;Using a partial&lt;/h3&gt;

&lt;p&gt;The views look like this:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Index.cshtml&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@model NestedViewModel.Models.HomeViewModel

&amp;lt;p&amp;gt;
    @Html.LabelFor(x =&amp;gt; x.HomeViewModelField)
    @Html.TextBoxFor(x =&amp;gt; x.HomeViewModelField)
&amp;lt;/p&amp;gt;

@Html.Partial(&quot;_Nested&quot;, Model.Nested)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;_Nested.cshtml&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@model NestedViewModel.Models.MyNestedViewModel

&amp;lt;p&amp;gt;
    @Html.LabelFor(x =&amp;gt; x.NestedViewModelField)
    @Html.TextBoxFor(x =&amp;gt; x.NestedViewModelField)
&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The result looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;p&amp;gt;
    &amp;lt;label for=&quot;HomeViewModelField&quot;&amp;gt;HomeViewModelField&amp;lt;/label&amp;gt;
    &amp;lt;input id=&quot;HomeViewModelField&quot; name=&quot;HomeViewModelField&quot; type=&quot;text&quot; value=&quot;&quot; /&amp;gt;
&amp;lt;/p&amp;gt;

&amp;lt;p&amp;gt;
    &amp;lt;label for=&quot;NestedViewModelField&quot;&amp;gt;NestedViewModelField&amp;lt;/label&amp;gt;
    &amp;lt;input id=&quot;NestedViewModelField&quot; name=&quot;NestedViewModelField&quot; type=&quot;text&quot; value=&quot;&quot; /&amp;gt;
&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that &lt;code&gt;NestedViewModelField&lt;/code&gt;'s name won't bind back to the view model. For model binding to work the name should be &lt;code&gt;Nested.NestedViewModelField&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;Using &lt;code&gt;Html.EditorFor&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;If I make a view with the same name as the nested view model's type, in &lt;code&gt;Views/Home/EditorTemplates&lt;/code&gt;, then &lt;code&gt;Html.EditorFor&lt;/code&gt; will find it and use it. &lt;a href=&quot;http://www.hanselman.com/blog/ASPNETMVCDisplayTemplateAndEditorTemplatesForEntityFrameworkDbGeographySpatialTypes.aspx&quot;&gt;More on this from @shanselman&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Views/Home/EditorTemplates/MyNestedViewModel.cshtml&lt;/code&gt; is the same as &lt;code&gt;_Nested.cshtml&lt;/code&gt; above. The index view swaps out the &lt;code&gt;Html.Partial&lt;/code&gt; for &lt;code&gt;Html.EditorFor&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@model NestedViewModel.Models.HomeViewModel

&amp;lt;p&amp;gt;
    @Html.LabelFor(x =&amp;gt; x.HomeViewModelField)
    @Html.TextBoxFor(x =&amp;gt; x.HomeViewModelField)
&amp;lt;/p&amp;gt;

@Html.EditorFor(x =&amp;gt; x.Nested)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The result is cooler than I expected. The nested view model's field names are correct :win: :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;p&amp;gt;
    &amp;lt;label for=&quot;HomeViewModelField&quot;&amp;gt;HomeViewModelField&amp;lt;/label&amp;gt;
    &amp;lt;input id=&quot;HomeViewModelField&quot; name=&quot;HomeViewModelField&quot; type=&quot;text&quot; value=&quot;&quot; /&amp;gt;
&amp;lt;/p&amp;gt;

&amp;lt;p&amp;gt;
    &amp;lt;label for=&quot;Nested_NestedViewModelField&quot;&amp;gt;NestedViewModelField&amp;lt;/label&amp;gt;
    &amp;lt;input id=&quot;Nested_NestedViewModelField&quot; name=&quot;Nested.NestedViewModelField&quot; type=&quot;text&quot; value=&quot;&quot; /&amp;gt;
&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Composing views and DRY&lt;/h3&gt;

&lt;p&gt;The reason I wanted to explore nested view models was to be able to reuse parts of a form across different views and controllers, so that I am composing the views in a manner that is DRY. Partials are ok because they can be shared across the application, but they don't respect the view model. &lt;code&gt;EditorTemplates&lt;/code&gt; (and &lt;code&gt;DisplayTemplates&lt;/code&gt;) work better than I expected and look to be the correct solution. So how can I share an editor template across different controllers?&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Html.EditorFor&lt;/code&gt; takes a &lt;code&gt;templateName&lt;/code&gt; argument. I didn't expect that. As a special bonus, the engine searches for editor templates in &lt;code&gt;Views/Shared&lt;/code&gt; by default (&lt;a href=&quot;http://stackoverflow.com/a/7841835/149259&quot;&gt;SO&lt;/a&gt;). So I dropped two editors for my nested view model into &lt;code&gt;/Shared/EditorTemplates/MyNestedViewModel/&lt;/code&gt; and specified which templates to use:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@Html.EditorFor(x =&amp;gt; x.Nested, &quot;MyNestedViewModel/EditorOne&quot;)
@Html.EditorFor(x =&amp;gt; x.Nested, &quot;MyNestedViewModel/EditorTwo&quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Magic. Intellisense even picked up the template name.&lt;/p&gt;
</description>
				<pubDate>Tue, 05 Nov 2013 00:00:00 +1000</pubDate>
				<link>http://bendetat.com/nested-view-models-using-html-editorfor.html</link>
				<guid isPermaLink="true">http://bendetat.com/nested-view-models-using-html-editorfor.html</guid>
			</item>
		
			<item>
				<title>Git - dealing with line endings</title>
				<description>&lt;p&gt;&lt;a href=&quot;https://help.github.com/articles/dealing-with-line-endings&quot;&gt;Github Help - Dealing with line endings&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://help.github.com/articles/dealing-with-line-endings#re-normalizing-a-repository&quot;&gt;Re-normalizing a repository&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git rm --cached -r .
# Remove everything from the index.

git reset --hard
# Write both the index and working directory from git's database.

git add .
# Prepare to make a commit by staging all the files that will get normalized.
# This is your chance to inspect which files were never normalized. You should
# get lots of messages like: &quot;warning: CRLF will be replaced by LF in file.&quot;

git commit -m &quot;Normalize line endings&quot;
# Commit
&lt;/code&gt;&lt;/pre&gt;
</description>
				<pubDate>Fri, 11 Oct 2013 00:00:00 +1000</pubDate>
				<link>http://bendetat.com/dealing-with-line-endings.html</link>
				<guid isPermaLink="true">http://bendetat.com/dealing-with-line-endings.html</guid>
			</item>
		
	</channel>
</rss>