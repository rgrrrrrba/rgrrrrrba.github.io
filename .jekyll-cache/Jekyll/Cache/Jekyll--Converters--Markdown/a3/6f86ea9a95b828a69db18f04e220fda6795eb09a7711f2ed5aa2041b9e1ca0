I"Æ<p>This turned out to be much harder than I had hoped. Creating and connecting to a Windows Server VM is trivial in Azure but I thought I would try creating an Ubuntu VM with a desktop in AWS for the exercise (and hopefully in less time than it would take to download an Ubuntu ISO and set up a local VM - I failed). The main time sink was messing around with the SSH keys, which is admittedly a good thing because it‚Äôs got to be, excuse me, pretty damn secure. The other delay was in properly configuring X-Windows to show the Ubuntu desktop. Again this is probably a good thing because an OOTB Ubuntu instance is quite lean and most server-y things can be done via SSH rather in a GUI. That‚Äôs not what I was intending for this exercise though.</p>

<p>I won‚Äôt go into <a href="https://aws.amazon.com/">creating an AWS account</a> but wow, that UI. I thought Azure was arcane.</p>

<p>To create a VM you find a section called ‚ÄòCreate instance‚Äô, which lets you press a button called ‚ÄòLaunch Instance‚Äô, which launches a virtual server, which is known as an Amazon EC2 instance. In Azure this is a big blue plus sign.</p>

<p><img src="https://i.imgur.com/SOJx4Np.png" alt="pressss meeeee" /></p>

<p>Now select your VM image. I picked ‚ÄúUbuntu Server 14.04 LTS (HVM), SSD Volume Type‚Äù. It‚Äôs free! For eligible! I selected the ‚Äòt2.micro‚Äô instance type, which is also free. This is exactly how much I want to spend. I left everything else as default and clicked ‚ÄòReview and Launch‚Äô, mainly because I didn‚Äôt realise there were other things to configure.</p>

<p>By default a new security group will be created when launching a new instance, named something like <code class="language-plaintext highlighter-rouge">launch-wizard-1</code>. This is ‚Äòopen to the world‚Äô, meaning that any IP address could connect to the instance if it has the proper credentials. A security group is basically a set of firewall rules. The only port open by default is 22 for SSH, which requires a private key. Because I‚Äôm using SSH tunnelling to forward the VNC port I don‚Äôt actually have to change the security group but you could limit port 22 to your static IP if you‚Äôve got one.</p>

<p>Now hit Launch. The next step lets you create a public &amp; private key pair. Select ‚ÄòCreate a new key pair‚Äô and give it a nice name. Press Download Key Pair to download the private key then continue. If you hit ‚ÄòView instances‚Äô you can see the new VM get provisioned. It‚Äôs not that exciting.</p>

<p>I followed <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/putty.html?console_help=true">these instructions</a> to use PuTTY to SSH into the VM but you could just use <code class="language-plaintext highlighter-rouge">ssh</code> directly. I ended up needing to use SSH directly later on to create an SSH tunnel anyway.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ssh ubuntu@&lt;PUBLIC DNS&gt; -i &lt;KEYFILE&gt;.pem
</code></pre></div></div>

<p>The value for <code class="language-plaintext highlighter-rouge">-i</code> is the path to the .pem file downloaded previously.</p>

<p>I followed <a href="https://xmodulo.com/how-to-set-up-ubuntu-desktop-vm-on-amazon-ec2.html">these instructions</a> to install the Ubuntu desktop and a TightVNC server, but I ended up with the grey screen of an empty X-Windows session. I needed some <a href="https://askubuntu.com/a/475036/29199">extra work</a> to get it going. You should just do the following instead ;)</p>

<p>Update <code class="language-plaintext highlighter-rouge">apt-get</code> and install lots of things:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo apt-get update
sudo apt-get intall ubuntu-desktop
sudo apt-get intall tightvncserver
sudo apt-get install gnome-panel gnome-settings-daemon metacity nautilus gnome-terminal
</code></pre></div></div>

<p>Launch VNC server to create an initial configuration file:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vncserver :1
</code></pre></div></div>

<p>Open the configuration file in VIM:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vim ~/.vnc/xstartup
</code></pre></div></div>

<p>Edit the configuration file to look like this, using <code class="language-plaintext highlighter-rouge">i</code> to enter insert mode, then <code class="language-plaintext highlighter-rouge">&lt;escape&gt;</code> <code class="language-plaintext highlighter-rouge">:wq</code> to save and exit:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#!/bin/sh

export XKL_XMODMAP_DISABLE=1
unset SESSION_MANAGER
unset DBUS_SESSION_BUS_ADDRESS

[ -x /etc/vnc/xstartup ] &amp;&amp; exec /etc/vnc/xstartup
[ -r $HOME/.Xresources ] &amp;&amp; xrdb $HOME/.Xresources
xsetroot -solid grey

vncconfig -iconic &amp;
gnome-panel &amp;
gnome-settings-daemon &amp;
metacity &amp;
nautilus &amp;
gnome-terminal &amp;
</code></pre></div></div>

<p>Kill and restart the VNC server to apply the settings. This needs to happen each time the VNC / X-Windows configuration is updated.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vncserver -kill :1
vncserver :1
</code></pre></div></div>

<p>After setting up the VNC server you need to create an SSH tunnel. Open a local console that has <code class="language-plaintext highlighter-rouge">ssh.exe</code> in the path (Cmder didn‚Äôt have it but vanilla PowerShell did). The command to run is<sup id="fnref:how-to-specify-a-private-key-in-ssh" role="doc-noteref"><a href="#fn:how-to-specify-a-private-key-in-ssh" class="footnote" rel="footnote">1</a></sup>:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ssh ubuntu@&lt;PUBLIC DNS&gt; -L 5902/127.0.0.1/5901 -i &lt;KEYFILE&gt;.pem
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">-L</code> sets up the tunnel, from port <code class="language-plaintext highlighter-rouge">5902</code> on <code class="language-plaintext highlighter-rouge">127.0.0.1</code> (localhost) to port <code class="language-plaintext highlighter-rouge">5901</code> on the remote server. Note that I‚Äôm setting my local endpoint to port 5902 - 5901 didn‚Äôt work for me.</p>

<p><img src="https://i.imgur.com/iYRRB3k.png" alt="" /></p>

<p>If you‚Äôre on Windows, <a href="https://www.tightvnc.com/download.php">download Tight-VNC</a> instead of using apt-get to install VNC. Connect to <code class="language-plaintext highlighter-rouge">127.0.0.1::5902</code> and use the password you gave above. You should now see your new shiny Ubuntu desktop:</p>

<p><img src="https://i.imgur.com/m7PRgMm.png" alt="" /></p>

<p>If you see an empty grey window like this:</p>

<p><img src="https://i.imgur.com/crHgZFM.png" alt="" /></p>

<p>, or if parts of the Ubuntu desktop seem to be missing, you will need to work on the VNC / X-Windows configuration. Make sure you‚Äôve edited the <code class="language-plaintext highlighter-rouge">xstartup</code> file for the user that the tunnel is logged in as for a start.</p>

<p>Quick note: to delete an instance you just need to terminate it. It doesn‚Äôt disappear from the list immediately but apparently it will. <em>refresh</em> nope, still there.</p>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:how-to-specify-a-private-key-in-ssh" role="doc-endnote">
      <p>https://xmodulo.com/how-to-specify-private-key-file-in-ssh.html¬†<a href="#fnref:how-to-specify-a-private-key-in-ssh" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>
:ET