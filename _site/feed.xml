<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Ben d'état - Ben Scott's blog</title>
		<description></description>		
		<link>http://bendetat.com</link>
		<atom:link href="http://bendetat.com/feed.xml" rel="self" type="application/rss+xml" />
		
			<item>
				<author>Ben Scott - ben.scott@readify.net</author>
				<title>React - Early thoughts</title>
				<description>&lt;p&gt;I’ve just started playing with React, so here is a bit of a brain dump of my first impressions.&lt;/p&gt;

&lt;h2 id=&quot;there-are-some-nice-abstractions&quot;&gt;There are some nice abstractions…&lt;/h2&gt;

&lt;p&gt;I’m comparing this mainly with Angular, which I have about 8 months experience with. React seems to be all about the components, which is similar to the directive-first approach that is working well for me in Angular. The components are very nice to work with, especially with JSX using ES6 features. Here’s a very basic example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;export default class HelloWorld extends React.Component {
	render() {
		return (
			&amp;lt;h1&amp;gt;Hello, world!&amp;lt;/h1&amp;gt;
		);
	}
}

React.render(
	&amp;lt;HelloWorld/&amp;gt;,
	document.getElementById('content')
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This renders the &lt;code&gt;HelloWorld&lt;/code&gt; component inside a div with the ID &lt;code&gt;content&lt;/code&gt;. JSX’s inline style of declaring markup seems strange to look at first, but it’s really just syntactic sugar for commands that create shadow DOM elements.&lt;/p&gt;

&lt;h2 id=&quot;but-it-feels-closer-to-the-metal&quot;&gt;…but it feels closer to the metal&lt;/h2&gt;

&lt;p&gt;Angular includes services such as &lt;code&gt;$http&lt;/code&gt; for AJAX and &lt;code&gt;$q&lt;/code&gt; for promises, and uses separate templates with a templating language to work with the UI. While you don’t have to, use of the included services is recommended - you’re largely buying into the whole ecosystem.&lt;/p&gt;

&lt;p&gt;React is all about the DOM. Inline JSX is syntactic sugar for methods that work directly with the DOM. React doesn’t provide or depend on any particular AJAX library - the tutorials suggest using jQuery directly. This makes React feel very lightweight and gives the impression that it’s not trying to solve too many problems.&lt;/p&gt;

&lt;h2 id=&quot;new-es6-features-and-good-practices&quot;&gt;New ES6 features and good practices&lt;/h2&gt;

&lt;p&gt;The &lt;a href=&quot;https://facebook.github.io/react/docs/tutorial.html&quot;&gt;React tutorial&lt;/a&gt; is a good starting point, but it is built using ES5 syntax. ES6 adds classes, which makes working with JSX a lot easier. There are some important changes that need to made though.&lt;/p&gt;

&lt;p&gt;I’m not a huge fan of ES6 and TypeScript classes, partly because it doesn’t give you much over just using functions, and partly because it makes it more difficult to manage &lt;code&gt;this&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here’s what I mean. In TypeScript (&lt;a href=&quot;http://codepen.io/anon/pen/PPYOzJ?editors=001&quot;&gt;pen&lt;/a&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class Child {
	constructor(private name) {}

	sayName() {
		console.log(this.name);
	}
}

class Parent {
	sayChildName;
  
	constructor(private name, private child) {
		this.sayChildName = child.sayName;
	}
}

var c = new Child(&quot;child&quot;);
var p = new Parent(&quot;parent&quot;, c);

p.sayChildName()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This writes &lt;code&gt;&quot;parent&quot;&lt;/code&gt; to the console, not &lt;code&gt;&quot;child&quot;&lt;/code&gt; as expected. This is because of JavaScript’s late binding - when the &lt;code&gt;sayChildName&lt;/code&gt; reference is executed, &lt;code&gt;this&lt;/code&gt; is the parent. The &lt;code&gt;this&lt;/code&gt; reference in &lt;code&gt;sayName()&lt;/code&gt; isn’t closed over in the function. To get the correct &lt;code&gt;this&lt;/code&gt; in function-based ES6, we usually assign &lt;code&gt;this&lt;/code&gt; to &lt;code&gt;self&lt;/code&gt;. The working equivalent is this:&lt;/p&gt;

&lt;aside class=&quot;pull-right&quot; style=&quot;width: 15em&quot;&gt;
	In fact, by removing the &lt;code&gt;self.name = name&lt;/code&gt; you can make &lt;code&gt;name&lt;/code&gt; truly private, something that isn't possible (yet) in ES6/TS classes.
&lt;/aside&gt;

&lt;pre&gt;&lt;code&gt;function Child(name) {
	var self = this;
	
	self.name = name;
	
	self.sayName = () =&amp;gt; {
		console.log(self.name)
	};
}

function Parent(name, child) {
	var self = this;
	
	self.name = name;
	self.child = child;
	self.sayChildName = child.sayName;
}

var c = new Child(&quot;child&quot;);
var p = new Parent(&quot;parent&quot;, c);

p.sayChildName();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I wanted to use ES6 classes for React because React’s way of creating a component functionally (&lt;code&gt;var MyComponent = React.createClass({...})&lt;/code&gt;) uses object notation, which I find very frustrating to work with, and not having to deal with dependency injection (a la Angular) makes classes feel more lightweight.&lt;/p&gt;

&lt;p&gt;From the tutorial, creating a component functionally is like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var CommentForm = React.createClass({
  handleSubmit: function(e) {
    e.preventDefault();
    var author = React.findDOMNode(this.refs.author).value.trim();
    var text = React.findDOMNode(this.refs.text).value.trim();
    if (!text || !author) {
      return;
    }
    this.props.onCommentSubmit({author: author, text: text});
    React.findDOMNode(this.refs.author).value = '';
    React.findDOMNode(this.refs.text).value = '';
  },
  render: function() {
    return (
      &amp;lt;form className=&quot;commentForm&quot; onSubmit={this.handleSubmit}&amp;gt;
        &amp;lt;input type=&quot;text&quot; placeholder=&quot;Your name&quot; ref=&quot;author&quot; /&amp;gt;
        &amp;lt;input type=&quot;text&quot; placeholder=&quot;Say something...&quot; ref=&quot;text&quot; /&amp;gt;
        &amp;lt;input type=&quot;submit&quot; value=&quot;Post&quot; /&amp;gt;
      &amp;lt;/form&amp;gt;
    );
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that in the &lt;code&gt;render&lt;/code&gt; method, the &lt;code&gt;onSubmit&lt;/code&gt; event handler in the form is set to &lt;code&gt;this.handleSubmit&lt;/code&gt;. This works because React &lt;a href=&quot;https://facebook.github.io/react/docs/interactivity-and-dynamic-uis.html#under-the-hood-autobinding-and-event-delegation&quot;&gt;autobinds&lt;/a&gt; &lt;code&gt;this&lt;/code&gt; to the component instance when using &lt;code&gt;React.createClass&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The equivalent using an ES6 class is this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;export default class CommentForm extends React.Component {
	render() {
		let handleSubmit = e =&amp;gt; {
			e.preventDefault();
			var author = React.findDOMNode(this.refs.author).value.trim();
			var text = React.findDOMNode(this.refs.text).value.trim();
			if (!text || !author) {
				return;
			}
			this.props.onCommentSubmit({
				author: author,
				text: text
			});
			React.findDOMNode(this.refs.author).value = '';
			React.findDOMNode(this.refs.text).value = '';
		};

		return (
			&amp;lt;form className=&quot;commentForm&quot; onSubmit={handleSubmit}&amp;gt;
				&amp;lt;input type=&quot;text&quot; placeholder=&quot;Your name&quot; ref=&quot;author&quot; /&amp;gt;
				&amp;lt;input type=&quot;text&quot; placeholder=&quot;Say something...&quot; ref=&quot;text&quot; /&amp;gt;
				&amp;lt;input type=&quot;submit&quot; value=&quot;Post&quot; /&amp;gt;
			&amp;lt;/form&amp;gt;
		);
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;handleSubmit&lt;/code&gt; has changed from being a function on the class to an inline function within the &lt;code&gt;render()&lt;/code&gt; method. This is because the &lt;code&gt;onSubmit&lt;/code&gt; handler is executed in a different context, so if &lt;code&gt;handleSubmit&lt;/code&gt; were a function directly on the &lt;code&gt;CommentForm&lt;/code&gt; class &lt;code&gt;this&lt;/code&gt; would have a different value and the call would fail. React’s ES6 class support doesn’t support autobinding &lt;code&gt;this&lt;/code&gt; so this is a workaround for idiomatic ES6.&lt;/p&gt;

&lt;p&gt;Making the function an inline value is equivalent to doing the following to the above parent/child TypeScript example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class Child {
	constructor(private name) {
		this.sayName = () =&amp;gt; {
			console.log(this.name);
		};
	}

	sayName;
}

class Parent {
	sayChildName;

	constructor(private name, private child) {
		this.sayChildName = child.sayName;
	}
}

var c = new Child(&quot;child&quot;);
var p = new Parent(&quot;parent&quot;, c);

p.sayChildName()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This now outputs &lt;code&gt;&quot;child&quot;&lt;/code&gt; as originally expected.&lt;/p&gt;

&lt;p&gt;Another gotcha I found with using ES6 classes for React components is setting the initial &lt;code&gt;state&lt;/code&gt; value. &lt;code&gt;this.state&lt;/code&gt; is what React uses for one-way binding to the view. The way to set the initial value using the &lt;code&gt;React.createClass&lt;/code&gt; syntax is with a &lt;code&gt;getInitialState&lt;/code&gt; function:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var CommentBox = React.createClass({
	getInitialState: function() {
		return {data: []};
	},
	// ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Trying to do this with ES6 classes doesn’t work. &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;export default class CommentBox extends React.Component {
	getInitialState() {
		return { data: []};
	}
	//...

Warning: getInitialState was defined on CommentBox, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The correct way is to set &lt;code&gt;this.state&lt;/code&gt; from the constructor:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;export default class CommentBox extends React.Component {
	constructor() {
		super();

		this.state = { data: []};
	}
	//...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that &lt;code&gt;this.state&lt;/code&gt; is only set directly like this &lt;em&gt;in the constructor&lt;/em&gt;. Updating the state subsequently has to happen using &lt;code&gt;this.setState&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$.get('/comments').then(data =&amp;gt; this.setState({
	data: data
}));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;But&lt;/strong&gt; you can’t use &lt;code&gt;this.setState&lt;/code&gt; in the constructor, and setting the state &lt;em&gt;outside&lt;/em&gt; of the constructor has to be via &lt;code&gt;this.setState&lt;/code&gt;. Important to remember.&lt;/p&gt;

&lt;h2 id=&quot;one-way-binding&quot;&gt;One-way binding&lt;/h2&gt;

&lt;p&gt;By default, Angular supports two-way binding between a view and its controller. It does that by automatically setting up watchers on binding expressions in the view. This works very well most of the time, but when it doesn’t everything suddenly becomes very difficult to work with. The view is also mutating the state of the controller, leading to possible issues when debugging or tracing the application.&lt;/p&gt;

&lt;p&gt;React also has two-way binding, but &lt;a href=&quot;https://facebook.github.io/react/docs/two-way-binding-helpers.html&quot;&gt;it’s opt-in&lt;/a&gt; with some quite explicit syntax. The default is one-way binding, from &lt;code&gt;this.state&lt;/code&gt; to the view. The view pushes data back to the component using DOM events:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;export default class TestBinding extends React.Component {
	render() {
		let testChanged = e =&amp;gt; {
			console.log(React.findDOMNode(this.refs.test).value);
		};

		return &amp;lt;input type=&quot;text&quot; ref=&quot;test&quot; onChange={testChanged} /&amp;gt;;
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;the-error-messages-are-superb&quot;&gt;The error messages are superb&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/2DM7t7Q.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;resources-amp-further-reading&quot;&gt;Resources &amp;amp; further reading:&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://facebook.github.io/react/docs/tutorial.html&quot;&gt;React tutorial&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://youtu.be/z5e7kWSHWTg&quot;&gt;React.js Conf 2015 - Hype!&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://youtu.be/I7IdS-PbEgI&quot;&gt;React.js Conf 2015 - Immutable Data and React&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
				<pubDate>Fri, 28 Aug 2015 00:00:00 +1000</pubDate>
				<link>http://bendetat.com/react-early-thoughts.html</link>
				<guid isPermaLink="true">http://bendetat.com/react-early-thoughts.html</guid>
			</item>
		
			<item>
				<author>Ben Scott - ben.scott@readify.net</author>
				<title>Bundling and deploying Azure WebJobs in a Web App with Octopus and Nimbus</title>
				<description>&lt;aside class=&quot;pull-right well&quot; style=&quot;width: 20em&quot;&gt;
	&quot;Nimbus is a .NET client library to add an easy to develop against experience against the Azure Service Bus or the Windows Service Bus.&quot;
&lt;/aside&gt;

&lt;p&gt;I’ve been working on a site hosted in Azure. Up until a few days ago it consisted of a single, monolithic web app, but I had been implementing it against &lt;a href=&quot;http://nimbusapi.github.io/&quot;&gt;Nimbus&lt;/a&gt;’s &lt;a href=&quot;https://www.nuget.org/packages/Nimbus.MessageContracts/&quot;&gt;message&lt;/a&gt; and &lt;a href=&quot;https://www.nuget.org/packages/Nimbus.InfrastructureContracts/&quot;&gt;infrastructure&lt;/a&gt; contract libraries, with a simple in-process bus implementation. This paid off because I reached a point where I needed to offload some asynchronous work to the service layer while keeping things simple in the site layer, and converting the entire application to use Service Bus took a few hours all up.&lt;/p&gt;

&lt;p&gt;That left me with needing somewhere to host the service layer. Load and scalability isn’t an issue so I went with a &lt;a href=&quot;https://azure.microsoft.com/en-us/documentation/articles/web-sites-create-web-jobs/&quot;&gt;WebJob&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;WebJobs are very lightweight and easy to create. They run as part of an Azure web app, so they can be scaled up and out as far as the web app can. This could be a limiting factor in some scenarios. Fortunately a web job that wraps a Nimbus/Service Bus could easily be converted to a different, heavier-weight deployment type, such as a Windows service for use in a VM, a worker role or on-premises.&lt;/p&gt;

&lt;p&gt;Getting a WebJob deployed is fairly easy, but everything has to be correct or the job just won’t run, and there isn’t any support for diagnosing why. As far as Azure is concerned it just doesn’t exist.&lt;/p&gt;

&lt;p&gt;I’m creating a continuous WebJob that uses Nimbus for messaging. The Azure WebJobs API has its own methods for registering endpoints, and for creating triggered or scheduled jobs. Scott Hanselman has a great blog post explaining &lt;a href=&quot;http://www.hanselman.com/blog/IntroducingWindowsAzureWebJobs.aspx&quot;&gt;how to use the API in this way&lt;/a&gt;. The WebJob will basically be a container for a Nimbus message pump.&lt;/p&gt;

&lt;h2 id=&quot;creating-the-webjob-executable&quot;&gt;Creating the WebJob executable&lt;/h2&gt;

&lt;aside class=&quot;pull-left well&quot; style=&quot;width:15em&quot;&gt;
	The .exe name is important. &lt;code&gt;MyApplicationWorker.exe&lt;/code&gt; is ok but &lt;code&gt;MyApplication.Worker.exe&lt;/code&gt; is not.
&lt;/aside&gt;

&lt;p&gt;For use in a C#/.NET application, WebJobs are created as console applications. The name of the generated executable can’t have any punctuation - &lt;code&gt;MyApplicationWorker.exe&lt;/code&gt; is ok but &lt;code&gt;MyApplication.Worker.exe&lt;/code&gt; isn’t. You can still use punctuation in the project name and default namespace, just set the “Assembly name” in the project properties to something valid.&lt;/p&gt;

&lt;p&gt;The application references the &lt;code&gt;Microsoft.Azure.WebJobs&lt;/code&gt; NuGet package, and the &lt;code&gt;Main&lt;/code&gt; method is trivial:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;private static void Main(string[] args)
{
    var container = IoC.LetThereBeIoC();

    var connectionString = ConfigurationManager.AppSettings[&quot;WebJobStorageConnectionString&quot;];
    var configuration = new JobHostConfiguration(connectionString);
    var host = new JobHost(configuration);

    host.RunAndBlock();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The first line creates the IoC container, which includes all the Nimbus setup. The Nimbus bus then just sits in the background while the app is running, handling messages as they appear on the bus.&lt;/p&gt;

&lt;p&gt;The middle section sets up the WebJob host. It requires a connection string to an Azure Table Storage instance. I tried this with the local storage emulator for testing but it requires an actual instance in Azure - the WebJobs API apparently requires features that are not available in the local storage emulator.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;host.RunAndBlock()&lt;/code&gt; then effectively puts the application into an infinite loop and lets it sit around to handle messages.&lt;/p&gt;

&lt;p&gt;When starting the application locally it complains that “No functions found”. This is because WebJobs have their own message handling model based on Service Bus, by decorating parameters on static methods. Since I’m using Nimbus to handle the messaging via Service Bus there are no WebJob-specific handlers needed.&lt;/p&gt;

&lt;h2 id=&quot;deploying&quot;&gt;Deploying&lt;/h2&gt;

&lt;p&gt;Because WebJobs are part of a web site, they don’t need their own deployment pipeline. Instead the entire job application is copied into a &lt;code&gt;jobs&lt;/code&gt; folder within the web site:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;MySite\&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;code&gt;app_data\&lt;/code&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;code&gt;jobs\&lt;/code&gt;
            &lt;ul&gt;
              &lt;li&gt;&lt;code&gt;continuous\&lt;/code&gt;
                &lt;ul&gt;
                  &lt;li&gt;&lt;code&gt;MyWorkerJob\&lt;/code&gt;&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;code&gt;MyWorkerJob&lt;/code&gt; has to be &lt;em&gt;exactly the same&lt;/em&gt; as the &lt;code&gt;.exe&lt;/code&gt; name. So &lt;code&gt;MyWorkerJob.exe&lt;/code&gt; needs to be deployed to &lt;code&gt;app_data/jobs/continuous/MyWorkerJob&lt;/code&gt;. Jobs can be scheduled as &lt;code&gt;continuous&lt;/code&gt; or &lt;code&gt;triggered&lt;/code&gt;. The Nimbus work needs to run continuously so it gets deployed to &lt;code&gt;App_Data\jobs\continuous&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For Octopack to include the jobs, the job path just needs to be added to the project’s &lt;code&gt;.nuspec&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?xml version=&quot;1.0&quot;?&amp;gt;
&amp;lt;package xmlns=&quot;http://schemas.microsoft.com/packaging/2010/07/nuspec.xsd&quot;&amp;gt;
	...
	&amp;lt;files&amp;gt;
		...
		&amp;lt;file src=&quot;..\My.Worker\bin\release\**&quot; target=&quot;app_data\jobs\continuous\MyWorker&quot; /&amp;gt;
	&amp;lt;/files&amp;gt;
&amp;lt;/package&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The solution’s build order needs to have the job’s built before the web site (so the job’s artifacts are available when building the site). You can do that by right-clicking the project, selecting ‘Project Build Order’, and adding the WebJob as a dependency of the web site.&lt;/p&gt;

&lt;p&gt;That’s pretty much all there is to it. When the solution is built and packed, the WebJob will be included in the &lt;code&gt;.nupkg&lt;/code&gt; file, and Octopus will automatically patch the WebJob’s &lt;code&gt;App.config&lt;/code&gt; when configuring the site. It’s also a good idea to logging using something like &lt;a href=&quot;http://getseq.net/&quot;&gt;Seq&lt;/a&gt; to see the WebJob start up with the site.&lt;/p&gt;

&lt;h2 id=&quot;resources-amp-further-reading&quot;&gt;Resources &amp;amp; further reading:&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.hanselman.com/blog/IntroducingWindowsAzureWebJobs.aspx&quot;&gt;Introducing Windows Azure WebJobs - Scott Hanselman&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.troyhunt.com/2015/01/azure-webjobs-are-awesome-and-you.html&quot;&gt;Azure WebJobs are awesome and you should start using them right now! - Troy Hunt&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://azure.microsoft.com/en-us/documentation/articles/web-sites-create-web-jobs/&quot;&gt;Run Background tasks with WebJobs - Azure&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://robdmoore.id.au/blog/2014/07/22/my-stance-on-azure-worker-roles/&quot;&gt;My stance on Azure Worker Roles - Rob Moore&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.amitapple.com/post/74215124623/deploy-azure-webjobs/#.VbjV2W6qpBf&quot;&gt;How to deploy Azure WebJobs - Amit Apple&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://withouttheloop.com/articles/2015-06-23-deploying-custom-services-as-azure-webjobs/&quot;&gt;Deploying custom services as Azure Webjobs - Liam McLennan&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
				<pubDate>Thu, 27 Aug 2015 00:00:00 +1000</pubDate>
				<link>http://bendetat.com/bundling-and-deploying-azure-webjobs-in-a-web-app.html</link>
				<guid isPermaLink="true">http://bendetat.com/bundling-and-deploying-azure-webjobs-in-a-web-app.html</guid>
			</item>
		
			<item>
				<author>Ben Scott - ben.scott@readify.net</author>
				<title>Build pipeline for React</title>
				<description>&lt;p&gt;I’m going to eshew Bower and just use NPM as the package manager. I’ve already got &lt;a href=&quot;http://bendetat.com/hello-world-its-gulp.html&quot;&gt;Node and NPM installed&lt;/a&gt;. The example site I’m creating is &lt;code&gt;survey-thing&lt;/code&gt; - a simple thing for &lt;a href=&quot;https://github.com/bendetat/survey-thing&quot;&gt;creating surveys&lt;/a&gt;. I also have a &lt;a href=&quot;https://github.com/bendetat/stub-projects/tree/master/react-with-gulp-and-bootstrap&quot;&gt;stub package&lt;/a&gt; which just includes a script for setting up the environment and a simple landing page.&lt;/p&gt;

&lt;p&gt;I’m going to use all the shinies - &lt;a href=&quot;http://browserify.org/&quot;&gt;Browserify&lt;/a&gt; for CommonJS modules and &lt;a href=&quot;https://facebook.github.io/react/docs/jsx-in-depth.html&quot;&gt;JSX&lt;/a&gt; instead of the seperate &lt;code&gt;.js&lt;/code&gt;/&lt;code&gt;.html&lt;/code&gt; structure of a typical AngularJS application, using &lt;a href=&quot;https://babeljs.io/&quot;&gt;Babel&lt;/a&gt; for ES6 features and &lt;a href=&quot;http://sass-lang.com/&quot;&gt;SASS&lt;/a&gt; for stylesheet preprocessing.&lt;/p&gt;

&lt;h2 id=&quot;primer-nancy-as-a-static-server&quot;&gt;Primer: Nancy as a static server&lt;/h2&gt;

&lt;p&gt;The site will be hosted in a simple &lt;a href=&quot;http://nancyfx.org/&quot;&gt;Nancy app&lt;/a&gt; so the built React application will be output to &lt;code&gt;src\SurveyThing\app&lt;/code&gt;. Host this in Nancy with a static convention - this example is for an ASP.NET site using OWIN.&lt;/p&gt;

&lt;p&gt;Install some NuGet packages (&lt;code&gt;Microsoft.Owin&lt;/code&gt;, &lt;code&gt;Microsoft.Owin.Host.SystemWeb&lt;/code&gt;, &lt;code&gt;Nancy&lt;/code&gt; and &lt;code&gt;Nancy.Owin&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Add these values to the &lt;code&gt;web.config&lt;/code&gt; file, within the &lt;code&gt;configuration&lt;/code&gt; element:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;appSettings&amp;gt;
	&amp;lt;add key=&quot;owin:HandleAllRequests&quot; value=&quot;true&quot; /&amp;gt;
&amp;lt;/appSettings&amp;gt;
&amp;lt;system.webServer&amp;gt;
	&amp;lt;modules runAllManagedModulesForAllRequests=&quot;true&quot;/&amp;gt;
&amp;lt;/system.webServer&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Add &lt;code&gt;Startup&lt;/code&gt; and &lt;code&gt;Bootstrapper&lt;/code&gt; classes:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class Startup
{
    public void Configuration(IAppBuilder app)
    {
        app
            .UseNancy(new NancyOptions
            {
                Bootstrapper = new Bootstrapper()
            })
            .UseStageMarker(PipelineStage.MapHandler);
    }
}

public class Bootstrapper : DefaultNancyBootstrapper
{
    protected override void ConfigureConventions(NancyConventions nancyConventions)
    {
        Conventions.StaticContentsConventions.Clear();
        Conventions.StaticContentsConventions.AddDirectory(&quot;/&quot;, &quot;app&quot;);

        base.ConfigureConventions(nancyConventions);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you create &lt;code&gt;\app\test.html&lt;/code&gt; inside the Nancy site’s root it should be served from &lt;code&gt;http://localhost:PORT/test.html&lt;/code&gt;. To serve &lt;code&gt;\app\index.html&lt;/code&gt; when requesting &lt;code&gt;http://localhost:PORT&lt;/code&gt; a static route needs to added:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class StaticModule : NancyModule
{
    public StaticModule()
    {
        Get[&quot;/&quot;] = _ =&amp;gt; Response.AsFile(&quot;app/index.html&quot;);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;set-up-gulp&quot;&gt;Set up Gulp&lt;/h2&gt;

&lt;p&gt;I want to use:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;gulp&lt;/code&gt; for the build tool&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;sass&lt;/code&gt; for CSS generation&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;gulp-pleeease&lt;/code&gt; to do &lt;a href=&quot;http://pleeease.io/&quot;&gt;nice things with CSS&lt;/a&gt; including minification&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;babelify&lt;/code&gt; for ES6 and JSX support&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;browserify&lt;/code&gt; for a CommonJs module system&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;vinyl-source-stream&lt;/code&gt; reduces the reliance on gulp plugins (so we can use &lt;code&gt;babelify&lt;/code&gt; instead of &lt;code&gt;gulp-babel&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;react&lt;/code&gt; obviously ;-)&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;gulp-streamify&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;uglify&lt;/code&gt; minify JS (used later)&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code&gt;yargs&lt;/code&gt; get command line args (used later)&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;  npm install --save gulp
  npm install --save gulp-concat
  npm install --save gulp-sass
  npm install --save gulp-pleeease
  npm install --save babelify
  npm install --save browserify
  npm install --save vinyl-source-stream
  npm install --save react
  npm install --save gulp-streamify
  npm install --save uglify
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There’s a fair bit happening in &lt;a href=&quot;https://github.com/bendetat/survey-thing/blob/master/gulpfile.js&quot;&gt;the &lt;code&gt;gulpfile.js&lt;/code&gt; script&lt;/a&gt; but here are some highlights.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;'code'&lt;/code&gt; step uses browserify to set up the CommonJS module system and uses &lt;code&gt;app/layout/index.jsx&lt;/code&gt; as the entry point to the application. Babel is used to take advantage of ES6 and the script is minified.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; gulp.task('code', function(){
	browserify({
		entries: 'app/layout/layout.jsx',
		extensions: ['.jsx'],
		debug: true
	})
		.transform(babelify)
		.bundle()
		.pipe(source('site.js'))
		.pipe(gulp.dest(destinationPath));
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;CSS preprocessing is done using SASS. The entry point is &lt;code&gt;app/site.scss&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gulp.task('css', function(){
	gulp
		.src([
			'app/site.scss',
			'app/**/*.css'
		])
		.pipe(sass().on('error', sass.logError))
		.pipe(pleeease())
		.pipe(concat('site.css'))
		.pipe(gulp.dest(destinationPath));
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The template HTML file is copied verbatim to the destination path.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gulp.task('html', function(){
	gulp
		.src('app/index.html')
		.pipe(gulp.dest(destinationPath));
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The default gulp task runs all the main tasks (&lt;code&gt;'vendor'&lt;/code&gt; is not shown, it just bundles up vendor CSS and JS into &lt;code&gt;vendor.css&lt;/code&gt; and &lt;code&gt;vendor.js&lt;/code&gt; respectively).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gulp.task('default', ['code', 'css', 'html', 'vendor']);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;'watch'&lt;/code&gt; task splits up the workload to keep live rebuilds snappy:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gulp.task('watch', ['default'], function() {
	gulp.watch(
		['app/**/*.jsx'], 
		['code']);
	gulp.watch(
		['app/**/*.css', 'app/**/*.scss'],
		['css']);
	gulp.watch(
		['app/index.html'],
		['html']);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;react-app-structure&quot;&gt;React app structure&lt;/h2&gt;

&lt;p&gt;The structure is pretty trivial at this point:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;app/
	index.html
	site.scss
	/layout
		layout.jsx
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;index.html&lt;/code&gt; references the stylesheets and scripts, and includes a &lt;code&gt;div&lt;/code&gt; with an ID that will be used by the React app:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
	&amp;lt;head&amp;gt;
		&amp;lt;title&amp;gt;Survey Thing&amp;lt;/title&amp;gt;
		&amp;lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;site.css&quot;/&amp;gt;
		&amp;lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;vendor.css&quot;/&amp;gt;
	&amp;lt;/head&amp;gt;
	&amp;lt;body&amp;gt;
		&amp;lt;div id=&quot;content&quot;&amp;gt;&amp;lt;/div&amp;gt;

		&amp;lt;script src=&quot;site.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
		&amp;lt;script src=&quot;vendor.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
	&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In &lt;code&gt;layout.jsx&lt;/code&gt;, ‘Hello world’ is rendered into the &lt;code&gt;div&lt;/code&gt; using inline markup:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import React from 'react';

React.render(
	&amp;lt;h1&amp;gt;Hello, world!&amp;lt;/h1&amp;gt;,
	document.getElementById(&quot;content&quot;)
);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Running &lt;code&gt;gulp&lt;/code&gt; will run the &lt;code&gt;'default'&lt;/code&gt; task, which should build the app and write the artifacts to &lt;code&gt;\src\SurveyThing\app&lt;/code&gt;. Running &lt;code&gt;gulp watch&lt;/code&gt; will run the &lt;code&gt;'watch'&lt;/code&gt; task and rebuild whenever the monitored files change.&lt;/p&gt;

&lt;p&gt;If everything works, we should have a happy ‘hello world’ page. I made mine pink &lt;strike&gt;because pink is cool&lt;/strike&gt; to test SASS:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/rMdt9t7.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;minifying-the-sitejs-file&quot;&gt;Minifying the &lt;code&gt;site.js&lt;/code&gt; file&lt;/h2&gt;

&lt;p&gt;Without minification the &lt;code&gt;site.js&lt;/code&gt; file is huge (1.5M). To conditionally minify the script I check for a &lt;code&gt;--release&lt;/code&gt; argument:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var yargs = require('yargs');

var buildRelease = yargs.argv.release || false;

gulp.task('code', function(){
	var pipeline = browserify({
		entries: 'app/layout/layout.jsx',
		extensions: ['.jsx'],
		debug: true
	})
		.transform(babelify)
		.bundle()
		.pipe(source('site.js'));

	if (buildRelease) {
		pipeline.pipe(streamify(uglify()));
	}

	pipeline
		.pipe(gulp.dest(destinationPath));
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now running &lt;code&gt;gulp --release&lt;/code&gt; results in a much more managable 185k file.&lt;/p&gt;

&lt;h2 id=&quot;fin&quot;&gt;fin&lt;/h2&gt;

&lt;p&gt;Check out the &lt;a href=&quot;https://github.com/bendetat/survey-thing&quot;&gt;survey-thing&lt;/a&gt; repo for updates and lols.&lt;/p&gt;

&lt;h2 id=&quot;resources-amp-further-reading&quot;&gt;Resources &amp;amp; further reading:&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/pawelpabich/random-reactjs-hacks&quot;&gt;pawelpabich/random-reactjs-hacks - Pawel Pabich&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/bendetat/stub-projects/tree/master/react-with-gulp-and-bootstrap&quot;&gt;Stub projects - React with Gulp and Bootstrap&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
				<pubDate>Thu, 27 Aug 2015 00:00:00 +1000</pubDate>
				<link>http://bendetat.com/build-pipeline-for-react.html</link>
				<guid isPermaLink="true">http://bendetat.com/build-pipeline-for-react.html</guid>
			</item>
		
			<item>
				<author>Ben Scott - ben.scott@readify.net</author>
				<title>Ubuntu Desktop in AWS EC2</title>
				<description>&lt;p&gt;This turned out to be much harder than I had hoped. Creating and connecting to a Windows Server VM is trivial in Azure but I thought I would try creating an Ubuntu VM with a desktop in AWS for the exercise (and hopefully in less time than it would take to download an Ubuntu ISO and set up a local VM - I failed). The main time sink was messing around with the SSH keys, which is admittedly a good thing because it’s got to be, excuse me, pretty damn secure. The other delay was in properly configuring X-Windows to show the Ubuntu desktop. Again this is probably a good thing because an OOTB Ubuntu instance is quite lean and most server-y things can be done via SSH rather in a GUI. That’s not what I was intending for this exercise though.&lt;/p&gt;

&lt;p&gt;I won’t go into &lt;a href=&quot;http://aws.amazon.com/&quot;&gt;creating an AWS account&lt;/a&gt; but wow, that UI. I thought Azure was arcane.&lt;/p&gt;

&lt;p&gt;To create a VM you find a section called ‘Create instance’, which lets you press a button called ‘Launch Instance’, which launches a virtual server, which is known as an Amazon EC2 instance. In Azure this is a big blue plus sign.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/SOJx4Np.png&quot; alt=&quot;pressss meeeee&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now select your VM image. I picked “Ubuntu Server 14.04 LTS (HVM), SSD Volume Type”. It’s free! For eligible! I selected the ‘t2.micro’ instance type, which is also free. This is exactly how much I want to spend. I left everything else as default and clicked ‘Review and Launch’, mainly because I didn’t realise there were other things to configure.&lt;/p&gt;

&lt;p&gt;By default a new security group will be created when launching a new instance, named something like &lt;code&gt;launch-wizard-1&lt;/code&gt;. This is ‘open to the world’, meaning that any IP address could connect to the instance if it has the proper credentials. A security group is basically a set of firewall rules. The only port open by default is 22 for SSH, which requires a private key. Because I’m using SSH tunnelling to forward the VNC port I don’t actually have to change the security group but you could limit port 22 to your static IP if you’ve got one.&lt;/p&gt;

&lt;p&gt;Now hit Launch. The next step lets you create a public &amp;amp; private key pair. Select ‘Create a new key pair’ and give it a nice name. Press Download Key Pair to download the private key then continue. If you hit ‘View instances’ you can see the new VM get provisioned. It’s not that exciting.&lt;/p&gt;

&lt;p&gt;I followed &lt;a href=&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/putty.html?console_help=true&quot;&gt;these instructions&lt;/a&gt; to use PuTTY to SSH into the VM but you could just use &lt;code&gt;ssh&lt;/code&gt; directly. I ended up needing to use SSH directly later on to create an SSH tunnel anyway.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ssh ubuntu@&amp;lt;PUBLIC DNS&amp;gt; -i &amp;lt;KEYFILE&amp;gt;.pem
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The value for &lt;code&gt;-i&lt;/code&gt; is the path to the .pem file downloaded previously.&lt;/p&gt;

&lt;p&gt;I followed &lt;a href=&quot;http://xmodulo.com/how-to-set-up-ubuntu-desktop-vm-on-amazon-ec2.html&quot;&gt;these instructions&lt;/a&gt; to install the Ubuntu desktop and a TightVNC server, but I ended up with the grey screen of an empty X-Windows session. I needed some &lt;a href=&quot;http://askubuntu.com/a/475036/29199&quot;&gt;extra work&lt;/a&gt; to get it going. You should just do the following instead ;)&lt;/p&gt;

&lt;p&gt;Update &lt;code&gt;apt-get&lt;/code&gt; and install lots of things:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo apt-get update
sudo apt-get intall ubuntu-desktop
sudo apt-get intall tightvncserver
sudo apt-get install gnome-panel gnome-settings-daemon metacity nautilus gnome-terminal
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Launch VNC server to create an initial configuration file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vncserver :1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Open the configuration file in VIM:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vim ~/.vnc/xstartup
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Edit the configuration file to look like this, using &lt;code&gt;i&lt;/code&gt; to enter insert mode, then &lt;code&gt;&amp;lt;escape&amp;gt;&lt;/code&gt; &lt;code&gt;:wq&lt;/code&gt; to save and exit:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/bin/sh

export XKL_XMODMAP_DISABLE=1
unset SESSION_MANAGER
unset DBUS_SESSION_BUS_ADDRESS

[ -x /etc/vnc/xstartup ] &amp;amp;&amp;amp; exec /etc/vnc/xstartup
[ -r $HOME/.Xresources ] &amp;amp;&amp;amp; xrdb $HOME/.Xresources
xsetroot -solid grey

vncconfig -iconic &amp;amp;
gnome-panel &amp;amp;
gnome-settings-daemon &amp;amp;
metacity &amp;amp;
nautilus &amp;amp;
gnome-terminal &amp;amp;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Kill and restart the VNC server to apply the settings. This needs to happen each time the VNC / X-Windows configuration is updated.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vncserver -kill :1
vncserver :1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After setting up the VNC server you need to create an SSH tunnel. Open a local console that has &lt;code&gt;ssh.exe&lt;/code&gt; in the path (Cmder didn’t have it but vanilla PowerShell did). The command to run is&lt;sup id=&quot;fnref:how-to-specify-a-private-key-in-ssh&quot;&gt;&lt;a href=&quot;#fn:how-to-specify-a-private-key-in-ssh&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ssh ubuntu@&amp;lt;PUBLIC DNS&amp;gt; -L 5902/127.0.0.1/5901 -i &amp;lt;KEYFILE&amp;gt;.pem
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;-L&lt;/code&gt; sets up the tunnel, from port &lt;code&gt;5902&lt;/code&gt; on &lt;code&gt;127.0.0.1&lt;/code&gt; (localhost) to port &lt;code&gt;5901&lt;/code&gt; on the remote server. Note that I’m setting my local endpoint to port 5902 - 5901 didn’t work for me.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/iYRRB3k.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you’re on Windows, &lt;a href=&quot;http://www.tightvnc.com/download.php&quot;&gt;download Tight-VNC&lt;/a&gt; instead of using apt-get to install VNC. Connect to &lt;code&gt;127.0.0.1::5902&lt;/code&gt; and use the password you gave above. You should now see your new shiny Ubuntu desktop:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/m7PRgMm.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you see an empty grey window like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/crHgZFM.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;, or if parts of the Ubuntu desktop seem to be missing, you will need to work on the VNC / X-Windows configuration. Make sure you’ve edited the &lt;code&gt;xstartup&lt;/code&gt; file for the user that the tunnel is logged in as for a start.&lt;/p&gt;

&lt;p&gt;Quick note: to delete an instance you just need to terminate it. It doesn’t disappear from the list immediately but apparently it will. &lt;em&gt;refresh&lt;/em&gt; nope, still there.&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:how-to-specify-a-private-key-in-ssh&quot;&gt;
      &lt;p&gt;http://xmodulo.com/how-to-specify-private-key-file-in-ssh.html &lt;a href=&quot;#fnref:how-to-specify-a-private-key-in-ssh&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
				<pubDate>Thu, 30 Jul 2015 00:00:00 +1000</pubDate>
				<link>http://bendetat.com/ubuntu-desktop-in-ec2.html</link>
				<guid isPermaLink="true">http://bendetat.com/ubuntu-desktop-in-ec2.html</guid>
			</item>
		
			<item>
				<author>Ben Scott - ben.scott@readify.net</author>
				<title>Controller scope in Angular JS directives</title>
				<description>&lt;p&gt;This is probably basic level Angular JS but I haven’t seen it mentioned anywhere. I’m probably missing something fundamental about directive scope.&lt;/p&gt;

&lt;p&gt;Say you’ve got this directive (&lt;a href=&quot;http://jsfiddle.net/10qwqc5r/2/&quot;&gt;JSFiddle&lt;/a&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;angular
    .module('app', [])
    .directive('thing', function() {
        return {
            restrict: 'E',
            replace: true,
            template: '&amp;lt;div&amp;gt;&amp;lt;input ng-model=&quot;vm.name&quot;/&amp;gt; Name: &amp;lt;/div&amp;gt;',
            controller: function() {
                this.name = '';
            },
            controllerAs: 'vm'
        };
    });
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Using it once works great:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;div ng-app=&quot;app&quot;&amp;gt;
	&amp;lt;thing&amp;gt;&amp;lt;/thing&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But if you use the directive multiple times, it becomes clear that the directive views all share the same controller:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;div ng-app=&quot;app&quot;&amp;gt;
    &amp;lt;thing&amp;gt;&amp;lt;/thing&amp;gt;
    &amp;lt;thing&amp;gt;&amp;lt;/thing&amp;gt;
    &amp;lt;thing&amp;gt;&amp;lt;/thing&amp;gt;
    &amp;lt;thing&amp;gt;&amp;lt;/thing&amp;gt;
    &amp;lt;thing&amp;gt;&amp;lt;/thing&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/Oqbl2Yy.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Typing in the first textbox affects all of the other directive views, ie. they are all pointing to the same controller.&lt;/p&gt;

&lt;p&gt;In fact, if you have different directives with the same &lt;code&gt;controllerAs&lt;/code&gt; value, you can see that the &lt;code&gt;vm&lt;/code&gt; instance for each directive is set to the last directive’s controller (&lt;a href=&quot;http://jsfiddle.net/10qwqc5r/3/&quot;&gt;JSFiddle&lt;/a&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;angular
    .module('app', [])
    .directive('firstDirective', function() {
        return {
            restrict: 'E',
            replace: true,
            template: '&amp;lt;div&amp;gt;first directive: &amp;lt;pre&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;',
            controller: function() {
                this.foo = 'Hi!';
            },
            controllerAs: 'vm'
        };
    })
    .directive('secondDirective', function(){
        return {
            restrict: 'E',
            replace: true,
            template: '&amp;lt;div&amp;gt;second directive: &amp;lt;pre&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;',
            controller: function() {
                this.bar = 'There?';
            },
            controllerAs: 'vm'
        };
    });

&amp;lt;div ng-app=&quot;app&quot;&amp;gt;
	&amp;lt;first-directive&amp;gt;&amp;lt;/first-directive&amp;gt;
	&amp;lt;second-directive&amp;gt;&amp;lt;/second-directive&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/9y6Rg6k.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you change the name of the &lt;code&gt;controllerAs&lt;/code&gt; alias - say to &lt;code&gt;firstDirectiveVm&lt;/code&gt; and &lt;code&gt;secondDirectiveVm&lt;/code&gt; - then the problem goes away, so Angular JS by default is setting &lt;code&gt;vm&lt;/code&gt; globally each time a directive uses &lt;code&gt;controllerAs: 'vm'&lt;/code&gt;, and going down the page, meaning the last &lt;code&gt;vm&lt;/code&gt; wins. This can obviously be a pretty tricky problem to diagnose. Besides which, this workaround of changing each directive’s &lt;code&gt;controllerAs&lt;/code&gt; value won’t work for multiple directives of the same type.&lt;/p&gt;

&lt;p&gt;The solution is to set &lt;code&gt;scope&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; in the directive declaration (&lt;a href=&quot;http://jsfiddle.net/10qwqc5r/4/&quot;&gt;JSFiddle&lt;/a&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;angular
    .module('app', [])
    .directive('thing', function() {
        return {
            restrict: 'E',
            replace: true,
            template: '&amp;lt;div&amp;gt;&amp;lt;input ng-model=&quot;vm.name&quot;/&amp;gt; Name: &amp;lt;/div&amp;gt;',
            controller: function() {
                this.name = '';
            },
            controllerAs: 'vm',
            scope: true
        };
    });
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/jUlaSCJ.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A lot more can happen in that &lt;code&gt;scope&lt;/code&gt; value than setting it to true. See the Angular JS docs for &lt;a href=&quot;https://docs.angularjs.org/guide/directive#isolating-the-scope-of-a-directive&quot;&gt;isolating directive scope&lt;/a&gt; for examples. Unfortunately, ‘scope’ seems to be an overloaded term in Angular JS world. This kind of ‘scope’ is talking about the scope of the element and attributes provided by the directive, in a way distinct from &lt;code&gt;$scope&lt;/code&gt;, which is what I’m trying to avoid by using &lt;code&gt;controllerAs&lt;/code&gt; in the first place.&lt;/p&gt;

&lt;p&gt;It seems strange to me that shared scope is the default, and that you need to set &lt;code&gt;scope&lt;/code&gt; to a non-falsy value to opt out of that. I’m sure I’m missing a lot of nuance around the reasons. In any case, setting &lt;code&gt;scope: true&lt;/code&gt; seems to be the happy path. &lt;/p&gt;

&lt;p&gt;I just wish I hadn’t wasted a full day rewriting an entire site before figuring out what was happening.&lt;/p&gt;

&lt;p&gt;:-(&lt;/p&gt;

</description>
				<pubDate>Sun, 28 Jun 2015 00:00:00 +1000</pubDate>
				<link>http://bendetat.com/controller-scope-in-angular-js-directives.html</link>
				<guid isPermaLink="true">http://bendetat.com/controller-scope-in-angular-js-directives.html</guid>
			</item>
		
			<item>
				<author>Ben Scott - ben.scott@readify.net</author>
				<title>Setting up TeamCity and GitVersion for an open source project</title>
				<description>&lt;p&gt;Note that I’m using TeamCity 9.0 (build 32060) and GitVersion 2.0.1. These steps may be different in future versions. GitVersion seems to be slated for a 3.0 release very soon.&lt;/p&gt;

&lt;h2 id=&quot;practice-makes-perfect&quot;&gt;Practice makes perfect&lt;/h2&gt;

&lt;p&gt;I’m setting up TeamCity using GitVersion for a new open source project that I want to deploy via NuGet. I’ve used TeamCity a few times to set up basic builds but I’ve never got &lt;a href=&quot;http://semver.org/&quot;&gt;SemVer&lt;/a&gt; working in a nice way before, so I thought this would be a nice opportunity to try &lt;a href=&quot;https://github.com/ParticularLabs/GitVersion&quot;&gt;GitVersion&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The Release configuration is triggered manually to deploy the last built version to NuGet. It would probably be nicer to do this from Octopus but for now I’ll just use TeamCity.&lt;/p&gt;

&lt;h2 id=&quot;preparing-the-build-agent&quot;&gt;Preparing the build agent&lt;/h2&gt;

&lt;p&gt;I’ve started out with an &lt;a href=&quot;http://bendetat.com/set-up-teamcity-on-an-azure-instance-redux.html&quot;&gt;Azure VM configured with TeamCity 9&lt;/a&gt;. I first installed GitVersion on my build agent using &lt;a href=&quot;https://chocolatey.org/&quot;&gt;Chocolatey&lt;/a&gt;. Install Chocolatey using an elevated Powershell console:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;iex ((new-object net.webclient).DownloadString('https://chocolatey.org/install.ps1'))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then install GitVersion:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cinst gitversion.portable
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You may also have to install &lt;a href=&quot;https://msysgit.github.io/&quot;&gt;msysgit&lt;/a&gt;. TeamCity has its own Git client built into the server but GitVersion needs to be able to access the Git history on the agent, which means the VCS checkout has to happen on the agent (configured below). Reboot the machine once this is done to make sure everything is on the path.&lt;/p&gt;

&lt;h2 id=&quot;teamcity-setup&quot;&gt;TeamCity setup&lt;/h2&gt;

&lt;p&gt;Now start setting up the project in TeamCity.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Under &lt;em&gt;Administration&lt;/em&gt;, create a new project&lt;/li&gt;
  &lt;li&gt;Create a build configuration called &lt;code&gt;CI&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;In the VCS roots, just paste the HTTPS clone URL from Github into the &lt;em&gt;Repository URL&lt;/em&gt;. Change the &lt;em&gt;Authentication method&lt;/em&gt; to &lt;em&gt;Password&lt;/em&gt; and enter your Github username and password. &lt;em&gt;Note:&lt;/em&gt; I’m using HTTPS because GitVersion uses LitGit2Sharp, which doesn’t support SSH at the time of writing :’-( (at least GitVersion doesn’t support it AFAIK)&lt;/li&gt;
  &lt;li&gt;Click &lt;em&gt;Create&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now create the first build step for GitVersion. I used &lt;a href=&quot;http://jake.ginnivan.net/blog/2014/07/09/my-typical-teamcity-build-setup/&quot;&gt;Jake Ginnivan’s post on his typical TeamCity build setup&lt;/a&gt; as a guide.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Click &lt;em&gt;Add build step&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;Select &lt;em&gt;Command Line&lt;/em&gt; as the &lt;em&gt;Runner type&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;Change the &lt;em&gt;Run&lt;/em&gt; value to &lt;em&gt;Executable with parameters&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Command executable&lt;/em&gt; is &lt;code&gt;GitVersion&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Command parameters&lt;/em&gt; is &lt;code&gt;. /updateAssemblyInfo /assemblyVersionFormat MajorMinorPatch /output buildserver&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Note that there is a space between the &lt;code&gt;.&lt;/code&gt; and the &lt;code&gt;/updateAssemblyInfo&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/stM7oSn.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note&lt;/em&gt; with the 3.0 release of GitVersion the command parameters may be able to be removed in favour of a &lt;code&gt;GitVersionConfig.yaml&lt;/code&gt; configuration file. Stay tuned.&lt;/p&gt;

&lt;p&gt;Now create another build step to build the solution.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Under &lt;em&gt;Build Steps&lt;/em&gt; click &lt;em&gt;Auto-detect build steps&lt;/em&gt;, which scans the repository and finds things to build. In this case it identified a &lt;em&gt;Visual Studio (sln)&lt;/em&gt; build step which just builds &lt;code&gt;PROJECT_NAME.sln&lt;/code&gt;. Select the step then clicked &lt;em&gt;Use selected&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;Under &lt;em&gt;Version Control Settings&lt;/em&gt;, change the &lt;em&gt;VCS checkout mode&lt;/em&gt; from &lt;em&gt;Automatically on server&lt;/em&gt; to &lt;em&gt;Automatically on agent&lt;/em&gt;. This will check out the repository on the agent, which means the &lt;code&gt;.git&lt;/code&gt; folder will exist and GitVersion should work properly.&lt;/li&gt;
  &lt;li&gt;Also check the &lt;em&gt;Clean build&lt;/em&gt; option.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To run GitVersion before building the solution:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Reorder build steps&lt;/li&gt;
  &lt;li&gt;Drag &lt;em&gt;GitVersion&lt;/em&gt; above &lt;em&gt;Visual Studio (sln)&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Apply&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now select &lt;em&gt;Triggers&lt;/em&gt; and &lt;em&gt;Add a new trigger&lt;/em&gt;. Select &lt;em&gt;VCS Trigger&lt;/em&gt; then &lt;em&gt;Save&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&quot;i-wonder-what-happens-if-i-press-this&quot;&gt;I wonder what happens if I press this…&lt;/h2&gt;

&lt;p&gt;Running the configuration worked for me at this point, resulting in a build versioned &lt;code&gt;0.1.0+21&lt;/code&gt; (there were 22 commits, so that’s 21 commits since version &lt;code&gt;0.0.0&lt;/code&gt;). If you get an error about not being able to find &lt;code&gt;GitVersion&lt;/code&gt; or &lt;code&gt;git.exe&lt;/code&gt; make sure the build agent has rebooted and that GitVersion and Git are on the path.&lt;/p&gt;

&lt;p&gt;Next you can add a step to run tests. I’m using xUnit. This is just a &lt;em&gt;Command Line&lt;/em&gt; runner with the following custom script:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;packages\xunit.runner.console.2.0.0\tools\xunit.console.exe src\YOUR_PROJECT.Tests\bin\Release\YOUR_PROJECT.Tests.dll
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;releasing-to-nuget&quot;&gt;Releasing to NuGet&lt;/h2&gt;

&lt;p&gt;First you need to add a &lt;code&gt;nuspec&lt;/code&gt; file alongside the library being released (add it to the project in Visual Studio) and push it up so TeamCity can see it. For example, &lt;code&gt;.\src\frankenwiki\Frankenwiki.nuspec&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&amp;gt; 
&amp;lt;package&amp;gt; 
	&amp;lt;metadata&amp;gt; 
		&amp;lt;id&amp;gt;frankenwiki&amp;lt;/id&amp;gt; 
		&amp;lt;title&amp;gt;Frankenwiki&amp;lt;/title&amp;gt;
		&amp;lt;version&amp;gt;0.0.0&amp;lt;/version&amp;gt; 
		&amp;lt;authors&amp;gt;Ben Scott&amp;lt;/authors&amp;gt;
		&amp;lt;description&amp;gt;Markdown based statically generated wiki engine&amp;lt;/description&amp;gt; 
		&amp;lt;language&amp;gt;en-US&amp;lt;/language&amp;gt;
		&amp;lt;licenseUrl&amp;gt;https://github.com/frankenwiki/frankenwiki/blob/master/LICENSE.md&amp;lt;/licenseUrl&amp;gt;
		&amp;lt;releaseNotes&amp;gt;https://github.com/frankenwiki/frankenwiki/releases&amp;lt;/releaseNotes&amp;gt;
		&amp;lt;projectUrl&amp;gt;http://frankenwiki.com&amp;lt;/projectUrl&amp;gt;
	&amp;lt;/metadata&amp;gt;
	&amp;lt;files&amp;gt;
		&amp;lt;file src=&quot;bin\release\Frankenwiki.dll&quot; target=&quot;lib\net451&quot;/&amp;gt;
	&amp;lt;/files&amp;gt;
&amp;lt;/package&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The easiest way to generate the NuGet package (&lt;code&gt;.nupkg&lt;/code&gt;) seems to be &lt;a href=&quot;http://docs.octopusdeploy.com/display/OD/Using+OctoPack&quot;&gt;Octopack&lt;/a&gt;. Install Octopack to the library being released and push the changes up to the repository. Now edit the CI configuration and in the &lt;em&gt;Visual Studio (sln)&lt;/em&gt; step  (the actual build step) show the advanced options and add this to the &lt;em&gt;Command line parameters&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/p:RunOctoPack=true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now when a build happens, OctoPack will create the &lt;code&gt;.nupkg&lt;/code&gt; file named something like &lt;code&gt;Frankenwiki.0.1.0.nupkg&lt;/code&gt;. This package gets consumed in the next step. Trigger a build now to make sure everything works and the package is created as an artifact.&lt;/p&gt;

&lt;p&gt;Create a new build configuration called &lt;em&gt;Release&lt;/em&gt; or &lt;em&gt;Promote&lt;/em&gt; or &lt;em&gt;Fly, my pretties, ah hahahaha!&lt;/em&gt;:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Attach it to the existing VCS root created above&lt;/li&gt;
  &lt;li&gt;Don’t use any of the detected build steps, just &lt;em&gt;configure build steps manually&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;Pick &lt;em&gt;NuGet Publish&lt;/em&gt; as the runner type&lt;/li&gt;
  &lt;li&gt;In &lt;em&gt;Packages&lt;/em&gt;, use a wildcard to specify the &lt;code&gt;.nupkg&lt;/code&gt; file (so it is independent of the version). Eg. &lt;code&gt;Frankenwiki.*.nupkg&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Paste in your &lt;a href=&quot;http://docs.nuget.org/Create/creating-and-publishing-a-package#publishing-using-nuget-command-line&quot;&gt;NuGet API key&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Save&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The last few steps are directly based on &lt;a href=&quot;http://jake.ginnivan.net/blog/2014/07/09/my-typical-teamcity-build-setup/&quot;&gt;Jake’s post&lt;/a&gt;. Go to &lt;em&gt;Build Features&lt;/em&gt; to set up labelling:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;em&gt;Add build feature&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;Select &lt;em&gt;VCS Labelling&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;Select the existing VCS root&lt;/li&gt;
  &lt;li&gt;The default labelling pattern is &lt;code&gt;build-%system.build.number%&lt;/code&gt;. Take out the &lt;code&gt;build-&lt;/code&gt; part so it is just &lt;code&gt;%system.build.number%&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Save&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now go to &lt;em&gt;Dependencies&lt;/em&gt; to set up the build chain:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Add a new snapshot dependency&lt;/li&gt;
  &lt;li&gt;Pick the CI build configuration and any other configurations that run before the Release configuration&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Do not run new build if there is a suitable one&lt;/em&gt; and &lt;em&gt;Only use successful builds from suitable ones&lt;/em&gt; should both be ticked, if they aren’t then tick them&lt;/li&gt;
  &lt;li&gt;Save&lt;/li&gt;
  &lt;li&gt;Add a new artifact dependency&lt;/li&gt;
  &lt;li&gt;Change &lt;em&gt;Get artifacts from&lt;/em&gt; to &lt;em&gt;Build from the same chain&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;In &lt;em&gt;Artifacts rules&lt;/em&gt; use the same wildcard specification as above to select the &lt;code&gt;.nupkg&lt;/code&gt; file&lt;/li&gt;
  &lt;li&gt;Check &lt;em&gt;Clean destination paths before downloading artifacts&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;Save&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Go to &lt;em&gt;General Settings&lt;/em&gt; and show advanced options. Change the &lt;em&gt;Build number format&lt;/em&gt; to the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;%dep.MyProject_Ci.build.number%
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;where &lt;code&gt;MyProject_Ci&lt;/code&gt; is the build configuration ID of the CI step. Once you type in &lt;code&gt;%dep&lt;/code&gt; it will suggest the available configurations.&lt;/p&gt;

&lt;p&gt;Now you should be able to trigger a Release, which should successfully publish the package to NuGet! If everything works.&lt;/p&gt;

&lt;h2 id=&quot;tell-teamcity-to-build-feature-branches-and-tags&quot;&gt;Tell TeamCity to build feature branches and tags&lt;/h2&gt;

&lt;p&gt;TeamCity can build feature branches and tags. This lets GitVersion version feature branches to reduce surprises.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;In &lt;em&gt;Project Settings&lt;/em&gt; select &lt;em&gt;VCS Roots&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;Select the single VCS root created above&lt;/li&gt;
  &lt;li&gt;Make sure the advanced options are visible&lt;/li&gt;
  &lt;li&gt;In &lt;em&gt;Branch specification&lt;/em&gt;, enter &lt;code&gt;+:refs/heads/*&lt;/code&gt; (&lt;a href=&quot;https://confluence.jetbrains.com/display/TCD8/Working+with+Feature+Branches&quot;&gt;Working with Feature Branches&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Check &lt;em&gt;Enable to use tags in the branch specification&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;Save&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;using-gitversion&quot;&gt;Using GitVersion&lt;/h2&gt;

&lt;p&gt;Jake’s post about &lt;a href=&quot;http://jake.ginnivan.net/blog/2014/05/25/simple-versioning-and-release-notes/&quot;&gt;Simple Versioning and Release Notes&lt;/a&gt; has some great info about changing the version but a good one seems to be using a feature branching strategy.&lt;/p&gt;

&lt;p&gt;Push a branch with the new version number in the name. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git checkout -b version-0.3.0
git commit ...
git push
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that just pushing the branch won’t trigger the branch build, there needs to be a non-empty commit.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/SGxLhKx.png&quot; alt=&quot;Feature branches building in TeamCity&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can see that TeamCity has built a new release from the feature branch and GitVersion has versioned it at &lt;code&gt;0.3.0-beta.1+4&lt;/code&gt;. Subsequent commits to this feature branch will increment the build number (eg. &lt;code&gt;0.3.0-beta.1+5&lt;/code&gt;). When the feature branch is merged into master, the master version will become &lt;code&gt;0.3.0&lt;/code&gt; and you can just manually run the Release configuration to deploy to NuGet.&lt;/p&gt;

&lt;h2 id=&quot;extra-tricks-and-gotchas&quot;&gt;Extra tricks and gotchas&lt;/h2&gt;

&lt;h3 id=&quot;commits-with-number-can-have-unexpected-results&quot;&gt;Commits with number can have unexpected results&lt;/h3&gt;

&lt;p&gt;Don’t add a branch or a commit with a version number in it unless you expect it to bump the version number. I merged a branch called &lt;code&gt;change-to-dotnet-4.5.1&lt;/code&gt; which GitVersion helpfully interpreted as a version bump to &lt;code&gt;4.5.1&lt;/code&gt;. I had to fix this by rewriting the commit comments to say &lt;code&gt;4dot5dot1&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;check-the-versioning-scheme&quot;&gt;Check the versioning scheme&lt;/h3&gt;

&lt;p&gt;If GitVersion report a particular version but Octopack generates nuspec files with a different version, check in the &lt;code&gt;AssemblyInfo.cs&lt;/code&gt; file for a different version in the &lt;code&gt;AssemblyVersion&lt;/code&gt; and &lt;code&gt;AssemblyFileVersion&lt;/code&gt; attributes. This can be due to the versioning scheme, which can be set using the &lt;code&gt;/assemblyVersionFormat&lt;/code&gt; parameter as above (or in &lt;code&gt;GitVersionConfig.yaml&lt;/code&gt; once it is supported by GitVersion).&lt;/p&gt;

</description>
				<pubDate>Thu, 25 Jun 2015 00:00:00 +1000</pubDate>
				<link>http://bendetat.com/setting-up-teamcity-and-gitversion-for-an-open-source-project.html</link>
				<guid isPermaLink="true">http://bendetat.com/setting-up-teamcity-and-gitversion-for-an-open-source-project.html</guid>
			</item>
		
			<item>
				<author>Ben Scott - ben.scott@readify.net</author>
				<title>A short, executable rant on why I dislike object initialization syntax</title>
				<description>&lt;pre&gt;&lt;code&gt;void Main()
{
	// Why I ~~Hate~ Dislike Object Initialization Syntax
	// (executable in LinqPad)
	
	// There are three reasons why I despise initialization syntax for all but the most trivial
	// applications. The first two are fairly common and obvious:

	// 1. By design, a class built for object initialization syntax has to have public setters,
	// meaning that the resulting object is mutable.

	// 2. Because a constructor isn't used, there is no way for business rules or domain
	// invariants to be enforced. It is trivial to miss a value or set a value to something
	// that breaks a business rule, which can be difficult and annoying to debug and prevent.

	// The third reason is a bit less common and seems to defy expectations. It involves using
	// array initialization syntax inside of an object initializer.
	
	// This throws a null reference exception:
	
	//var brokens = new Brokens { Ints = { 1, 2, 3 } };
	
	// This is because Ints isn't initialised, and array initialization syntax is just 
	// syntactic sugar for foo.Add(1). You can see this if you try to declare your collection
	// as a straight-up array:
	
	//var brokensWithArray = new BrokensWithArray { Ints = { 1,2,3 } };
	// Build error: Cannot initialize object of type 'int[]' with a collection initializer
	
	// To get the same syntax to work, the class must initialize Ints in the
	// default constructor (a non-default constructor won't work):
	
	var works = new Works { Ints = { 1, 2, 3 } };
	
	// But as far as the consumer is concerned, Brokens and Works are equivalent (they have
	// matching public interfaces). This means hours of fun debugging!
	
	// This syntax also works, by initializing the list before adding the values:
	
	var worksUsingBrokens = new Brokens { Ints = new List&amp;lt;int&amp;gt;() { 1, 2, 3 } };
	
	// This also works with a struct:
	
	var brokensStruct = new BrokensStruct { Ints = new List&amp;lt;int&amp;gt;() { 1, 2, 3 } };
	
	// But since structs can't have parameterless public constructors, they can never use
	// the simpler object initialization syntax:
	
	//struct WorksStruct {
	//	public List&amp;lt;int&amp;gt; Ints { get; set; }
	//	public WorksStruct() {
	//		Ints = new List&amp;lt;int&amp;gt;();
	//	}
	//}
	// Build error: Structs cannot contain explicit parameterless constructors

	// The moral of the story: In C#, prefer using an explicit, parameterised constructor
	// over object initialization syntax. If you need a default constructor (eg. for
	// serialization), mark it with [Obsolete] to indicate your deep dissatifaction with
	// the code you have been forced to write.
}

// Define other methods and classes here
class Brokens {
	public List&amp;lt;int&amp;gt; Ints { get; set; }
}

class Works {
	public List&amp;lt;int&amp;gt; Ints { get; set; }
	
	public Works() {
		Ints = new List&amp;lt;int&amp;gt;();
	}
}

class BrokensWithArray {
	public int[] Ints { get; set; }
}

struct BrokensStruct {
	public List&amp;lt;int&amp;gt; Ints { get; set; }
}
&lt;/code&gt;&lt;/pre&gt;
</description>
				<pubDate>Fri, 22 May 2015 00:00:00 +1000</pubDate>
				<link>http://bendetat.com/a-short-executable-rant-on-why-i-dislike-object-initialization-syntax.html</link>
				<guid isPermaLink="true">http://bendetat.com/a-short-executable-rant-on-why-i-dislike-object-initialization-syntax.html</guid>
			</item>
		
			<item>
				<author>Ben Scott - ben.scott@readify.net</author>
				<title>Simplicity - pattern matching in C#</title>
				<description>&lt;p&gt;&lt;em&gt;TL;DR;&lt;/em&gt; Check out my awesome new library for &lt;a href=&quot;https://www.nuget.org/packages/Simplicity&quot;&gt;pattern matching in C# - Simplicity&lt;/a&gt; (&lt;a href=&quot;https://github.com/bendetat/Simplicity&quot;&gt;GitHub&lt;/a&gt;) or just copy the contents of the &lt;a href=&quot;https://github.com/bendetat/Simplicity/blob/master/src/Simplicity/PatternMatching.cs&quot;&gt;single file&lt;/a&gt; into your project for near-instant gratification.&lt;/p&gt;

&lt;p&gt;Pattern matching is a method of transforming data in some way, similar to &lt;code&gt;map&lt;/code&gt; (&lt;code&gt;.Select()&lt;/code&gt; in LINQ) but closer to a &lt;code&gt;switch&lt;/code&gt; statement in structure. It is a first class language construct in many functional languages including F#:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let name = &quot;Ben&quot;

let result =
	match name with 
	| &quot;Fiona&quot; -&amp;gt; &quot;It's Fiona!&quot;
	| &quot;Ben&quot; -&amp;gt; &quot;it me!&quot;
	| &quot;Steve&quot; -&amp;gt; &quot;Steve you rascal!&quot;
	| _ -&amp;gt; &quot;I don't know this person&quot;
	
// result = &quot;it me!&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That’s as deep an explanation of pattern matching in F# you’re going to get from me at this point, but this is conceptually similar to this &lt;code&gt;switch&lt;/code&gt; construct in C#:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var name = &quot;Ben&quot;;
string result;

switch (name) {
	case &quot;Fiona&quot;:
		result =  &quot;It's Fiona!&quot;;
		break;
	case &quot;Ben&quot;:
		result = &quot;it me!&quot;;
		break;
	case &quot;Steve&quot;:
		result = &quot;Steve you rascal!&quot;;
		break;
	default:
		result = &quot;I don't know this person&quot;;
		break;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is of course pretty average to read, relies on &lt;code&gt;break&lt;/code&gt; for execution control, and isn’t ‘pure’ since &lt;code&gt;result&lt;/code&gt; is mutated during execution.&lt;/p&gt;

&lt;aside class=&quot;pull-right well&quot; style=&quot;width: 42ex&quot;&gt;
	&lt;p&gt;I also found a couple of extant libraries that provide similar (and possibly more) functionality:&lt;/p&gt;
	&lt;ul&gt;
		&lt;li&gt;&lt;a href=&quot;https://github.com/johansson/PatternMatching&quot;&gt;johansson/PatternMatching&lt;/a&gt;&lt;/li&gt;
		&lt;li&gt;&lt;a href=&quot;https://github.com/Patrickkk/FunctionalSharp&quot;&gt;Patrickkk/FunctionalSharp&lt;/a&gt;&lt;/li&gt;
	&lt;/ul&gt;
&lt;/aside&gt;

&lt;p&gt;When I found out about pattern matching I wanted to write code the same way in C#. I found a great &lt;a href=&quot;http://codebetter.com/matthewpodwysocki/2008/09/16/functional-c-pattern-matching/&quot;&gt;article by Matt Podwysocki&lt;/a&gt; and adapted and extended the code into a single-file library called &lt;a href=&quot;https://github.com/bendetat/Simplicity&quot;&gt;Simplicity&lt;/a&gt;. Install it &lt;a href=&quot;https://www.nuget.org/packages/Simplicity&quot;&gt;using NuGet&lt;/a&gt; (&lt;code&gt;install-package PatternMatching&lt;/code&gt;) or just &lt;a href=&quot;https://github.com/bendetat/Simplicity/blob/master/src/Simplicity/PatternMatching.cs&quot;&gt;copy the single file&lt;/a&gt; into your project.&lt;/p&gt;

&lt;p&gt;Now for the fun part. Here’s the above example using my library. It adds an generic extension method called &lt;code&gt;Match()&lt;/code&gt; which is the usual entry point. The match statement is built up using a fluent interface.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var name = &quot;Ben&quot;;
var result = name.Match()
	.With(x =&amp;gt; x == &quot;Fiona&quot;, &quot;It's Fiona!&quot;)
	.With(x =&amp;gt; x == &quot;Ben&quot;, &quot;Hey it's me!&quot;)
	.With(x =&amp;gt; x == &quot;Steve&quot;, &quot;Steve you rascal!&quot;)
	.Else(&quot;I don't know this person&quot;)
	.Do();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The result can be an action, taking the value as a parameter:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var name = &quot;George&quot;;
var result = name.Match()
	.With(x =&amp;gt; x == &quot;Fiona&quot;, &quot;It's Fiona!&quot;)
	.With(x =&amp;gt; x == &quot;Ben&quot;, x =&amp;gt; string.Format(&quot;Hey it's {0}!&quot;, x))
	.With(x =&amp;gt; x == &quot;Steve&quot;, &quot;Steve you rascal!&quot;)
	.Else(x =&amp;gt; string.Format(&quot;I don't know {0}&quot;, x))
	.Do();

// result = &quot;I don't know George&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;Else&lt;/code&gt; value is optional but if it falls through without matching and there’s no &lt;code&gt;Else&lt;/code&gt; value it throws an &lt;code&gt;IncompletePatternMatchException&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var name = &quot;Elton&quot;;
var result = name.Match()
	.With(x =&amp;gt; x == &quot;John&quot;, &quot;matched&quot;)
	.With(x =&amp;gt; x == &quot;Paul&quot;, &quot;matched&quot;)
	.Do();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;F# has a wicked type system that C# can’t match, but I can set the output type to dynamic:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var question = &quot;meaning of life&quot;;
var result = question.Match().WithOutputType&amp;lt;dynamic&amp;gt;()
    .With(x =&amp;gt; x.Contains(&quot;roads&quot;), &quot;Blowing in the wind&quot;)
    .With(x =&amp;gt; x.Contains(&quot;life&quot;), 42)
    .Else(&quot;Ask again later&quot;)
    .Do();

// result = (int)42
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;Do()&lt;/code&gt; call evaluates the patterns against the value being matched on, but there’s also an implicit cast operator to the output type that removes the need much of the time. When &lt;code&gt;total&lt;/code&gt; is calculated, the &lt;code&gt;gstRate&lt;/code&gt; match is implicitly cast to &lt;code&gt;decimal&lt;/code&gt; from the pattern match type, which is &lt;code&gt;PatternMatchOnValue&amp;lt;string, decimal&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var country = &quot;NZ&quot;;
var gstRate = country.Match()
	.With(&quot;AU&quot;, 0.1m)
	.With(&quot;NZ&quot;, 0.15m)
	.Else(0.0m);

var total = 2300.0m * (1.0m + gstRate);

// total = 2645.0m
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All of the examples up until now have used the &lt;code&gt;Match()&lt;/code&gt; generic extension method to apply the match statement to the value that gets called with &lt;code&gt;Match()&lt;/code&gt;. I’ve also implemented matching without an input value using the static &lt;code&gt;PatternMatch.Match()&lt;/code&gt; method. This lets you write a match statement that can do things like match on different values or methods, or close over a local value as below:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var eggs = 2;
var basket = PatternMatch.Match()
	.With(() =&amp;gt; eggs == 0, &quot;No eggs&quot;)
	.With(() =&amp;gt; eggs == 1, &quot;One egg&quot;)
	.With(() =&amp;gt; eggs &amp;gt; 1, string.Format(&quot;{0} eggs&quot;, eggs))
	.Else(&quot;Invalid number of eggs&quot;);

var twoEggs = basket.Do();
eggs = 0;
var zeroEggs = basket.Do();
eggs = int.MinValue;
var invalidEggs = basket.Do();

// twoEggs = &quot;2 eggs&quot;
// zeroEggs = &quot;No eggs&quot;
// invalidEggs = &quot;Invalid number of eggs&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There’s also a &lt;code&gt;.ToFunc()&lt;/code&gt; method that gets rid of the &lt;code&gt;.Do()&lt;/code&gt; call by transforming the match statement into a &lt;code&gt;Func&amp;lt;TOut&amp;gt;&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var footwear = &quot;boots&quot;;
var intention = PatternMatch.Match()
	.With(() =&amp;gt; footwear == &quot;red slippers&quot;, &quot;following the Yellow Brick Road&quot;)
	.With(() =&amp;gt; footwear == &quot;boots&quot;, &quot;walking&quot;)
	.With(() =&amp;gt; footwear == &quot;these shoes&quot;, &quot;I don't think so&quot;)
	.ToFunc();

var walking = intention();
footwear = &quot;these shoes&quot;;
var noWayJose = intention();

// walking = &quot;walking&quot;
// noWayJose = &quot;I don't think so&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is getting quite DRY but closing over a local mutable value will have the purists climbing the walls, myself included. So the final form goes back to processing an input, deferred until the match statement is executed. The syntax is a little verbose because C# can’t infer the types of the lambdas without help, but I’m pretty happy with the result - a reusable &lt;code&gt;Func&amp;lt;TIn, TOut&amp;gt;&lt;/code&gt; value that is defined declaratively with no flow control or mutated state:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var processName = PatternMatch.Match&amp;lt;string, string&amp;gt;()
	.With(x =&amp;gt; x.StartsWith(&quot;A&quot;), &quot;Starts with A&quot;)
	.With(x =&amp;gt; x.StartsWith(&quot;B&quot;), &quot;Starts with B&quot;)
	.With(x =&amp;gt; x.StartsWith(&quot;C&quot;), &quot;Starts with C&quot;)
	.With(x =&amp;gt; x.StartsWith(&quot;D&quot;), &quot;Starts with D&quot;)
	.With(x =&amp;gt; x.StartsWith(&quot;E&quot;), &quot;Starts with E&quot;)
	.With(x =&amp;gt; x.StartsWith(&quot;F&quot;), x =&amp;gt; string.Format(&quot;{0} starts with F&quot;, x))
	.Else(&quot;Unknown&quot;)
	.ToFunc();
	
var alfred = processName(&quot;Alfred&quot;);
var fiona = processName(&quot;Fiona&quot;);
var ben = processName(&quot;Ben&quot;);
var xerces = processName(&quot;Xerces&quot;);

// alfred = &quot;Starts with A&quot;
// fiona = &quot;Fiona starts with F&quot;
// ben = &quot;Starts with B&quot;
// xerces = &quot;Unknown&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that this isn’t especially performant! The match statement is built up as a list of expressions that are then looped through naively when evaluated. This could probably be improved using some form of caching. &lt;a href=&quot;https://github.com/bendetat/Simplicity&quot;&gt;Submit a pull request!&lt;/a&gt;&lt;/p&gt;
</description>
				<pubDate>Fri, 15 May 2015 00:00:00 +1000</pubDate>
				<link>http://bendetat.com/simplicity-pattern-matching-in-c-sharp.html</link>
				<guid isPermaLink="true">http://bendetat.com/simplicity-pattern-matching-in-c-sharp.html</guid>
			</item>
		
			<item>
				<author>Ben Scott - ben.scott@readify.net</author>
				<title>Class and method invariants and validation</title>
				<description>&lt;p&gt;I was chatting to my man &lt;a href=&quot;https://twitter.com/todthomson&quot;&gt;Tod&lt;/a&gt; and we came up with a cool pattern for validating both class and method invariants in a way that seems to scale.&lt;/p&gt;

&lt;p&gt;Given a simple class &lt;code&gt;Person&lt;/code&gt;, with some methods for updating from another &lt;code&gt;Person&lt;/code&gt; and updating just the name:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class Person
{
	public string Name { get; private set; }
	private int _age;

	public Person(string name, int age)
	{
		Name = name;
		_age = age;
	}

	public void UpdateFrom(Person person)
	{
		Name = person.Name;
		_age = person._age;
	}

	public void UpdateName(string name)
	{
		Name = name;
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The private &lt;code&gt;_age&lt;/code&gt; is just to demonstrate a private field.&lt;/p&gt;

&lt;p&gt;First add some validation on the constructor. I’m using my &lt;a href=&quot;https://github.com/bendetat/check&quot;&gt;Check&lt;/a&gt; library but this could be implemented in any way that throws an exception if the rule isn’t set.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public Person(string name, int age)
{
	// method invariants
	Check.That(() =&amp;gt; name).IsNotNullOrEmpty();
	Check.That(() =&amp;gt; age &amp;gt;= 0);

	Name = name;
	_age = age;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is what I’m calling a &lt;em&gt;method invariant&lt;/em&gt; - a set of rules that validate the input to a method.&lt;/p&gt;

&lt;p&gt;We also want to validate the state of a person at the end of the method.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;static void Validate(Person person)
{
	Check.That(() =&amp;gt; person.Name).IsNotNullOrEmpty();
	Check.That(() =&amp;gt; person._ge &amp;gt;= 0);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This should happen at the end of each method that changes the state of the person. For example, the constructor becomes:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public Person(string name, int age)
{
	// method invariants
	Check.That(() =&amp;gt; name).IsNotNullOrEmpty();
	Check.That(() =&amp;gt; age &amp;gt;= 0);

	Name = name;
	_age = age;

	// validate myself
	Validate(this);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;UpdateName()&lt;/code&gt; method needs to do the same thing:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public void UpdateName(string name)
{
	Check.That(() =&amp;gt; name).IsNotNullOrEmpty();

	Name = name;

	Validate(this);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;UpdateFrom()&lt;/code&gt; method can validate the entire incoming person:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public void UpdateFrom(Person person)
{
	Validate(person);

	Name = person.Name;
	_age = person._age;

	Validate(this);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Shweet.&lt;/p&gt;
</description>
				<pubDate>Tue, 24 Feb 2015 00:00:00 +1000</pubDate>
				<link>http://bendetat.com/class-and-method-invariants-and-validation.html</link>
				<guid isPermaLink="true">http://bendetat.com/class-and-method-invariants-and-validation.html</guid>
			</item>
		
			<item>
				<author>Ben Scott - ben.scott@readify.net</author>
				<title>Karma and Mocha for AngularJS testing</title>
				<description>&lt;h2 id=&quot;setting-up-karma-with-mocha-phantomjs-and-chai&quot;&gt;Setting up Karma with Mocha, PhantomJS and Chai&lt;/h2&gt;

&lt;p&gt;I’m following the &lt;a href=&quot;http://karma-runner.github.io/0.12/intro/installation.html&quot;&gt;installation guide&lt;/a&gt; at &lt;a href=&quot;http://karma-runner.github.io&quot;&gt;karma-runner.github.io&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I already have Node.js and NPM installed so I won’t go through the process for that, but I’ve found the easiest way to get running is via &lt;a href=&quot;https://chocolatey.org/packages/nodejs.install&quot;&gt;Chocolatey NuGet&lt;/a&gt; using &lt;code&gt;choco install nodejs.install&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;First up, install Karma:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install --save-dev karma
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now install some plugins for Karma. The installation instructions are for Jasmine and the Chrome launcher, but I want &lt;a href=&quot;http://mochajs.org/&quot;&gt;Mocha&lt;/a&gt; as the testing framework and &lt;a href=&quot;http://phantomjs.org/&quot;&gt;PhantomJS&lt;/a&gt; for a headless (window-less) test environment.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;Huh? I thought Karma was the test environment&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Karma is a test &lt;em&gt;runner&lt;/em&gt;. Much like how NUnit has a test runner .exe which can run test assemblies that use the NUnit test framework assemblies. In this case the test runner can run tests based on different test frameworks - in this case. Mocha. Because I’m setting up tests for client-side JavaScript - in particular, I’m going to use AngularJS - the tests need to be run inside a browser environment so that there is a usable DOM. PhantomJS is a WebKit based headless browser that will allow tests to run without opening a browser window.&lt;/p&gt;

&lt;p&gt;So now the Karma plugins for Mocha and PhantomJS need to be installed. The plugins have Mocha and PhantomJS as dependencies, so only the plugins need to be installed. I also want to use &lt;a href=&quot;http://chaijs.com/&quot;&gt;Chai&lt;/a&gt; as the assertion library.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install --save-dev karma-mocha
npm install --save-dev karma-phantomjs-launcher
npm install --save-dev karma-chai
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To make it easier to run &lt;code&gt;karma&lt;/code&gt; from the command line you can install &lt;code&gt;karma-cli&lt;/code&gt; globally, which will run the local version without having to specify the path to karma (&lt;code&gt;node node_modules/karma/bin/karma&lt;/code&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install -g karma-cli
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Karma needs a configuration file. Generate it using &lt;code&gt;karma init&lt;/code&gt; and answer the questions. For this demo all of my code is going to live in &lt;code&gt;./source-and-tests&lt;/code&gt;. If I were using a Gulp build chain this would probably need to be tweaked.&lt;/p&gt;

&lt;dl&gt;
  &lt;dt&gt;Which testing framework do you want to use ?&lt;/dt&gt;
  &lt;dd&gt;&lt;code&gt;mocha&lt;/code&gt;&lt;/dd&gt;
  &lt;dt&gt;Do you want to use Require.js ?&lt;/dt&gt;
  &lt;dd&gt;&lt;code&gt;no&lt;/code&gt;&lt;/dd&gt;
  &lt;dt&gt;Do you want to capture any browsers automatically ?&lt;/dt&gt;
  &lt;dd&gt;&lt;code&gt;PhantomJS&lt;/code&gt;&lt;/dd&gt;
  &lt;dt&gt;What is the location of your source and test files ?&lt;/dt&gt;
  &lt;dd&gt;&lt;code&gt;source-and-tests/**/*.js&lt;/code&gt;&lt;/dd&gt;
  &lt;dt&gt;Should any of the files included by the previous patterns be excluded ?&lt;/dt&gt;
  &lt;dd&gt;&lt;em&gt;leave blank&lt;/em&gt;&lt;/dd&gt;
  &lt;dt&gt;Do you want Karma to watch all the files and run the tests on change ?&lt;/dt&gt;
  &lt;dd&gt;&lt;code&gt;yes&lt;/code&gt;&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;This generates a file called &lt;code&gt;karma-conf.js&lt;/code&gt;, which configures Karma for a test run. You can have multiple configuration files pointing to different test suites or browser configurations, which can be run by specifying the name of the configuration file (&lt;code&gt;karma start my.conf.ks&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;To get Chai included in the test pipeline, we need to edit &lt;code&gt;karma-conf.js&lt;/code&gt; and add it to the &lt;code&gt;frameworks&lt;/code&gt; setting:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;frameworks: ['mocha', 'chai'],
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Running &lt;code&gt;karma start&lt;/code&gt; will execute the default &lt;code&gt;karma-conf.js&lt;/code&gt; (or &lt;code&gt;karma-conf.coffee&lt;/code&gt;). First we need a test to run. In &lt;code&gt;./source-and-tests/&lt;/code&gt; I created &lt;code&gt;array-tests.js&lt;/code&gt; which just contains the &lt;a href=&quot;http://mochajs.org/#synchronous-code&quot;&gt;first example&lt;/a&gt; from Mocha’s documentation.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;describe('Array', function(){
  describe('#indexOf()', function(){
    it('should return -1 when the value is not present', function(){
      assert.equal(-1, [1,2,3].indexOf(5));
      assert.equal(-1, [1,2,3].indexOf(0));
    })
  })
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Running &lt;code&gt;karma start&lt;/code&gt; should find and run this test, then watch for changes to the watched files and repeating.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/cwTVVjT.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;adding-angularjs-to-the-mix&quot;&gt;Adding AngularJS to the mix&lt;/h2&gt;

&lt;p&gt;I’ll use Bower to install AngularJS.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install --save-dev bower 
npm install -g bower
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This installs Bower to &lt;code&gt;./node_modules/bower&lt;/code&gt;, then installs it globally. Now we need to create a configuration file for Bower:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;bower init
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can just &lt;kbd&gt;enter&lt;/kbd&gt; through the configuration, accepting all the defaults. This creates a &lt;code&gt;bower.json&lt;/code&gt; file, which will save the dependencies added by Bower. Now use Bower to install AngularJS and angular-mocks:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;bower install --save angular
bower install --save angular-mocks
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This installs AngularJS to &lt;code&gt;./bower_components/angular&lt;/code&gt; and angular-mocks to &lt;code&gt;./bower_components/angular-mocks&lt;/code&gt;. The angular-mocks package gives us methods to resolve our application’s components and create mocks of AngularJS services.&lt;/p&gt;

&lt;p&gt;I’m not going through how to integrate AngularJS an actual website as there are a number of techniques ranging from ASP.NET MVC bundling and minification to more advanced build chains such as Gulp or Grunt. Instead I’ll just show how to include AngularJS in the test suite, create a simple controller, and write a test against a property exposed by the controller.&lt;/p&gt;

&lt;p&gt;To include AngularJS and angular-mocks in Karma’s test run, edit the &lt;code&gt;files&lt;/code&gt; config setting in &lt;code&gt;karma.conf.js&lt;/code&gt;. Any future dependencies for the codebase and tests will need to be added here too, unless they are imported in some other way.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;files: [
	'bower_components/angular/angular.js',
	'bower_components/angular-mocks/angular-mocks.js',
	'source-and-tests/**/*.js'
],
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The controller to test is very simple at this stage (&lt;code&gt;MyController.js&lt;/code&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(function(){
	angular.module('my-module', []);

	angular
		.module('my-module')
		.controller('MyController', [
			function(){
				var self = this;

				self.firstName = '';
				self.lastName = '';

				self.getFullName = function(){
					return self.firstName + ' ' + self.lastName;
				};

				return self;
			}
	]);
})();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This creates a module called &lt;code&gt;my-module&lt;/code&gt; and creates a controller called &lt;code&gt;MyController&lt;/code&gt; that exposes &lt;code&gt;firstName&lt;/code&gt;, &lt;code&gt;lastName&lt;/code&gt; and &lt;code&gt;getFullName()&lt;/code&gt;. I want to test the result of &lt;code&gt;getFullName()&lt;/code&gt; (&lt;code&gt;MyControllerTests.js&lt;/code&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;describe('MyController', function(){
	beforeEach(module('my-module'));

	describe('getFullName()', function(){
		it('should handle names correctly', inject(function($controller){
			var myController = $controller('MyController');

			myController.firstName = 'George';
			myController.lastName = 'Harrison';

			myController.getFullName().should.equal('George Harrison');
		}));
	});
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This does some interesting things.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;beforeEach(module('my-module'));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This loads the &lt;code&gt;my-module&lt;/code&gt; module before each test in the &lt;code&gt;MyController&lt;/code&gt; suite.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;it('should handle names correctly', inject(function($controller){
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This injects &lt;code&gt;$controller&lt;/code&gt; into the test. &lt;code&gt;$controller&lt;/code&gt; allows resolving registered controllers.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var myController = $controller('MyController');
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This resolves an instance of the &lt;code&gt;MyController&lt;/code&gt; controller. The instance is then used as the test subject.&lt;/p&gt;

&lt;h2 id=&quot;scope-injection&quot;&gt;$scope injection&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;$scope&lt;/code&gt; that gets injected in to an Angular controller is just a JS object. I’ll assign a value and a method to &lt;code&gt;$scope&lt;/code&gt; for another test. The controller declaration changes to this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;angular
	.module('my-module')
	.controller('MyController', [
		'$scope',
		function($scope){
			var self = this;

			// ...

			$scope.songs = [
				'Here Comes The Sun'
			];

			$scope.addSong = function(song) {
				$scope.songs.push(song);
			};

			return self;
		}
]);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The existing test can just pass in an empty object to the controller resolution:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var myController = $controller('MyController', {
	$scope: {}
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now the new test can inject, use and inspect a mock scope:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;describe('addSong()', function(){
	it('should add songs', inject(function($controller) {
		var scope = {};
		var myController = $controller('MyController', {
			$scope: scope
		});

		scope.addSong('While My Guitar Gently Weeps');

		scope.songs.should.contain('While My Guitar Gently Weeps');
	}));
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;injecting-and-mocking-http&quot;&gt;Injecting and mocking $http&lt;/h2&gt;

&lt;p&gt;So now I’ve got a web service that I call to populate something on &lt;code&gt;$scope&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;angular
	.module('my-module')
	.controller('MyController', [
		'$scope', '$http',
		function($scope, $http){
			var self = this;

			// ...

			$scope.instruments = ['foo'];

			$http.get('api/get-instruments')
				.success(function(data) {
					$scope.instruments = data;
				});

			return self;
		}
]);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;a href=&quot;https://docs.angularjs.org/api/ngMock/service/$httpBackend&quot;&gt;&lt;code&gt;$httpBackend&lt;/code&gt;&lt;/a&gt; is an &lt;code&gt;angular-mocks&lt;/code&gt; service that fakes the &lt;code&gt;$http&lt;/code&gt; service:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;describe('get-instruments result', function(){
	it('should be added to scope', inject(function($controller, $httpBackend){
		var scope = {};
		$httpBackend
			.when('GET', 'api/get-instruments')
			.respond([
				'vocals', 'guitar', 'sitar'
			]);
		var myController = $controller('MyController', {
			$scope: scope
		});

		$httpBackend.flush();

		scope.instruments.should.contain('guitar');
	}));
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;$httpBackend.flush()&lt;/code&gt; simulates the async calls completing, so they can be tested synchronously.&lt;/p&gt;

&lt;h2 id=&quot;simulating-http-errors&quot;&gt;Simulating $http errors&lt;/h2&gt;

&lt;p&gt;If the call to &lt;code&gt;api/get-instruments&lt;/code&gt; fails, I want to set a status to ‘ERROR’:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$scope.instruments = ['foo'];
$scope.status = '';

$http.get('api/get-instruments')
	.success(function(data) {
		$scope.instruments = data;
	})
	.error(function(e) {
		$scope.status = 'ERROR';
	});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To simulate the error, you can just tell the &lt;code&gt;$httpBackend&lt;/code&gt; to respond with an error code (500):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;describe('get-instruments with error', function(){
	it('should have a status with error', inject(function($controller, $httpBackend){
		var scope = {};
		$httpBackend
			.when('GET', 'api/get-instruments')
			.respond(500, '');
		var myController = $controller('MyController', {
			$scope: scope
		});

		$httpBackend.flush();

		scope.status.should.equal('ERROR');
	}));
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;here-is-a-cat-doing-some-tdd&quot;&gt;Here is a cat doing some TDD&lt;/h2&gt;

&lt;p&gt;Please imagine that this cat is really stoked about now being able to test front-end JavaScript.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://bendetat.com/images/tdd-cat.jpg&quot; alt=&quot;Source: http://www.aaamovies.com/Pictures%5CTestCatProfilePicture.jpg&quot; /&gt;&lt;/p&gt;

</description>
				<pubDate>Sat, 21 Feb 2015 00:00:00 +1000</pubDate>
				<link>http://bendetat.com/karma-and-mocha-for-angular-testing.html</link>
				<guid isPermaLink="true">http://bendetat.com/karma-and-mocha-for-angular-testing.html</guid>
			</item>
		
	</channel>
</rss>