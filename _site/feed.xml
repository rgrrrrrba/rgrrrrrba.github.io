<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Ben d&#39;état - Ben Scott&#39;s blog</title>
		<description></description>		
		<link>http://bendetat.com</link>
		<atom:link href="http://bendetat.com/feed.xml" rel="self" type="application/rss+xml" />
		
			<item>
				<title>A useful build pipeline using Gulp and Bower</title>
				<description>&lt;p&gt;&lt;strong&gt;DISCLAIMER:&lt;/strong&gt; I’m learning in the open here. This is the first time I’ve used Gulp and Bower and I’m sure I’m missing a heap of really important stuff. Enjoy!&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Part 1: &lt;a href=&quot;http://bendetat.com/hello-world-its-gulp.html&quot;&gt;Hello World! It’s Gulp!&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Part 2: A useful build pipeline using Gulp and Bower&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Big thanks to my colleague &lt;a href=&quot;http://blog.gertjvr.com/&quot;&gt;Gert JvR&lt;/a&gt; whose &lt;a href=&quot;https://github.com/gertjvr/ng-template&quot;&gt;ng-template&lt;/a&gt; project I am deconstructing.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/bendetat/nancy-gulp-bower-angular-learnings/blob/8a723f7f95880974b15cbe054891a3db7e32e336/gulpfile-unclean.js&quot;&gt;&lt;code&gt;gulpfile.js&lt;/code&gt; as of this post&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/bendetat/nancy-gulp-bower-angular-learnings/blob/8a723f7f95880974b15cbe054891a3db7e32e336/gulpfile.js&quot;&gt;cleaned &lt;code&gt;gulpfile.js&lt;/code&gt;&lt;/a&gt; which I will use from here on&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;have-you-any-bootstrap&quot;&gt;Have you any Bootstrap?&lt;/h2&gt;

&lt;p&gt;I want to use Bootstrap, but…&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://cdn.meme.am/instances/500x/58510881.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Bower is a JavaScript package manager. So is NPM, in fact we’ll use NPM to install Bower. The difference is that NPM is designed as a server-side (or developer-side) package manager, whereas Bower is only a front-end (client-side) package manager. NPM &lt;a href=&quot;http://browserify.org&quot;&gt;can be used for client-side package management&lt;/a&gt; but hopefully it will be easier to manage the two scenarios independently by using the package manager designed for the task.&lt;/p&gt;

&lt;p&gt;Install Bower to the project using NPM:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install --save-dev bower
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now create &lt;code&gt;bower.json&lt;/code&gt; by running &lt;code&gt;bower init&lt;/code&gt; and following the instructions. Bower should not be ready to install Bootstrap:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;bower install bootstrap --save
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This installs all of Bootstrap (including the separate jQuery dependency) into &lt;code&gt;/bower_components&lt;/code&gt;. It also adds a reference to the dependency in &lt;code&gt;bower.json&lt;/code&gt; - if it doesn’t you may have forgotten the &lt;code&gt;--save&lt;/code&gt; argument.&lt;/p&gt;

&lt;p&gt;I then copied the &lt;a href=&quot;http://getbootstrap.com/getting-started/#template&quot;&gt;minimal Bootstrap HTML&lt;/a&gt; into &lt;code&gt;src/client/index.html&lt;/code&gt;. This won’t work because we’re not copying or linking in the CSS correctly.&lt;/p&gt;

&lt;h2 id=&quot;vendor-css&quot;&gt;Vendor CSS&lt;/h2&gt;

&lt;p&gt;There are two types of CSS - vendor and site-specific - and each will be handled slightly differently. Vendor CSS is anything that comes from a Bower package, and site-specific CSS will be anything in &lt;code&gt;/src/client/css&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I’ll start by adding a dependency task to the &lt;code&gt;rev-and-inject&lt;/code&gt; task:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gulp.task(&#39;rev-and-inject&#39;, [&#39;vendorcss&#39;], function() {
	// existing rev-and-inject task
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In my &lt;a href=&quot;hello-world-its-gulp.html&quot;&gt;last post&lt;/a&gt; I declared the &lt;code&gt;config&lt;/code&gt; object within &lt;code&gt;gulpfile.js&lt;/code&gt;. I immediately regret this decision and move it into its own file - &lt;code&gt;gulp-config.json&lt;/code&gt;. Now I need to explicitly add the CSS files that will be included in the site:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
	&quot;paths&quot;: {
		&quot;client&quot;: &quot;src/client/&quot;,
		&quot;server&quot;: &quot;src/server/&quot;,
		&quot;dist&quot;: &quot;src/client-dist&quot;,
		&quot;vendorcss&quot;: [
			&quot;bower_components/bootstrap/dist/css/bootstrap.css&quot;,
			&quot;bower_components/bootstrap/dist/css/bootstrap-theme.css&quot;
		]
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;config&lt;/code&gt; object is now initialised using &lt;code&gt;require()&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var config = require(&#39;./gulp-config.json&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we get to install some more dependencies!&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.npmjs.com/package/gulp-concat&quot;&gt;&lt;code&gt;gulp-concat&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install --save-dev gulp-concat
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;Concatenates files&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Pull in the &lt;code&gt;concat&lt;/code&gt; dependency at the top of &lt;code&gt;gulpfile.js&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var concat = require(&#39;gulp-concat&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now add the &lt;code&gt;vendorcss&lt;/code&gt; task:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gulp.task(&#39;vendorcss&#39;, function(){
return gulp
	// set source
	.src(config.paths.vendorcss)
	// write to vendor.min.css
	.pipe(concat(&#39;vendor.min.css&#39;))
	// write to dest
	.pipe(gulp.dest(config.paths.destination));
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This takes all of the vendor CSS files specified in &lt;code&gt;gulp-config.json&lt;/code&gt; and bundles them into &lt;code&gt;/src/site-dist/vendor.min.css&lt;/code&gt;. Very exciting but it hasn’t minified the CSS yet. Time for some more plugins:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.npmjs.com/package/gulp-bytediff&quot;&gt;&lt;code&gt;gulp-bytediff&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install --save-dev gulp-bytediff
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;Compare file sizes before and after your gulp build process.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;bytediff&lt;/code&gt; is just used to output the file size reduction from minification.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.npmjs.com/package/gulp-minify-css&quot;&gt;&lt;code&gt;gulp-minify-css&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install --save-dev gulp-minify-css
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;Minify css with clean-css.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Add the &lt;code&gt;bytediff&lt;/code&gt; and &lt;code&gt;minify-css&lt;/code&gt; dependencies at the top of &lt;code&gt;gulpfile.js&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var bytediff = require(&#39;gulp-bytediff&#39;);
var minifyCss = require(&#39;gulp-minify-css&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then add the minify and bytediff steps to the pipeline (in &lt;code&gt;gulp.task(&#39;vendorcss&#39;..&lt;/code&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;return gulp
	// set source
	.src(config.paths.vendorcss)
	// write to vendor.min.css
	.pipe(concat(&#39;vendor.min.css&#39;))

	// start tracking size
	.pipe(bytediff.start())
	// minify css
	.pipe(minifyCss())
	// stop tracking size and output it using bytediffFormatter
	.pipe(bytediff.stop(bytediffFormatter))

	// write to dest
	.pipe(gulp.dest(config.paths.destination));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;bytediff.stop(bytediffFormatter)&lt;/code&gt; uses a new function to format the file size difference. This function needs to be added:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function bytediffFormatter(data) {
	var formatPercent = function(num, precision) {
		return (num * 100).toFixed(precision);
	};
    var difference = (data.savings &amp;gt; 0) ? &#39; smaller.&#39; : &#39; larger.&#39;;
    
    return data.fileName + &#39; went from &#39; +
        (data.startSize / 1000).toFixed(2) + &#39; kB to &#39; + (data.endSize / 1000).toFixed(2) + &#39; kB&#39; +
        &#39; and is &#39; + formatPercent(1 - data.percent, 2) + &#39;%&#39; + difference;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now when I run &lt;code&gt;gulp build&lt;/code&gt; the CSS is minified:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[09:10:18] Starting &#39;vendorcss&#39;...
[gulp] [09:10:18] Compressing, bundling and copying vendor CSS
[09:10:18] vendor.min.css went from 164.02 kB to 135.50 kB and is 17.39% smaller.
[09:10:18] Finished &#39;vendorcss&#39; after 298 ms
[09:10:18] Starting &#39;rev-and-inject&#39;...
[09:10:18] Finished &#39;rev-and-inject&#39; after 5.79 ms
[09:10:18] Starting &#39;build&#39;...
[09:10:18] gulp-notify: [Gulp notification] Build complete
[09:10:18] Finished &#39;build&#39; after 48 ms
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;index.html&lt;/code&gt; now needs a reference to the minified CSS file. It could be hard-coded to &lt;code&gt;vendor.min.css&lt;/code&gt; but that is subject to change if the build script changes. So we need to &lt;em&gt;inject&lt;/em&gt; the path to the &lt;code&gt;vendor.min.css&lt;/code&gt; artifact directly into &lt;code&gt;index.html&lt;/code&gt; as it is being written.&lt;/p&gt;

&lt;p&gt;Install yet another plugin:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.npmjs.com/package/gulp-inject&quot;&gt;&lt;code&gt;gulp-inject&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install --save-dev gulp-inject
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;A javascript, stylesheet and webcomponent injection plugin for Gulp, i.e. inject file references into your index.html&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Add the new &lt;code&gt;inject&lt;/code&gt; dependency to the top of &lt;code&gt;gulpfile.js&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var inject = require(&#39;gulp-inject&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now in the &lt;code&gt;rev-and-inject&lt;/code&gt; task add a local method that wraps &lt;code&gt;inject()&lt;/code&gt; with some common options:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var localInject = function(pathGlob, name) {
	var options = {
		// Strip out the &#39;src/client-dist-app&#39; part from the path to vendor.min.css
		ignorePaths = config.paths.destination,
		// Don&#39;t read file being injected, just get the path
		read: false,
		// add a prefix to the injected path
		addPrefix: config.paths.buildPrefix
	};
};
&lt;/code&gt;&lt;/pre&gt;

&lt;aside&gt;The `read: false` option is interesting, if it is set to true you can use a transform to [inject the contents](https://www.npmjs.com/package/gulp-inject/#injecting-files-contents) of the file into the output.&lt;/aside&gt;

&lt;p&gt;There is a new &lt;code&gt;buildPrefix&lt;/code&gt; value in the config that needs to be added to &lt;code&gt;gulp-config.json&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
	&quot;paths&quot;: {
		// ...
		&quot;buildPrefix&quot;: &quot;app&quot;,
		// ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is needed because when the site will get hosted by Nancy, it will be available at &lt;code&gt;{yoursite}/app&lt;/code&gt;. So the injected path will be &lt;code&gt;/app/content/vendor.min.css&lt;/code&gt;. In a minute I’ll set up a static server using Node.js for testing the output.&lt;/p&gt;

&lt;p&gt;The inject step now needs to be added to the &lt;code&gt;rev-and-inject&lt;/code&gt; task pipeline:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gulp.task(&#39;rev-and-inject&#39;, [&#39;vendorcss&#39;], function() {
	var indexPath = path.join(config.paths.source, &#39;index.html&#39;);

	var localInject = //...

	return gulp
		.src([].concat(indexPath))

		// inject into inject-vendor:css
		.pipe(localInject(
			path.join(config.paths.destination, &#39;vendor.min.css&#39;),
			&#39;inject-vendor&#39;))

		.pipe(gulp.dest(config.paths.distribution))
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now in &lt;code&gt;/src/client/index.html&lt;/code&gt; we just need to replace the link to &lt;code&gt;bootstrap.min.css&lt;/code&gt; to the &lt;code&gt;inject-vendor:css&lt;/code&gt; placeholder:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;title&amp;gt;Bootstrap 101 Template&amp;lt;/title&amp;gt;

&amp;lt;!-- inject-vendor:css --&amp;gt;
&amp;lt;!-- endinject --&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, running &lt;code&gt;gulp build&lt;/code&gt; should inject the correct path into &lt;code&gt;/src/client-dist/index.html&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!-- inject-vendor:css --&amp;gt;
&amp;lt;link rel=&quot;stylesheet&quot; href=&quot;/app/vendor.min.css&quot;&amp;gt;
&amp;lt;!-- endinject --&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;use-nodejs-to-serve-the-static-website&quot;&gt;Use Node.js to serve the static website&lt;/h3&gt;

&lt;p&gt;At the moment the output is going to &lt;code&gt;/src/client-dist&lt;/code&gt;. When the site is eventually hosted on Nancy it will be served from &lt;code&gt;/app&lt;/code&gt;, so the injected paths currently all start with &lt;code&gt;/app&lt;/code&gt;, which means that the build output can’t be viewed properly yet. I’m going to set up a quick, static server to publish the site. More dependencies!&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.npmjs.com/package/connect&quot;&gt;&lt;code&gt;connect&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install --save-dev connect
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;High performance middleware framework&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;https://www.npmjs.com/package/serve-static&quot;&gt;&lt;code&gt;serve-static&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install --save-dev serve-static
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;Serve static files&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Add the new dependencies at the top of &lt;code&gt;gulpfile.js&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var connect = require(&#39;connect&#39;);
var serveStatic = require(&#39;serve-static&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now add a new task:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gulp.task(&#39;serve&#39;, function(){
	var sourcePath = path.join(__dirname, config.paths.destination);
	var port = 12857;
	var serveFromPath = &#39;/&#39; + config.paths.buildPrefix;

	log(&#39;Hosting &#39; + sourcePath + &#39; at http://localhost:&#39; + port + serveFromPath);

	connect()
		.use(serveFromPath, serveStatic(sourcePath))
		.listen(port);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now running &lt;code&gt;gulp serve&lt;/code&gt; will serve the static content from &lt;a href=&quot;http://localhost:12857/app&quot;&gt;http://localhost:12857/app&lt;/a&gt;. I can leave that running in one console while rebuilding in another.&lt;/p&gt;

&lt;p&gt;Interestingly, this way of serving a static site could probably be used all the way through to production, as the interaction with the server is all done on the client side via REST calls.&lt;/p&gt;

&lt;h2 id=&quot;site-specific-css&quot;&gt;Site-specific CSS&lt;/h2&gt;

&lt;p&gt;In &lt;code&gt;gulpfile.js&lt;/code&gt; add a new &lt;code&gt;css&lt;/code&gt; task:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gulp.task(&#39;css&#39;, function() {
	return gulp
		// set source (src/**/*.css)
		.src([path.join(config.paths.client, &#39;**/*.css&#39;)])
		// write to site.min.css
		.pipe(concat(&#39;site.min.css&#39;))
		// start tracking size
		.pipe(bytediff.start())
		// minify the css
		.pipe(minifyCss())
		// stop tracking size and output it
		.pipe(bytediff.stop(bytediffFormatter))
		// write to dest/content
		.pipe(gulp.dest(config.paths.destination));
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is getting a bit familiar. Instead of using a set of explicit tasks from &lt;code&gt;gulp-config.json&lt;/code&gt; I’ve just assumed that anything named &lt;code&gt;*.css&lt;/code&gt; anywhere in the client should be injected into the static site distribution. The concatenated, minified output gets written to &lt;code&gt;/src/client-dist/content/site.min.css&lt;/code&gt;. Now in the &lt;code&gt;rev-and-inject&lt;/code&gt; task the &lt;code&gt;css&lt;/code&gt; task needs to be added to the prerequisites:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gulp.task(&#39;rev-and-inject&#39;, [&#39;vendorcss&#39;, &#39;css&#39;], function(){
	// ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And the path to the new &lt;code&gt;site.min.css&lt;/code&gt; needs to be injected (this goes after the &lt;code&gt;inject-vendor:css&lt;/code&gt; injection):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// inject into inject:css
.pipe(localInject(config.paths.destination))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that there is no name placeholder used. This will inject into the default &lt;code&gt;inject:css&lt;/code&gt; placeholder, which needs to be added to &lt;code&gt;index.html&lt;/code&gt; after the existing &lt;code&gt;inject-vendor:css&lt;/code&gt; placeholder:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!-- inject:css --&amp;gt;
&amp;lt;!-- endinject --&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now if you add some CSS files to &lt;code&gt;/src/client&lt;/code&gt; they will be injected into &lt;code&gt;index.html&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;vendor-javascript&quot;&gt;Vendor JavaScript&lt;/h2&gt;

&lt;p&gt;One more dependency:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.npmjs.com/package/gulp-uglify&quot;&gt;&lt;code&gt;gulp-uglify&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install --save-dev gulp-uglify
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;Minify files with UglifyJS.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Vendor JS is configured the same way vendor CSS is, in &lt;code&gt;gulp-config.json&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	&quot;vendorcss&quot;: [
		// ...
	],
	&quot;vendorjs&quot;: [
		&quot;bower_components/jquery/dist/jquery.js&quot;,
		&quot;bower_components/bootstrap/dist/bootstrap.js&quot;
	]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;uglify&lt;/code&gt; is used instead of &lt;code&gt;minifyCss&lt;/code&gt;. Add the dependency at the top of &lt;code&gt;gulpfile.js&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var uglify = require(&#39;gulp-uglify&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now create the &lt;code&gt;vendorjs&lt;/code&gt; task:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gulp.task(&#39;vendorjs&#39;, function(){
	return gulp
		// set source
		.src(config.paths.vendorjs)
		// write to vendor.min.js
		.pipe(concat(&#39;vendor.min.js&#39;))
		// start tracking size
		.pipe(bytediff.start())
		// uglify js
		.pipe(uglify())
		// stop tracking size and output it using bytediffFormatter
		.pipe(bytediff.stop(bytediffFormatter))
 
		// write to dest
		.pipe(gulp.dest(config.paths.destination));
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In &lt;code&gt;rev-and-inject&lt;/code&gt;, the &lt;code&gt;vendorcss&lt;/code&gt; prerequisite task needs to be added:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gulp.task(&#39;rev-and-inject&#39;, [&#39;vendorcss&#39;, &#39;css&#39;, &#39;vendorjs&#39;], function(){
	// ...	
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And the newly minified &lt;code&gt;content/script/vendor.min.js&lt;/code&gt; needs to be injected (after the &lt;code&gt;inject:css&lt;/code&gt; injection):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// inject into inject-vendor:js
.pipe(localInject(
	path.join(config.paths.destination, &#39;vendor.min.js&#39;),
	&#39;inject-vendor&#39;))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now the &lt;code&gt;inject-vendor:css&lt;/code&gt; placeholder needs to be added to &lt;code&gt;index.html&lt;/code&gt; at the end of the &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; element:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!-- inject-vendor:css --&amp;gt;
&amp;lt;!-- endinject --&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;site-specific-javascript&quot;&gt;Site-specific JavaScript&lt;/h2&gt;

&lt;p&gt;To support AngularJS, the site-specific JS task will need a couple of extra steps, but I’ll leave that for the next post. Meanwhile, it will be similar to the site-specific CSS task, bundling and minifying all &lt;code&gt;*.js&lt;/code&gt; files in &lt;code&gt;/src/client&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gulp.task(&#39;js&#39;, function() {
	return gulp
		// set source (src/**/*.js)
		.src([path.join(config.paths.client, &#39;**/*.js&#39;)])
		// write to site.min.js
		.pipe(concat(&#39;site.min.js&#39;))
		// start tracking size
		.pipe(bytediff.start())
		// uglify js
		.pipe(uglify())
		// stop tracking size and output it using bytediffFormatter
		.pipe(bytediff.stop(bytediffFormatter))
 
		// write to dest
		.pipe(gulp.dest(config.paths.destination));
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In &lt;code&gt;rev-and-inject&lt;/code&gt;, the &lt;code&gt;js&lt;/code&gt; prerequisite task needs to be added:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gulp.task(&#39;rev-and-inject&#39;, [&#39;vendorcss&#39;, &#39;css&#39;, &#39;vendorjs&#39;], function(){
	// ...	
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And &lt;code&gt;content/script/site.min.js&lt;/code&gt; needs to be injected (after the &lt;code&gt;inject-vendor:js&lt;/code&gt; injection):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// inject into inject:js
.pipe(localInject(
	path.join(config.paths.destination, &#39;site.min.js&#39;)))
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;fonts-and-images&quot;&gt;Fonts and images&lt;/h2&gt;

&lt;p&gt;Site assets that aren’t CSS or JS need to be processed as well. Fonts are pretty straightforward, I’ll just copy everything in &lt;code&gt;content/fonts&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gulp.task(&#39;fonts&#39;, function(){
	log(&#39;Copy fonts&#39;);

	return gulp
		.src([path.join(config.paths.client, &#39;content/fonts/*&#39;)])
		.pipe(gulp.dest(path.join(config.paths.destination, &#39;content/fonts&#39;)));
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Since this can be done outside of the &lt;code&gt;rev-and-inject&lt;/code&gt; process, it gets added to the &lt;code&gt;build&lt;/code&gt; task:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gulp.task(&#39;build&#39;, [&#39;rev-and-inject&#39;, &#39;fonts&#39;], function() {
	// ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Images could be a straight copy as well, or you can pass them through an image optimization plugin. Install two more dependencies:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.npmjs.com/package/gulp-cache&quot;&gt;&lt;code&gt;gulp-cache&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install --save-dev gulp-cache
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;A cache proxy task for Gulp&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;https://www.npmjs.com/package/gulp-imagemin&quot;&gt;&lt;code&gt;gulp-imagemin&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install --save-dev gulp-imagemin
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;Minify PNG, JPEG, GIF and SVG images&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;imagemin&lt;/code&gt; is an image minifier. This performs some compression on PNG images:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gulp.task(&#39;images&#39;, function(){
	log(&#39;Compress, cache and copy images&#39;);

	return gulp
		.src([path.join(config.paths.client, &#39;content/images/*&#39;)])
		.pipe(cache(imagemin({
			optimizationLevel: 3
		})))
		.pipe(gulp.dest(path.join(config.paths.destination, &#39;content/images&#39;)));
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This task also gets added as a prerequisite to the &lt;code&gt;build&lt;/code&gt; task:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gulp.task(&#39;build&#39;, [&#39;rev-and-inject&#39;, &#39;fonts&#39;, &#39;images&#39;], function() {
	// ...
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;revisioning-and-cache-busting&quot;&gt;Revisioning and cache-busting&lt;/h2&gt;

&lt;p&gt;Revisioning is a way of cache-busting (forcing the browser to reload assets) by appending a hash to the filename. Since this hash is unique for a particular revision of the file (as it is a hash of the file’s contents) as long as the source file doesn’t change, the revisioned file name will stay the same and will reload from the browser’s cache. This uses the &lt;code&gt;gulp-rev&lt;/code&gt; and &lt;code&gt;gulp-rev-replace&lt;/code&gt; plugins:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.npmjs.com/package/gulp-rev&quot;&gt;&lt;code&gt;gulp-rev&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install --save-dev gulp-rev
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;Static asset revisioning by appending content hash to filenames: unicorn.css =&amp;gt; unicorn-098f6bcd.css&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;https://www.npmjs.com/package/gulp-rev-replace&quot;&gt;&lt;code&gt;gulp-rev-replace&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install --save-dev gulp-rev-replace
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;Rewrite occurences of filenames which have been renamed by gulp-rev&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Add the new dependencies to the top of &lt;code&gt;gulpfile.js&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var rev = require(&#39;gulp-rev&#39;);
var revReplace = require(&#39;gulp-rev-replace&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now the &lt;code&gt;build&lt;/code&gt; task gets a bit of a rewrite:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var indexFilter = filter(&#39;index.html&#39;);
var cssFilter = filter(&quot;**/*.min.css&quot;);
var jsFilter = filter(&quot;**/*.min.js&quot;);
var manifestFilter = filter(&#39;rev-manifest.json&#39;);

return gulp
	// 1. set source (/src/client/)
	.src([].concat(
		path.join(config.paths.client, &#39;index.html&#39;), 
		path.join(config.paths.destination, &#39;*.min.css&#39;),
		path.join(config.paths.destination, &#39;*.min.js&#39;)))

	// 2. add the revision to the css files
	.pipe(cssFilter)
	.pipe(rev())
	.pipe(gulp.dest(config.paths.destination))
	.pipe(cssFilter.restore())

	// 3. add the revision to the js files
	.pipe(jsFilter)
	.pipe(rev())
	.pipe(gulp.dest(config.paths.destination))
	.pipe(jsFilter.restore())

	// 4. inject css and js
	.pipe(indexFilter)
	.pipe(localInject(path.join(config.paths.destination, &#39;vendor.min.css&#39;), &#39;inject-vendor&#39;))
	.pipe(localInject(path.join(config.paths.destination, &#39;site.min.css&#39;)))
	.pipe(localInject(path.join(config.paths.destination, &#39;vendor.min.js&#39;), &#39;inject-vendor&#39;))
	.pipe(localInject(path.join(config.paths.destination, &#39;site.min.js&#39;)))
	.pipe(gulp.dest(config.paths.destination))
	.pipe(indexFilter.restore())

	// 5. substitute in new revved filenames
	.pipe(revReplace())
	.pipe(gulp.dest(config.paths.destination));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I’ve numbered the stages of this pipeline. &lt;/p&gt;

&lt;p&gt;In step 1 we select &lt;code&gt;index.html&lt;/code&gt; and the &lt;code&gt;*.min.css&lt;/code&gt; and &lt;code&gt;*.min.js&lt;/code&gt; files.&lt;/p&gt;

&lt;p&gt;In step 2 we filter down to just the &lt;code&gt;*.min.css&lt;/code&gt; files, then apply the revisioning hash to the filenames (using &lt;code&gt;rev()&lt;/code&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// filter to *.min.css
.pipe(cssFilter)
// add the revision to the files
.pipe(rev())
// write the files
.pipe(gulp.dest(config.paths.destination))
// clear the filter
.pipe(cssFilter.restore())
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Step 3 is the same as step 2 except for &lt;code&gt;*.min.js&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In step 4 we filter down to just &lt;code&gt;index.html&lt;/code&gt; and do the existing CSS and JS injections.&lt;/p&gt;

&lt;p&gt;In step 5 we substitute the newly revisioned filenames into &lt;code&gt;index.html&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;and-finally&quot;&gt;And finally…&lt;/h2&gt;

&lt;p&gt;The end result looks like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/j3WY60e.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;index.html&lt;/code&gt; points to the concatenated, minified, and hashed files:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&quot;en&quot;&amp;gt;
	&amp;lt;head&amp;gt;
		&amp;lt;!-- inject-vendor:css --&amp;gt;
		&amp;lt;link rel=&quot;stylesheet&quot; href=&quot;/app/vendor.min-a491bda8.css&quot;&amp;gt;
		&amp;lt;!-- endinject --&amp;gt;

		&amp;lt;!-- inject:css --&amp;gt;
		&amp;lt;link rel=&quot;stylesheet&quot; href=&quot;/app/site.min-238af6ba.css&quot;&amp;gt;
		&amp;lt;!-- endinject --&amp;gt;
		&amp;lt;/head&amp;gt;
	&amp;lt;body&amp;gt;
		&amp;lt;h1&amp;gt;Hello, world!&amp;lt;/h1&amp;gt;

		&amp;lt;!-- inject-vendor:js --&amp;gt;
		&amp;lt;script src=&quot;/app/vendor.min-8e07c5e8.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
		&amp;lt;!-- endinject --&amp;gt;

		&amp;lt;!-- inject:js --&amp;gt;
		&amp;lt;script src=&quot;/app/site.min-5b54178e.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
		&amp;lt;!-- endinject --&amp;gt;
	&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And I’m spent. Next I’ll get an AngularJS workflow happening.&lt;/p&gt;

&lt;h2 id=&quot;further-reading-and-resources&quot;&gt;Further reading and resources&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/johnpapa/ng-demos/blob/master/grunt-gulp/build-gulp/gulpfile.js&quot;&gt;https://github.com/johnpapa/ng-demos/blob/master/grunt-gulp/build-gulp/gulpfile.js&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/gertjvr/ng-template&quot;&gt;https://github.com/gertjvr/ng-template&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://gulpjs.com/&quot;&gt;http://gulpjs.com/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://nodejs.org/api/&quot;&gt;http://nodejs.org/api/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/bendetat/nancy-gulp-bower-angular-learnings/blob/8a723f7f95880974b15cbe054891a3db7e32e336/gulpfile-unclean.js&quot;&gt;&lt;code&gt;gulpfile.js&lt;/code&gt; as of this post&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/bendetat/nancy-gulp-bower-angular-learnings/blob/8a723f7f95880974b15cbe054891a3db7e32e336/gulpfile.js&quot;&gt;cleaned &lt;code&gt;gulpfile.js&lt;/code&gt;&lt;/a&gt; which I will use from here on&lt;/li&gt;
&lt;/ul&gt;

</description>
				<pubDate>Fri, 30 Jan 2015 00:00:00 +1000</pubDate>
				<link>http://bendetat.com/a-useful-build-pipeline-using-gulp-and-bower.html</link>
				<guid isPermaLink="true">http://bendetat.com/a-useful-build-pipeline-using-gulp-and-bower.html</guid>
			</item>
		
			<item>
				<title>Hello World! It&#39;s Gulp!</title>
				<description>&lt;p&gt;&lt;strong&gt;DISCLAIMER:&lt;/strong&gt; I’m learning in the open here. This is the first time I’ve used Gulp and I’m sure I’m missing a heap of really important stuff. Enjoy!&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Part 1: Hello World! It’s Gulp!&lt;/li&gt;
  &lt;li&gt;Part 2: &lt;a href=&quot;http://bendetat.com/a-useful-build-pipeline-using-gulp-and-bower.html&quot;&gt;A useful build pipeline using Gulp and Bower&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;http://gulpjs.org&quot;&gt;Gulp&lt;/a&gt; is a Node.js based build tool. It executes &lt;code&gt;gulpfile.js&lt;/code&gt; in the project root to set up a build pipeline, doing things like bundling, minification, and artifact copying.&lt;/p&gt;

&lt;p&gt;This is useful in a workflow where you have an essentially static website that uses a client-side framework such as AngularJS, backed onto a web service that exposes functionality via something like a REST API. Build tools like Gulp and JS packagement management tools such as &lt;a href=&quot;http://bower.io&quot;&gt;Bower&lt;/a&gt; can be used to manage these complex client-side sites.&lt;/p&gt;

&lt;p&gt;The static site that I’ll hopefully end up generating in the next post will be used with a &lt;a href=&quot;http://nancyfx.org&quot;&gt;Nancy&lt;/a&gt; website. The end result of this post is a Gulp build script that simply copies an &lt;code&gt;index.html&lt;/code&gt; file from &lt;code&gt;/src/client&lt;/code&gt; to &lt;code&gt;/src/client-dist&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;prerequisites&quot;&gt;Prerequisites&lt;/h2&gt;

&lt;p&gt;Install Node and NPM. The easiest way may be via &lt;a href=&quot;http://chocolatey.org&quot;&gt;Chocolatey&lt;/a&gt;, this does both:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cinst nodejs.install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After installation, you may need to add &lt;code&gt;C:\Program Files\nodejs&lt;/code&gt; to the system path and create a new folder in &lt;code&gt;C:\Users\ben_000\AppData\Roaming&lt;/code&gt; named &lt;code&gt;npm&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Get NPM to create a &lt;code&gt;package.json&lt;/code&gt; file in the project root by running &lt;code&gt;npm install&lt;/code&gt; and working through the wizard. Now install Gulp using NPM:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install --save-dev gulp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;--save-dev&lt;/code&gt; flag adds the dependencies to &lt;code&gt;package.json&lt;/code&gt;. This means that when you open the repository in a new environment you can just do &lt;code&gt;npm install&lt;/code&gt; to automatically install the project’s NPM dependencies. &lt;/p&gt;

&lt;p&gt;Note that Gulp itself should also be installed globally so you can use &lt;code&gt;gulp&lt;/code&gt; on the command line:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install -g gulp
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;helloworlding-gulp&quot;&gt;helloworlding Gulp&lt;/h2&gt;

&lt;p&gt;Create a file &lt;code&gt;gulpfile.js&lt;/code&gt; in the project root. Start out by importing the Gulp module:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var gulp = require(&#39;gulp&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;gulp.task()&lt;/code&gt; defines a task that’s available from the command line.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gulp.task(&#39;hello&#39;, function() {
	console.log(&#39;Hello world!&#39;)
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you run &lt;code&gt;gulp hello&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;λ gulp hello
[10:22:08] Using gulpfile c:\source\angular-learnings\gulpfile.js
[10:22:08] Starting &#39;hello&#39;...
Hello world!
[10:22:08] Finished &#39;hello&#39; after 316 μs
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;gulp.task&lt;/code&gt; also lets you run prerequisite tasks:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gulp.task(&#39;hello&#39;, [&#39;one&#39;, &#39;two&#39;, &#39;three&#39;], function() {
	console.log(&#39;Hello world!&#39;)
});

gulp.task(&#39;one&#39;, function(){
	console.log(&#39;one&#39;);
});

gulp.task(&#39;two&#39;, function(){
	console.log(&#39;two&#39;);
});

gulp.task(&#39;three&#39;, function(){
	console.log(&#39;three&#39;);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now &lt;code&gt;gulp hello&lt;/code&gt; does this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[10:24:49] Starting &#39;one&#39;...
one
[10:24:49] Finished &#39;one&#39; after 200 μs
[10:24:49] Starting &#39;two&#39;...
two
[10:24:49] Finished &#39;two&#39; after 151 μs
[10:24:49] Starting &#39;three&#39;...
three
[10:24:49] Finished &#39;three&#39; after 154 μs
[10:24:49] Starting &#39;hello&#39;...
Hello world!
[10:24:49] Finished &#39;hello&#39; after 135 μs
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now make you a build pipeline. Empty out &lt;code&gt;gulpfile.js&lt;/code&gt; and start again, partner.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://media.giphy.com/media/a1wyl0YQrCGm4/giphy.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;lots-of-scripting-just-to-copy-a-file&quot;&gt;Lots of scripting just to copy a file!&lt;/h2&gt;

&lt;p&gt;I’m just going to start out with a simple build pipeline that basically copies &lt;code&gt;index.html&lt;/code&gt; to the server.&lt;/p&gt;

&lt;p&gt;Install some more NPM packages. &lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.npmjs.com/package/gulp-load-plugins&quot;&gt;&lt;code&gt;gulp-load-plugins&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Loads in any gulp plugins and attaches them to the global scope, or an object of your choice.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Eg.:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var gutil = require(&#39;gulp-load-plugins&#39;)([
	&#39;colors&#39;, &#39;env&#39;, &#39;log&#39;, &#39;pipeline&#39;
]);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&quot;https://www.npmjs.com/package/gulp-notify&quot;&gt;&lt;code&gt;gulp-notify&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install --save-dev gulp-notify
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;gulp plugin to send messages based on Vinyl Files or Errors to Mac OS X, Linux or Windows using the node-notifier module. Fallbacks to Growl or simply logging&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;https://www.npmjs.com/package/gulp-filter&quot;&gt;&lt;code&gt;gulp-filter&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install --save-dev gulp-filter
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&quot;https://www.npmjs.com/package/chalk&quot;&gt;&lt;code&gt;chalk&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install --save-dev chalk
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;Terminal string styling done right&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;https://www.npmjs.com/package/dateformat&quot;&gt;&lt;code&gt;dateformat&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install --save-dev dateformat
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;A node.js package for Steven Levithan’s excellent dateFormat() function.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;https://www.npmjs.com/package/del&quot;&gt;&lt;code&gt;del&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install --save-dev del
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;Delete files/folders using globs&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Whew, that’s a bunch of dependencies. At the top of &lt;code&gt;gulpfile.js&lt;/code&gt;, pull them in using &lt;code&gt;require()&lt;/code&gt; and get some utility dependencies into scope:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var gulp = require(&#39;gulp&#39;);
var notify = require(&#39;gulp-notify&#39;);
var filter = require(&#39;gulp-filter&#39;);
var plugins = require(&#39;gulp-load-plugins&#39;)();
var del = require(&#39;del&#39;);
var path = require(&#39;path&#39;);

var gutil = plugins.loadUtils([
	&#39;colors&#39;, &#39;log&#39;
]);

var log = gutil.log;
var colors = gutil.colors;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To centralise the build paths, add this next:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var config = {
	&quot;paths&quot;: {
		&quot;source&quot;: &quot;src/client&quot;,
		&quot;distribution&quot;: &quot;src/client-dist&quot;
	}
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This could be put into another file like &lt;code&gt;gulp-config.json&lt;/code&gt; and pulled in with a &lt;code&gt;require()&lt;/code&gt; but for now this will do.&lt;/p&gt;

&lt;p&gt;I’ll split out the actual copy process into a gulp task called &lt;code&gt;rev-and-inject&lt;/code&gt;. This will eventually be more involved including adding a revision number for cache busting and injecting minified and bundled resources.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gulp.task(&#39;rev-and-inject&#39;, function() {
	var indexPath = path.join(config.paths.source, &#39;index.html&#39;);

	return gulp
		// set source
		.src([].concat(indexPath))
		// write to dest
		.pipe(gulp.dest(config.paths.distribution))
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;build&lt;/code&gt; task calls &lt;code&gt;rev--and-inject&lt;/code&gt; before displaying a notification (using a toast!):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gulp.task(&#39;build&#39;, function(){
	return gulp
		.src(&#39;&#39;)
		.pipe(notify({
			onLast: true,
			message: &#39;Build complete&#39;
	}));
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In &lt;code&gt;src/client&lt;/code&gt; I’ve added an &lt;code&gt;index.html&lt;/code&gt; just for testing. Run &lt;code&gt;gulp build&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[15:05:05] Starting &#39;rev-and-inject&#39;...
[15:05:05] Finished &#39;rev-and-inject&#39; after 24 ms
[15:05:05] Starting &#39;build&#39;...
[15:05:05] gulp-notify: [Gulp notification] Build complete
[15:05:05] Finished &#39;build&#39; after 35 ms
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can add a quick &lt;code&gt;clean&lt;/code&gt; task too, which will delete the &lt;code&gt;src/client-dist&lt;/code&gt; folder:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gulp.task(&#39;clean&#39;, function(){
	log(&#39;Cleaning: &#39; + config.paths.distribution);

	del([].concat(config.paths.distribution));
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&quot;http://bendetat.com/a-useful-build-pipeline-using-gulp-and-bower.html&quot;&gt;Next I’ll add some value to the build pipeline&lt;/a&gt; by minifying and bundling JS and CSS, and injecting the results into &lt;code&gt;index.html&lt;/code&gt;. The result will be a static website set up for some AngularJS work.&lt;/p&gt;

&lt;h2 id=&quot;further-reading-and-resources&quot;&gt;Further reading and resources&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/johnpapa/ng-demos/blob/master/grunt-gulp/build-gulp/gulpfile.js&quot;&gt;https://github.com/johnpapa/ng-demos/blob/master/grunt-gulp/build-gulp/gulpfile.js&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/gertjvr/ng-template&quot;&gt;https://github.com/gertjvr/ng-template&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://gulpjs.com/&quot;&gt;http://gulpjs.com/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://nodejs.org/api/&quot;&gt;http://nodejs.org/api/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
				<pubDate>Tue, 27 Jan 2015 00:00:00 +1000</pubDate>
				<link>http://bendetat.com/hello-world-its-gulp.html</link>
				<guid isPermaLink="true">http://bendetat.com/hello-world-its-gulp.html</guid>
			</item>
		
			<item>
				<title>A convention test for projects referencing other project references instead of NuGet packages</title>
				<description>&lt;p&gt;Earlier this week I was running into problems when adding a solution to a CI build server. Although there were no problems running the solution locally, the build server was complaining about not being able to resolve a reference for a project.&lt;/p&gt;

&lt;p&gt;The solution was using NuGet package restore, which I happen to prefer over checking in the &lt;code&gt;packages&lt;/code&gt; folder (at least for smaller projects with few developers), but I was confident that the packages were being restored correctly, including the unresolved reference.&lt;/p&gt;

&lt;p&gt;The problem was that the project was referencing an assembly from the &lt;code&gt;/bin/debug&lt;/code&gt; folder of another project, rather than the project referencing the correct NuGet package. This usually happens when using something like Resharper to automatically add a reference. The fix itself is easy:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Delete the reference from the project&lt;/li&gt;
  &lt;li&gt;Right-click the solution&lt;/li&gt;
  &lt;li&gt;Select ‘Manage NuGet Packages for Solution’&lt;/li&gt;
  &lt;li&gt;‘Manage’ the package&lt;/li&gt;
  &lt;li&gt;Add the project to the package:&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/Zr5S9VX.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;What I really want to do is add a convention test to make sure this doesn’t happen again. Why? Because this happens fairly infrequently, but when it does it can be hard to diagnose because it could potentially be caused by a number of things. In my experience, most of the time it is caused by a bad reference. Nevertheless I always seem to burn too much time figuring it out. In my opinion, the ROI of this convention test will probably make it worthwhile.&lt;/p&gt;

&lt;h2 id=&quot;turns-out&quot;&gt;Turns out&lt;/h2&gt;

&lt;p&gt;It’s a bit tricky to get to the projects in a solution file. I didn’t want to waste too much time in the internals of the build system so I found an &lt;a href=&quot;http://stackoverflow.com/a/4634505/149259&quot;&gt;answer on Stack Overflow&lt;/a&gt; that includes two wrapper classes for getting the solution, then iterating on the projects. The wrapper classes can be copied from &lt;a href=&quot;https://gist.github.com/bendetat/9a5a336d82b51ac0b564&quot;&gt;this gist&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You’ll need to add a reference to &lt;code&gt;Microsoft.Build&lt;/code&gt;. Some of the classes that are used are actually deprecated, but this should work for long enough to get a good return on this test. The &lt;code&gt;Solution&lt;/code&gt; wrapper class reads a &lt;code&gt;.sln&lt;/code&gt; file and exposes a list of &lt;code&gt;SolutionProject&lt;/code&gt; instance. Each &lt;code&gt;SolutionProject&lt;/code&gt; exposes some of the properties of the project within the solution including the relative path, which I use to build a set of &lt;code&gt;Microsoft.Build.Project&lt;/code&gt; instances for the convention test.&lt;/p&gt;

&lt;h2 id=&quot;test-cases&quot;&gt;Test cases&lt;/h2&gt;

&lt;p&gt;I’m using NUnit, so my &lt;a href=&quot;http://www.nunit.org/index.php?p=testCaseSource&amp;amp;r=2.5&quot;&gt;test cases&lt;/a&gt; come from a public method that returns an enumeration of &lt;code&gt;TestCastData&lt;/code&gt; instances:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public IEnumerable&amp;lt;TestCaseData&amp;gt; AllProjects
{
    get
    {
        var solution = new Solution(&quot;../../../../MySolution.sln&quot;);
        var allProjects = solution.Projects
            .Where(x =&amp;gt; x.RelativePath != &quot;.nuget&quot;)
            .Where(x =&amp;gt; x.ProjectName != &quot;Microsoft.Build.Evaluation.Project&quot;)
            .ToArray();
        var allProjectNames = allProjects.Select(x =&amp;gt; x.ProjectName).ToArray();
        
        return allProjects.Select(x =&amp;gt;
        {
            var project = new Project(&quot;../../../../&quot; + x.RelativePath);
            var testCase = new TestCaseData(project, allProjectNames);
            testCase.SetName(x.ProjectName);

            return testCase;
        });
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Opens the solution file (as an instance of the above &lt;code&gt;Solution&lt;/code&gt; wrapper). I’ve hard-coded the relative path to the solution because there’s no need to get fancy - the tests are running in &lt;code&gt;src/MyProject/bin/[debug|release]/&lt;/code&gt; relative to the solution file. If you don’t keep the projects in a &lt;code&gt;/src&lt;/code&gt; subdirectory then take out one of the &lt;code&gt;../&lt;/code&gt; bits.&lt;/li&gt;
  &lt;li&gt;Get all of the projects (as an instance of the above &lt;code&gt;SolutionProject&lt;/code&gt; wrapper), except for &lt;code&gt;.nuget&lt;/code&gt; and &lt;code&gt;Microsoft.Build.Evaluation.Project&lt;/code&gt;, which are included in the solution as project references.&lt;/li&gt;
  &lt;li&gt;Select out all the names of the projects. This is passed into each &lt;code&gt;TestCaseData&lt;/code&gt; for comparison in the actual test.&lt;/li&gt;
  &lt;li&gt;Build up and return the &lt;code&gt;TestCaseData&lt;/code&gt; enumeration:
    &lt;ol&gt;
      &lt;li&gt;Construct a new &lt;code&gt;Microsoft.Build.Project&lt;/code&gt; instance using the relative path. Note that this hasn’t been tested with solution folder (it would &lt;em&gt;probably&lt;/em&gt; work because I would hope that the relative path includes the solution folder).&lt;/li&gt;
      &lt;li&gt;Build a new &lt;code&gt;TestCaseData&lt;/code&gt; instance with the project and the list of project names build up above.&lt;/li&gt;
      &lt;li&gt;Set the name of the test case to the name of the project.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;bangarang&quot;&gt;Bangarang&lt;/h2&gt;

&lt;p&gt;That’s a &lt;a href=&quot;http://www.imdb.com/title/tt0102057/&quot;&gt;Hook&lt;/a&gt; reference, not some ‘popular’ EDM song.&lt;/p&gt;

&lt;p&gt;I’m using Shouldly for the assertion.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[Test, TestCaseSource(&quot;AllProjects&quot;)]
public void ProjectShouldNotReferenceAssembliesInOtherProjects(Project project, string[] allProjectNames)
{
        var startsWithProjectName = new Func&amp;lt;string, string, bool&amp;gt;((x, projectName) =&amp;gt; x.StartsWith(&quot;..\\&quot; + projectName + &quot;\\&quot;));
        var isReferenceInAnotherProject = new Func&amp;lt;string, bool&amp;gt;(x =&amp;gt; allProjectNames.Any(projectName =&amp;gt; startsWithProjectName(x, projectName)));

        var badReferences = from projectItem in project.GetItems(&quot;Reference&quot;)
                            from metaData in projectItem.Metadata
                            let reference = metaData.EvaluatedValue
                            where isReferenceInAnotherProject(reference)
                            select reference;

        badReferences.ShouldBeEmpty();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This was jammed together in LinqPad, but it’s pretty straightforward. The first two lines set up some helpers to simplify the query. Then the bad references are determined by finding the references in the project, then checking if the reference is in another project using a fairly naive path check.&lt;/p&gt;

&lt;p&gt;Failures look like this, showing the bad reference in the &lt;code&gt;Tests&lt;/code&gt; assembly:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/Hkc6y9a.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Viz.&lt;/p&gt;

&lt;iframe width=&quot;420&quot; height=&quot;315&quot; src=&quot;//www.youtube.com/embed/E2VCwBzGdPM&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

</description>
				<pubDate>Sat, 17 Jan 2015 00:00:00 +1000</pubDate>
				<link>http://bendetat.com/convention-test-for-projects-referencing-other-project-references-instead-of-nuget-packages.html</link>
				<guid isPermaLink="true">http://bendetat.com/convention-test-for-projects-referencing-other-project-references-instead-of-nuget-packages.html</guid>
			</item>
		
			<item>
				<title>Xamarin Studio borking on a Unified API project</title>
				<description>&lt;p&gt;I created a Unified API iOS Binding Project in Xamarin Studio (but this may happen for all unified API projects). This is in Xamarin Studio 5.5.4. When I went to build the project I got an error, something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Error: could not import &#39;blah&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&quot;http://forums.xamarin.com/discussion/27217&quot;&gt;Turns out&lt;/a&gt; the generated project file &lt;a href=&quot;http://forums.xamarin.com/discussion/comment/87535/#Comment_87535&quot;&gt;has some errors&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Hi, i did succeed in the end. Here was the solution for me: For some reason, the binding project with Unified API has some errors in it’s project file. After creating the project, i saved it. and opened it with a text editor.
Look for the Importproject element that claims to import the ObjCruntime, this line has a faulty path. It should be:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;Import Project=&quot;$(MSBuildExtensionsPath)\Xamarin\Xamarin.ObjcBinding.CSharp.targets&quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;Also, i added this to the propertygroups:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;TargetFrameworkIdentifier&amp;gt;Xamarin.iOS&amp;lt;/TargetFrameworkIdentifier&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(Note: add the framework identifier to each of the &lt;code&gt;PropertyGroup&lt;/code&gt; elements)&lt;/p&gt;

</description>
				<pubDate>Mon, 12 Jan 2015 00:00:00 +1000</pubDate>
				<link>http://bendetat.com/xamarin-studio-borking-on-unified-api-project.html</link>
				<guid isPermaLink="true">http://bendetat.com/xamarin-studio-borking-on-unified-api-project.html</guid>
			</item>
		
			<item>
				<title>Access IIS Express from another machine</title>
				<description>&lt;p&gt;By default, IIS Express (via Visual Studio) will only allow connections from the local machine. This is a Good Thing but sometimes you need to test sites and services from another machine. I’ve found several guide that explain how to do this but they always seem to miss some steps. This will show how to share an IIS Express site via the host’s IP address. Using the machine name is also possible as is using the HOSTS file to fake a domain (like &lt;code&gt;api.mysite.example.com&lt;/code&gt;) but both of these scenarios are outside the scope of these instructions. This has only been tested on computers on the same subnet which should be sufficient for most test scenarios.&lt;/p&gt;

&lt;h2 id=&quot;site-works-locally&quot;&gt;1. Site works locally&lt;/h2&gt;

&lt;p&gt;First, your project’s Web properties should look something like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/yDI4IZs.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This is the default for a new website. The port may be different and ‘Apply server settings to all users (store in project file)’ doesn’t have to be checked. The site should also run locally without issues. Make a note of the port.&lt;/p&gt;

&lt;h2 id=&quot;set-up-httpsys&quot;&gt;2. Set up HTTP.sys&lt;/h2&gt;

&lt;p&gt;HTTP.sys is a component of Windows (Vista and above) that handles HTTP requests. The url that is going to be shared needs to be reserved in HTTP.sys’s access control list (ACL). Open an &lt;em&gt;administrative&lt;/em&gt; console. If the console doesn’t have admin rights, this won’t work. Find out your IP address and run this code to reserve the url in the ACL.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;netsh http add urlacl url=http://192.168.0.6:60985/ user=everyone
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You should get back this message:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;URL reservation successfully added
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If not, check that the console has admin rights and that the url hasn’t already been reserved in the ACL. If you need to, the reservation can be deleted:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;netsh http delete urlacl url=http://192.168.0.6:60985/
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;open-up-the-firewall&quot;&gt;3. Open up the firewall&lt;/h2&gt;

&lt;p&gt;Open the Windows Firewall (or whatever firewall you may have) and create an inbound rule allowing the above port (eg. 60985). Make sure it’s &lt;strong&gt;incoming&lt;/strong&gt;! Yes I burned time when I accidently made it outgoing. Uncheck ‘Public’ if you don’t want the port to be open at cafes and airports.&lt;/p&gt;

&lt;h2 id=&quot;add-the-new-site-to-iss-expresss-configuration&quot;&gt;4. Add the new site to ISS Express’s configuration&lt;/h2&gt;

&lt;p&gt;At this point, the port should actually be available from another computer, but IIS Express will only respond to requests for &lt;code&gt;localhost&lt;/code&gt;. Edit &lt;code&gt;%USERPROFILE%\Documents\iisexpress\config\applicationhost.config&lt;/code&gt; and find the site definition for your project. The easiest way might be to search for the port as it should be unique across the IIS Express instance.  Add a new binding to the site for the external facing address:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/vz9OSBl.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Make sure the application isn’t running and kill IIS Express:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/sfSkFrQ.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;strikeprofitstrike-troubleshooting&quot;&gt;5. &lt;strike&gt;Profit!&lt;/strike&gt; Troubleshooting!&lt;/h2&gt;

&lt;p&gt;Restart Visual Studio as administrator and relaunch the application. It should now work on an external machine. If it doesn’t work:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;See if you can access the site locally using the IP address. If you cannot, make sure the IIS Express configuration is correct and that it did in fact restart.&lt;/li&gt;
  &lt;li&gt;Make sure the firewall is configured correctly - it should be an &lt;em&gt;inbound&lt;/em&gt; rule allowing traffic on the required port from your subnet.&lt;/li&gt;
  &lt;li&gt;Check the error on the remote machine.
    &lt;ul&gt;
      &lt;li&gt;If it is a timeout (&lt;code&gt;x.x.x.x took too long to respond&lt;/code&gt;) it’s probably the host’s firewall or ACL, or an unrelated network issue.&lt;/li&gt;
      &lt;li&gt;if it is a 503 Service Unavailable (which should return immediately) it’s probably the IIS Express configuration.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;If Visual Studio can’t run the project locally saying something like ‘The site http://x.x.x.x:41234 could not be created’, make sure the ACL reservation was created.&lt;/li&gt;
&lt;/ul&gt;
</description>
				<pubDate>Wed, 07 Jan 2015 00:00:00 +1000</pubDate>
				<link>http://bendetat.com/access-iis-express-from-another-machine.html</link>
				<guid isPermaLink="true">http://bendetat.com/access-iis-express-from-another-machine.html</guid>
			</item>
		
			<item>
				<title>Set up TeamCity on an Azure virtual machine - Redux</title>
				<description>&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; This is a repost of an &lt;a href=&quot;http://bendetat.com/set-up-teamcity-on-an-azure-instance.html&quot;&gt;earlier post&lt;/a&gt; with some refinements based on feedback and tips from my friend and collegue &lt;a href=&quot;http://robdmoore.id.au/&quot;&gt;Rob Moore&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;DISCLAIMER:&lt;/strong&gt; I’m learning in the open here. I have barely used Azure and have only ever used already established TeamCity instances, so I’m really just messing around with two new things at the same time here. I’m sure I’m missing a heap of very important points.&lt;/p&gt;

&lt;h2 id=&quot;set-up-the-vm&quot;&gt;Set up the VM&lt;/h2&gt;

&lt;h3 id=&quot;get-started-on-azure&quot;&gt;Get started on Azure&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/AsSmaMo.png&quot; style=&quot;float:right&quot; /&gt; Setting up a new Azure account is pretty much as easy as hitting &lt;a href=&quot;http://windowsazure.com&quot;&gt;http://windowsazure.com&lt;/a&gt; and starting a free trial. You land in a sweet management console that is a lot easier to use than I expected, based on my experiences with Office 365 (early versions), OWA and SharePoint. &lt;a href=&quot;http://www.troyhunt.com/&quot;&gt;Troy Hunt&lt;/a&gt; recently released an awesome Azure demo video - &lt;a href=&quot;http://worldsgreatestazuredemo.com/&quot;&gt;http://worldsgreatestazuredemo.com/&lt;/a&gt; - which is a good introduction to Azure.&lt;/p&gt;

&lt;h3 id=&quot;create-a-new-virtual-machine&quot;&gt;Create a new virtual machine&lt;/h3&gt;

&lt;p&gt;Select the VIRTUAL MACHINES tab and click NEW from the bottom menu. Select FROM GALLERY and pick ‘Windows Server 2012 R2 Datacenter’ (or whatever is most current). Hit next and give it a cool name. I left the size on the standard tier at A1 for now and selected SE Asia as the location of the VM. According to the &lt;a href=&quot;http://azure.microsoft.com/en-us/pricing/details/virtual-machines/&quot;&gt;Azure pricing calculator&lt;/a&gt; this costs around AU$68 per month. Enter a username and password, which you will need to remote into the VM. Next through the rest of the pages and the VM will soon be provisioned:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/SzdGki7.png&quot; alt=&quot;http://i.imgur.com/SzdGki7.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Click that arrow to start managing the VM. &lt;/p&gt;

&lt;h3 id=&quot;open-up-the-firewall&quot;&gt;Open up the firewall&lt;/h3&gt;

&lt;p&gt;We’ll want to open up port 80 for TeamCity. It will actually run on port 8080 but I’ll use IIS to reverse proxy it to port 80. This should make it easier to move to SSL in the future. Select the ENDPOINTS tab and ADD a new one. &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/nelGyMd.png&quot; alt=&quot;http://i.imgur.com/nelGyMd.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Note that you’re ADDing an endpoint. The NEW button will start creating a new VM. It’s like Microsoft wants you to keep adding more and more VMs.&lt;/p&gt;

&lt;p&gt;Accept the first screen to add a stand-alone endpoint. Pick HTTP from the NAME drop-down, which will automatically fill in the port number. Complete the screen.&lt;/p&gt;

&lt;p&gt;This opens port 80 on the &lt;em&gt;external&lt;/em&gt; firewall. The server’s internal firewall will still need to be configured (below).&lt;/p&gt;

&lt;h3 id=&quot;attach-a-new-disk&quot;&gt;Attach a new disk&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/4Znf3hr.png&quot; style=&quot;float: left; padding-right: 1em;&quot; /&gt; The VM has two drives configured by default - C:, which contains the Windows installation, and D:, which is ‘temporary storage’. I’m going to attach a third disk that will contain the TeamCity host (and later Octopus Deploy). The TeamCity agent will use D: as it is local to the VM, so it should be faster for building the residents. Attach a new disk by selecting the ATTACH option from the bottom menu. Select Empty Disk.  Accept the defaults, I gave it a size of 20 GB. Apparently resizing the disk later on involves downloading the VHD, using a tool to resize it, and uploading it again. Seems a bit awkward. 20 GB should do for now. Select ‘READ/WRITE’ under the ‘HOST CACHE PREFERENCE’, which should speed up access. The disk will be attached and the status should return to running.&lt;/p&gt;

&lt;h3 id=&quot;remote-in-and-start-configuring-the-vm&quot;&gt;Remote in and start configuring the VM&lt;/h3&gt;

&lt;p&gt;Go to the DASHBOARD tab and select CONNECT from the bottom menu. This will download an .RDP file which will should open in Remote Desktop. Enter the username and password and you should get connected to the server’s desktop.&lt;/p&gt;

&lt;h4 id=&quot;ie-enhanced-security&quot;&gt;IE Enhanced Security&lt;/h4&gt;
&lt;p&gt;Turn off IE Enhanced Security from the Server Manager, in the Local Server Tab. This will let you use Internet Explorer to download TeamCity (or to install Chrome to download TeamCity and lolcats).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/N5ouyt1.png&quot; alt=&quot;IE Enhanced Security&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;open-port-80-in-the-firewall&quot;&gt;Open port 80 in the firewall&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/376xLMi.png&quot; style=&quot;float:right&quot; /&gt; Open the Windows Firewall with Advanved Security MMC snap-in. Easiest way to find it is to search for &lt;code&gt;firewall&lt;/code&gt; from the start screen. Create a new inbound rule.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/MlQbntP.png&quot; alt=&quot;http://i.imgur.com/MlQbntP.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Select Port, specify local TCP port 80, Allow the connection, apply the rule to all profiles, and call the rule &lt;code&gt;TeamCity&lt;/code&gt; (so you can find it again ;-) ).&lt;/p&gt;

&lt;h4 id=&quot;format-and-assign-the-empty-disk&quot;&gt;Format and assign the empty disk&lt;/h4&gt;

&lt;p&gt;The empty disk that we attached needs to be formatted and assigned to a drive letter in the server as well. You can think of attaching an empty disk as plugging in a new disk to any normal machine - the disk still needs be configured in the OS.&lt;/p&gt;

&lt;p&gt;In the Server Manager, select File and Storage Services, then Disks (under Volumes). The new disk should be online with a partition type of ‘Unknown’. Right-click the disk and select New Volume…&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/vgarRGg.png&quot; alt=&quot;File and Storage Services - New Volume&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Next through everything and accept the defaults. It should be assigned to drive E:.&lt;/p&gt;

&lt;h2 id=&quot;whew&quot;&gt;Whew…&lt;/h2&gt;

&lt;p&gt;Just sit back for a moment and look at what we’ve achieved. We’ve got a new VM running the latest Windows Server OS, firewalls configured and remote desktop enabled. I haven’t even taken out my credit card yet. Compare with the amount of work needed to boot up a new physical server in a network, or even provisioning a new VM in Hyper-V. Squeeeee? Indeed.&lt;/p&gt;

&lt;h2 id=&quot;install-teamcity&quot;&gt;Install TeamCity&lt;/h2&gt;

&lt;p&gt;Download the ‘default free professional edition’ of TeamCity from &lt;a href=&quot;http://www.jetbrains.com/teamcity/download/&quot;&gt;here&lt;/a&gt;. The version at the time of writing was 9.0.&lt;/p&gt;

&lt;p&gt;Start up the installer. Select &lt;code&gt;e:\TeamCity&lt;/code&gt; as the destination folder (or wherever the new disk was assigned). Leave the components as default, which installs a build agent and the server with Windows services. Change the TeamCity data directory to somewhere on the new disk - I used &lt;code&gt;e:\TeamCity-data&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;After installation the Build Agent properties configuration appears. Change the systemDir, workDir and tempDir to point to &lt;code&gt;D:\TeamCity\buildAgent\___&lt;/code&gt; (the temporary drive). You have to select each of the paths and edit them in turn. Save this then select the SYSTEM account. It would probably be more secure to set up a restricted user account but the system account should do for now. Do the same for the TeamCity Agent service account. ‘Next’ through and the services will start. After you finish the installation, ‘TeamCity First Start’ should open in IE / your browser of choice.&lt;/p&gt;

&lt;p&gt;Start working through this wizard. I used the ‘Internal (HSQLDB)’ database type. Initializing the server components can take a few minutes so be patient! It’s a good idea to configure the admin credentials in TeamCity before setting up the reverse proxy (below) so that your new server isn’t exposed on the ‘first start’ wizard.&lt;/p&gt;

&lt;h2 id=&quot;set-up-the-reverse-proxy-in-iis&quot;&gt;Set up the reverse proxy in IIS&lt;/h2&gt;

&lt;p&gt;First you need to install IIS. Open the Server Manager and select ‘Add roles and features’. Select ‘Role-based or feature-based installation’. Then ‘Select a server from the server pool’ and make sure the correct VM is selected. In the list of roles, check ‘Web Server (IIS)’. If it prompts you to add the ‘IIS Management Console’, click ‘Add Features’. Click ‘Next’. Leae the other features at the default values and continue. Leave the role services for Web Server (IIS) at the default. Next then Install.&lt;/p&gt;

&lt;p&gt;I used &lt;a href=&quot;http://serverfault.com/a/152411&quot;&gt;this ServerFault answer&lt;/a&gt; to set up the reverse proxy. It requires the &lt;a href=&quot;http://www.iis.net/download/URLRewrite&quot;&gt;URL Rewrite&lt;/a&gt; and &lt;a href=&quot;http://www.iis.net/download/ApplicationRequestRouting&quot;&gt;Application Request Routing&lt;/a&gt; IIS modules. Either follow those links or use &lt;a href=&quot;http://www.microsoft.com/web/downloads/platform.aspx&quot;&gt;Web Platform Installer&lt;/a&gt; to install them. Start up IIS Manger and select &lt;code&gt;&amp;lt;your server&amp;gt;/Sites/Default Web Site&lt;/code&gt;. There should be a URL Rewrite modul. Open it, right-click on the inbound rules list and select ‘Add Rules’. Select ‘Reverse Proxy’ then OK. Allow enabling proxy functionality. Enter &lt;code&gt;localhost:8080&lt;/code&gt; in the inbound rule server name, then OK. This creates a &lt;code&gt;web.config&lt;/code&gt; file in &lt;code&gt;c:\inetpub\wwwroot&lt;/code&gt; that looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;
&amp;lt;configuration&amp;gt;
    &amp;lt;system.webServer&amp;gt;
        &amp;lt;rewrite&amp;gt;
            &amp;lt;rules&amp;gt;
                &amp;lt;rule name=&quot;ReverseProxyInboundRule1&quot; stopProcessing=&quot;true&quot;&amp;gt;
                    &amp;lt;match url=&quot;(.*)&quot; /&amp;gt;
                    &amp;lt;action type=&quot;Rewrite&quot; url=&quot;http://localhost:8080/{R:1}&quot; /&amp;gt;
                &amp;lt;/rule&amp;gt;
            &amp;lt;/rules&amp;gt;
        &amp;lt;/rewrite&amp;gt;
    &amp;lt;/system.webServer&amp;gt;
&amp;lt;/configuration&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;At this point, &lt;a href=&quot;http://your-server-name.cloudapp.net&quot;&gt;http://your-server-name.cloudapp.net&lt;/a&gt; should publicly resolve to the new TeamCity instance.&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.virtew.com/2012/08/18/setup-teamcity-on-an-azure-virtual-machine-for-windows-8-metro-style-apps/&quot;&gt;virtew - Setup TeamCity on an Azure Virtual Machine for Windows 8 Metro Style Apps&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://worldsgreatestazuredemo.com/&quot;&gt;World’s Greatest Azure Demo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;see-also&quot;&gt;See also&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://jake.ginnivan.net/teamcity-ui-test-agent/&quot;&gt;Jake Ginnivan’s blog - TeamCity UI Test Agent&lt;/a&gt; - Jake uses Sysinternals Autologon and TightVNC to get a VM with an open desktop session so that automated UI tests will work&lt;/li&gt;
&lt;/ul&gt;

</description>
				<pubDate>Sat, 13 Dec 2014 00:00:00 +1000</pubDate>
				<link>http://bendetat.com/set-up-teamcity-on-an-azure-instance-redux.html</link>
				<guid isPermaLink="true">http://bendetat.com/set-up-teamcity-on-an-azure-instance-redux.html</guid>
			</item>
		
			<item>
				<title>Uninstrumented statistical .NET profiling using open source tools</title>
				<description>&lt;p&gt;Profilers are unusual tools in that you generally never need one, right up to just past the point where users are melting down and you desperately need one. Usually you get a condition that involves many different pieces of code and internal services and libraries put together in way that quickly grinds your application to a painful halt. Those conditions are (hopefully) pretty rare and in my experience come up when you change something in one area that turns out to badly affect a seemingly unrelated area.&lt;/p&gt;

&lt;p&gt;This post is about tools for profiling client applications and applications running in-process (like a console application wrapped around a TopShelf service or self-hosting OWIN). So far I haven’t had a need for any ASP.NET profiling but it looks like &lt;a href=&quot;http://miniprofiler.com/&quot;&gt;MiniProfiler&lt;/a&gt; looks compelling - although it doesn’t appear to uninstrumented call profiling, which is probably unlikely to help in that environment anyway.&lt;/p&gt;

&lt;p&gt;Since I don’t tend to use or need a profiler that often (although automated profiling should really happen as part of continuous integration) I don’t have a profiler of choice. I’m told that I should use windbg but because I don’t want to break my mind I’ll avoid that as long as a simpler tool solves the immediate problem. JetBrains’ &lt;a href=&quot;https://www.jetbrains.com/profiler/&quot;&gt;dotTrace&lt;/a&gt; product has been recommended to me fairly consistently, so the second last time I needed to diagnose one of those ‘crashing halt’ issues in a WPF app I downloaded the trial. It was great, I found the issue pretty quickly, but the only view that I actually used was the call tree, which shows the methods that have the most amount of CPU time in a tree. This view lets you crawl down these methods to find the callers, and their callers, and eventually the source of the inefficient operation.&lt;/p&gt;

&lt;p&gt;The ten day trial expired without me needing a profiler again, and it was another two months before I had a similar requirement, so I didn’t end up purchasing it. A week ago I again needed a profiler to figure out a condition that hung the UI thread in a WPF application. I’m definitely not against paying for tooling and the &lt;a href=&quot;https://www.jetbrains.com/resharper/buy/index.jsp?product=ultimate&quot;&gt;ReSharper Ultimate&lt;/a&gt; bundle is only $100 more than standalone ReSharper, but I told somebody yesterday that I usually used an open source tool that gave me the call tree, which was all I usually needed. I figured that I should probably write it up, so here we are.&lt;/p&gt;

&lt;h3 id=&quot;basics-of-statistical-call-time-profiling&quot;&gt;Basics of statistical call time profiling&lt;/h3&gt;

&lt;p&gt;The idea here is to record the amount of time spent in any method. The total time in a given method is the time spent executing the actual code in that method plus the total time spent in other methods called by that method, including time spend waiting for things (blocked on IO). In a tree view you can visualise this in two ways: descending into methods that a given method calls, or ascending into callers of a given method. To find a method that is a target for optimisation, you would find a method that has a higher than expected usage and either descend down the callers to find an inefficient method, or ascending into callers of the method to find an inefficient use of the called code - as an example, code executed inefficiently inside a loop. I tend to go from one view to the other to help identify a call chain that might contain a target then work my way up or down.&lt;/p&gt;

&lt;h3 id=&quot;the-rancid-depths-of-winforms-profiling&quot;&gt;The rancid depths of WinForms profiling&lt;/h3&gt;

&lt;p&gt;For my sins I spent several years developing a LOB WinForms application, which because reasons&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; it needed a fair bit of profiling and massaging.&lt;/p&gt;

&lt;p&gt;Initially I used a tool called &lt;a href=&quot;https://code.google.com/p/nprof/&quot;&gt;nprof&lt;/a&gt;. The 0.9.1 version introduced me to the call tree view, but hadn’t been updated since 2006 and I believe had issues after I moved to .NET 3. The 0.11 version was a bit more recent but appears to have been a rewrite three years later (2009). It turned out to be quite buggy and difficult to get the information I needed. Shortly thereafter the nprof homepage indicated that development had stopped and pointed to &lt;a href=&quot;https://code.google.com/p/slimtune/&quot;&gt;SlimTune&lt;/a&gt; as a successor.&lt;/p&gt;

&lt;h3 id=&quot;slimtune&quot;&gt;SlimTune&lt;/h3&gt;

&lt;p&gt;SlimTune also appears to be abandoned, with the latest 0.3.0 version released in February 2011 and the source untouched since then. Luckily it still works with a WPF app using .NET 4.5.1, which was good enough for me. There are also options to connect to ASP.NET / IIS, CLR services and native applications but I haven’t used any of these options.&lt;/p&gt;

&lt;p&gt;This isn’t a pretty application (it’s described as early beta) and needs a bit of hand-holding to get the results. It wants to open ports 3000 and 3001 in the firewall, which it uses to communicate between the profiler and the application being profiled.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/QeAVxHM.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can’t connect to an application that wasn’t launched by SlimTune itself, since it needs to attach the instrumentation at startup. This means that you can’t connect to an already running application, including one that you’ve F5ed from Visual Studio. You can start an application from SlimTune and connect to it later, say if you have to navigate to the state that you want to profile and then connect, to limit the amount of data in the profile results to reduce any noise.&lt;/p&gt;

&lt;p&gt;The results can be visualised in real time or after the fact. The profile results are saved to a SQLite file that can be opened and visualised later.&lt;/p&gt;

&lt;p&gt;SlimTune has 5 visualisers:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Function Details, which shows a pie chart with the top utilisation of methods called in the selected method&lt;/li&gt;
  &lt;li&gt;NProf-Style TreeViews, a split view which shows the CPU time spent per method as a % of the parent (descending into methods that the given method calls) and the total time per method as a % of the total (descending into methods that call the given method)&lt;/li&gt;
  &lt;li&gt;Per-Thread Call Trees, this is the view ‘recommended’ by SlimTune and shows all of the threads used by the application, descending down into called methods&lt;/li&gt;
  &lt;li&gt;Performance Counters, this shows an empty chart so I assume it is incomplete&lt;/li&gt;
  &lt;li&gt;Query Debugger, this throws an exception so it is definitely incomplete&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I generally use the NProf-style TreeViews as it is comprehensive and the split view allows navigation in both directions, however the per-thread call trees is also useful in identifying blocking code on a specific thread.&lt;/p&gt;

&lt;h3 id=&quot;ignotum-per-ignotius&quot;&gt;Ignotum per ignotius&lt;/h3&gt;

&lt;p&gt;Should you use SlimTune over dotTrace? If you’re happy to spend a little bit of money and want Visual Studio integration, nope. dotTrace is a great application with heaps of features that SlimTune doesn’t even come closing to touching on. Uninstrumented open source statistical .NET profiling is a desolate wasteland and dotTrace is a better decision by far (remembering I haven’t tried any other commercial profilers).&lt;/p&gt;

&lt;p&gt;That said, if you need a profiler once a month at most and don’t want or need VS integration, SlimTune is a viable substitute. Just don’t expect too much.&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;A handrolled ORM, cache, IoC container and business layer (with n-level undo! I had been reading a lot of &lt;a href=&quot;http://www.lhotka.net/&quot;&gt;Rockford Lhotka&lt;/a&gt;’s work)  &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
				<pubDate>Sun, 07 Dec 2014 00:00:00 +1000</pubDate>
				<link>http://bendetat.com/uninstrumented-statistical-dotnet-profiling-using-open-source-tools.html</link>
				<guid isPermaLink="true">http://bendetat.com/uninstrumented-statistical-dotnet-profiling-using-open-source-tools.html</guid>
			</item>
		
			<item>
				<title>Get running fast on GitHub and BitBucket</title>
				<description>&lt;p&gt;These are the steps I use to set up a new PC with Git. I mainly use Git on the command line, with TortoiseGit for staging commits and visualising logs and Beyond Compare for diffs and merges.&lt;/p&gt;

&lt;h3 id=&quot;gh4w&quot;&gt;GH4W&lt;/h3&gt;
&lt;p&gt;I use &lt;a href=&quot;http://windows.github.com/&quot;&gt;GitHub for Windows&lt;/a&gt; to get up and running quickly with GitHub on a new machine. It takes care of setting up key files, messing with paths, and making everything play nice with Github. Opening a Powershell instance from GH4W gives me a relatively nice msysgit setup. Then the &lt;code&gt;github_rsa.pub&lt;/code&gt; file in &lt;code&gt;C:\Users\**username**\.ssh&lt;/code&gt; can be added to BitBucket and other services to get everything running with the same credentials. Generally I won’t use GH4W after this as I’m mostly a command line junky, with gaps filled by TortoiseGit.&lt;/p&gt;

&lt;h3 id=&quot;put-cbin-on-the-path&quot;&gt;Put &lt;code&gt;c:\bin&lt;/code&gt; on the path&lt;/h3&gt;
&lt;p&gt;Create a folder called &lt;code&gt;bin&lt;/code&gt; somewhere fairly central. I use &lt;code&gt;c:\bin&lt;/code&gt;. Then put it on the path. Now you can drop scripts and executables into the &lt;code&gt;bin&lt;/code&gt; folder and they will work in any console anywhere. To mess with the path:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Open the System control panel item (&lt;code&gt;Win&lt;/code&gt;-&lt;code&gt;pause/break&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;Select Advanced system settings (opens the System Properties dialog)&lt;/li&gt;
  &lt;li&gt;Select Environment Variables&lt;/li&gt;
  &lt;li&gt;Update both of the Path variables (in User variables and System variables), add &lt;code&gt;;c:\bin&lt;/code&gt; to the end of the values (don’t delete the existing value)&lt;/li&gt;
  &lt;li&gt;‘OK’ out of the dialogs. You will need to restart any open command prompts to get the path change to work, rebooting is usually the fastest way to make sure the change has gone through (logging out and in may work too).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/hWvTzkl.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;tortoisegit&quot;&gt;TortoiseGit&lt;/h3&gt;
&lt;p&gt;I use &lt;a href=&quot;code.google.com/p/tortoisegit&quot;&gt;TortoiseGit&lt;/a&gt; to help stage commits and for visualising the log. I can bypass clicking around in Explorer by adding this batch file (named &lt;code&gt;tgit.bat&lt;/code&gt;) to somewhere in my path (I usually add &lt;code&gt;c:\bin&lt;/code&gt; to the path for this reason). This is based on a &lt;a href=&quot;http://ayende.com/blog/4749/executing-tortoisegit-from-the-command-line&quot;&gt;post by Oren Eini&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@start &quot;TortoiseGit&quot; &quot;C:\Program Files\TortoiseGit\bin\TortoiseGitProc.exe&quot; /command:%1 /path:.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;TortoiseGit has a number of commands available from the command line. Use &lt;code&gt;tgit commit&lt;/code&gt; to preview, stage and execute a commit, and &lt;code&gt;tgit log&lt;/code&gt; to see the log.&lt;/p&gt;

&lt;h3 id=&quot;switch-to-cmder&quot;&gt;Switch to Cmder&lt;/h3&gt;
&lt;p&gt;I use &lt;a href=&quot;http://bliker.github.io/cmder/&quot;&gt;Cmder&lt;/a&gt; as a console replacement but the msysgit instance included in the full download doesn’t work with the public key named &lt;code&gt;github_rsa.pub&lt;/code&gt;. I just copied &lt;code&gt;github_rsa.pub&lt;/code&gt; to &lt;code&gt;id_rsa.pub&lt;/code&gt; and &lt;code&gt;github_rsa&lt;/code&gt; to &lt;code&gt;id_rsa&lt;/code&gt;. Cmder has support for aliases using the &lt;code&gt;alias&lt;/code&gt; command but I usually use the &lt;code&gt;c:\bin&lt;/code&gt; path with batch files to keep everything relatively portable. Install Cmder to &lt;code&gt;c:\bin\cmder&lt;/code&gt; and drag &lt;code&gt;C:\bin\cmder\cmder.exe&lt;/code&gt; onto the task bar for easy access. Set the startup directory to your usual source folder for easy access (&lt;code&gt;c:\source&lt;/code&gt; is mine):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/22KOl45.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;fine-tune-git&quot;&gt;Fine-tune Git&lt;/h3&gt;
&lt;p&gt;Run this to add a Git alias that opens the global configuration in its default editor (Vim) (&lt;code&gt;git ec&lt;/code&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git config --global alias.ec &quot;config --global -e&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now that’s in you can hand edit the config to add some or all of &lt;a href=&quot;http://haacked.com/archive/2014/07/28/github-flow-aliases/&quot;&gt;Phil Haack’s GitHub Flow aliases&lt;/a&gt;. I usually just use ‘wipe’, ‘save’ and ‘undo’:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;wipe = !git add -A &amp;amp;&amp;amp; git commit -qm &#39;WIPE SAVEPOINT&#39; &amp;amp;&amp;amp; git reset HEAD~1 --hard
save = !git add -A &amp;amp;&amp;amp; git commit -m &#39;SAVEPOINT&#39;
undo = reset HEAD~1 --mixed
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Run this to configure git to push the current branch by default:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git config --global push.default current
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Also check this out: &lt;a href=&quot;https://help.github.com/articles/set-up-git&quot;&gt;https://help.github.com/articles/set-up-git&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Looks like password caching is an issue with Cmder’s msysgit, but only with non-SSH remote urls. If &lt;code&gt;.git/config&lt;/code&gt; looks like this it shoud use the above keys:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[remote &quot;origin&quot;]
	url = git@github.com:rgrrrrrba/rgrrrrrba.github.io.git
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;beyond-compare&quot;&gt;Beyond Compare&lt;/h3&gt;
&lt;p&gt;I use (and happily pay for) &lt;a href=&quot;http://www.scootersoftware.com/moreinfo.php&quot;&gt;Beyond Compare 4&lt;/a&gt; and the &lt;a href=&quot;http://www.scootersoftware.com/support.php?zz=kb_vcs&quot;&gt;instructions here&lt;/a&gt; were helpful. To get Git to use BC4 for diffs and merges:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git config --global merge.tool bc4
git config --global mergetool.bc4.path &quot;C:/Program Files (x86)/Beyond Compare 4/BCompare.exe&quot;                 
git config --global diff.tool bc4
git config --global difftool.bc4.path &quot;C:/Program Files (x86)/Beyond Compare 4/BCompare.exe&quot;                 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice that you need to use forward-slashes in the path to BC. &lt;code&gt;~/.gitconfig&lt;/code&gt; should end up like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[merge]
	tool = bc4
[mergetool &quot;bc4&quot;]
	path = C:/Program Files (x86)/Beyond Compare 4/BCompare.exe
[diff]
	tool = bc4
[difftool &quot;bc4&quot;]
	path = C:/Program Files (x86)/Beyond Compare 4/BCompare.exe
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Run these commands to tighten up things a bit by skipping confirmation prompts and removing merge backups:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git config --global difftool.prompt false
git config --global mergetool.prompt false
git config --global mergetool.keepBackup false
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;TortoiseGit also needs to be configured to use Beyond Compare as its diff and merge tool. Do this in TortoiseGit’s Settings screen (right-click in Explorer, TortoiseGit, Settings, or just use &lt;code&gt;tgit settings&lt;/code&gt; if you added the alias):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/fhkbebQ.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

</description>
				<pubDate>Sat, 29 Nov 2014 00:00:00 +1000</pubDate>
				<link>http://bendetat.com/get-running-fast-on-github-and-bitbucket.html</link>
				<guid isPermaLink="true">http://bendetat.com/get-running-fast-on-github-and-bitbucket.html</guid>
			</item>
		
			<item>
				<title>Compare branches in TortoiseGit</title>
				<description>&lt;p&gt;Using a PR / peer review model when developing in a team is a great way keep quality high with a large number of changes. This model relies on being able to review diffs easily, something which Bitbucket is usually pretty good at.&lt;/p&gt;

&lt;p&gt;Unfortunately Bitbucket falls down once PRs reach a certain size:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/JRllPwb.png&quot; alt=&quot;This merge is too large to display&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;i haz a sadz&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Ideally, PRs should be small enough that this doesn’t crop up, but when you’re performing large refactors or working on significant feature branches the ideal isn’t always possible.&lt;/p&gt;

&lt;p&gt;TortoiseGit to the rescue: &lt;a href=&quot;http://wikgren.fi/compare-diff-branches-in-tortoise-git-or-how-to-preview-changes-before-doing-a-merge/&quot;&gt;Compare (Diff) branches in Tortoise Git, or how to preview changes before doing a merge&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Basically:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;shift&lt;/em&gt;-right click the folder&lt;/li&gt;
  &lt;li&gt;Select &lt;code&gt;TortoiseGit -&amp;gt; Browse Reference&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Select the two branches to compare using control (usually the current branch and &lt;code&gt;master&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;Right-click and select &lt;code&gt;Compare selected refs&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
				<pubDate>Thu, 07 Aug 2014 00:00:00 +1000</pubDate>
				<link>http://bendetat.com/compare-branches-in-tortoise-git.html</link>
				<guid isPermaLink="true">http://bendetat.com/compare-branches-in-tortoise-git.html</guid>
			</item>
		
			<item>
				<title>Resolving a list of type registrations from Autofac</title>
				<description>&lt;p&gt;I needed to get all types that implemented a given interface that were registered with Autofac. Not a set of factories, that would be as simple as this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class Consumer
{
	public Consumer(IEnumerable&amp;lt;Func&amp;lt;IFoo&amp;gt;&amp;gt; fooFactories)
	{
		// ...
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What I really need is something like &lt;code&gt;Consumer(IEnumerable&amp;lt;Type&amp;gt; fooTypes)&lt;/code&gt; where the types are everything implementing &lt;code&gt;IFoo&lt;/code&gt;, but of course Autofac can’t resolve that.&lt;/p&gt;

&lt;p&gt;Inspired by &lt;a href=&quot;http://stackoverflow.com/a/9503695/149259&quot;&gt;this StackOverflow answer&lt;/a&gt;, here’s an extension method that does what I need:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public static class LifetimeScopeExtensions
{
    public static IEnumerable&amp;lt;Type&amp;gt; GetImplementingTypes&amp;lt;T&amp;gt;(this ILifetimeScope scope)
    {
        return scope.ComponentRegistry
            .RegistrationsFor(new TypedService(typeof (T)))
            .Select(x =&amp;gt; x.Activator)
            .OfType&amp;lt;ReflectionActivator&amp;gt;()
            .Select(x =&amp;gt; x.LimitType);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To use it my consumer just takes an &lt;code&gt;ILifetimeScope&lt;/code&gt; dependency:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public Consumer(ILifetimeScope scope) 
{
	var fooTypes = scope.GetImplementingTypes&amp;lt;IFoo&amp;gt;();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that I needed to register the types both as the base type &lt;code&gt;IFoo&lt;/code&gt; (for the implementing type resolution) and as self, so I could later resolve using &lt;code&gt;scope.Resolve(fooType)&lt;/code&gt;. My registration looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        builder.RegisterAssemblyTypes(typeof (IFoo).Assembly)
            .Where(t =&amp;gt; t.IsAssignableTo&amp;lt;IFoo&amp;gt;())
            .Where(t =&amp;gt; !t.IsAbstract)
            .As&amp;lt;IFoo&amp;gt;()
            .AsSelf()
            .InstancePerDependency();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;http://media.giphy.com/media/xQzml5M6C8Wly/giphy.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

</description>
				<pubDate>Thu, 26 Jun 2014 00:00:00 +1000</pubDate>
				<link>http://bendetat.com/autofac-get-registration-types.html</link>
				<guid isPermaLink="true">http://bendetat.com/autofac-get-registration-types.html</guid>
			</item>
		
	</channel>
</rss>