I"
<p>I just read a <a href="https://www.davesquared.net/2010/12/revisting-replacing-ruby-instance.html">post by David Tchepak</a> where he describes a way of replacing a method on an instance of a class on the fly, allowing the replacement to close over locals. This would be useful for unit testing at the least. The technique that Dave uses is cool – this is a simplified version:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>name = "Anonymous Dave"
greeter.extend Module.new do
  self.send(:define_method, :say_hello) do
    puts "G'day #{name}"
  end
end
</code></pre></div></div>

<p>This is replacing the <code class="language-plaintext highlighter-rouge">greeter.say_hello</code> method with the closure on the fourth line. Since I’m spoiled by C#’s lambda syntax, I wanted to get this onto one line:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>greeter.extend Module.new { self.send(:define_method, :say_hello) { puts "G'day #{name}" }}
</code></pre></div></div>

<p>Nice, but there is a bit of repetition. <code class="language-plaintext highlighter-rouge">.extend</code> is a method on the Object class, which extends the instance with the new module. Unfortunately Object doesn’t have a method to just replace a single method. The following opens the Object and moves much of the boilerplate code into a new method to do that:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>class Object
  def redefine(name, &amp;block)
    self.extend Module.new {
      self.send(:define_method, name, block)
    }
  end
end
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">redefine</code> probably isn’t the best name, since there is no need for the named method to exist before redefining it. This is the new way to replace the say_hello method:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>greeter.redefine(:say_hello) { puts "G'day #{name}" }
</code></pre></div></div>

<p>Methods with parameters can be defined in the same way:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>greeter.redefine(:say_hello_to) { |another_name| puts "Hello to #{another_name}" }
greeter.say_hello_to 'Dave'
</code></pre></div></div>

<p>Very cool. Many thanks to Dave Tchepak for his article, otherwise I wouldn’t have thought this was possible at all.</p>
:ET