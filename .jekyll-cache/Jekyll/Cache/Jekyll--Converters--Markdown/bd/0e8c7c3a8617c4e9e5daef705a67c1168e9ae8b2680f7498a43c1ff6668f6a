I"ˆ<ol>
  <li>Better boundary detection for the player</li>
  <li><a href="https://becdetat.com/monogame-shooter-converting-tests-to-bdd-style.html">Converting tests to BDD style</a></li>
</ol>

<p>This is the first post of hopefully many as I learn MonoGame by extending on a <a href="https://blogs.msdn.com/b/tarawalker/archive/2012/12/04/windows-8-game-development-using-c-xna-and-monogame-3-0-building-a-shooter-game-walkthrough-part-1-overview-installation-monogame-3-0-project-creation.aspx">tutorial series by Tara Walker</a>. The source code is available, both <a href="https://github.com/becdetat/monogame-tw-tutorial/commit/26a12e3595604d807fbe0c76417e34fb99155007">before</a> and <a href="https://github.com/becdetat/monogame-tw-tutorial/tree/251ab871697da3b2746dc6be265f15d5acdc2e8d">after</a>.</p>

<p>In this post I walk through adding screen edge detection to the player‚Äôs ship, using Test-Driven Development practices where possible to keep a high quality of code.</p>

<h3 id="changes-since-last-post">Changes since last post</h3>

<p>I have created a <code class="language-plaintext highlighter-rouge">Sprite</code> class, which is the base class for both the <code class="language-plaintext highlighter-rouge">Player</code> class and the <code class="language-plaintext highlighter-rouge">Enemy</code> class. The <code class="language-plaintext highlighter-rouge">Sprite</code> class uses a velocity and maximum speed to calculate the position in each frame. I changed the <code class="language-plaintext highlighter-rouge">ViewportWrapper</code> to expose the <code class="language-plaintext highlighter-rouge">Viewport</code> directly. Turns out the <code class="language-plaintext highlighter-rouge">Viewport</code> object is just a basic <code class="language-plaintext highlighter-rouge">struct</code> without any dependencies, so it should play nice with tests. Because it is a <code class="language-plaintext highlighter-rouge">struct</code>, which is a value type, it can‚Äôt be directly registered with AutoFac, so I need to keep the <code class="language-plaintext highlighter-rouge">IViewport</code> abstraction. I also added an <code class="language-plaintext highlighter-rouge">IDrawMyself</code> interface. MonoGame has an <code class="language-plaintext highlighter-rouge">IDrawable</code> interface but it comes with some baggage. <code class="language-plaintext highlighter-rouge">IDrawMyself</code> is implemented by <code class="language-plaintext highlighter-rouge">IAnimation</code> and will eventually be implemented by <code class="language-plaintext highlighter-rouge">ITexture2D</code> and <code class="language-plaintext highlighter-rouge">IParallaxingBackground</code>.</p>

<p>Implementations of the <code class="language-plaintext highlighter-rouge">Sprite</code> class use events to hook into the <code class="language-plaintext highlighter-rouge">Update()</code> and <code class="language-plaintext highlighter-rouge">Draw()</code> methods. Here is how the <code class="language-plaintext highlighter-rouge">Enemy</code> class updates its <code class="language-plaintext highlighter-rouge">IsActive</code> state before the position is recalculated (the event is subscribed to in the <code class="language-plaintext highlighter-rouge">Enemy</code> constructor):</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public Enemy(..) 
{
    // ..

    BeforeUpdate += state =&gt;
    {
        if (Position.X &lt; -Width || _health &lt;= 0)
        {
            IsActive = false;
        }
    };

    // ...
}
</code></pre></div></div>

<p>I also moved to a normal Windows (DirectX) project instead of the Windows 8 Store app that I started with. The only reason for this is so I can use a nice mocking library with little friction, as the portable class libraries that you have to use with Windows 8 Store apps don‚Äôt support <code class="language-plaintext highlighter-rouge">Reflection.Emit</code>. I only had to change one line of code to retarget the game, so I‚Äôm pretty sure moving to different targets further along will be straightforward.</p>

<h3 id="boundary-technique">Boundary technique</h3>

<p>This technique is borrowed from a <a href="https://pluralsight.com/training/courses/TableOfContents?courseName=xna&amp;highlight=john-sonmez_xna-m1-introduction*1,6#xna-m1-introduction">Pluralsight course</a> by <a href="https://twitter.com/jsonmez">John Sonmez</a>.</p>

<p>Basically we‚Äôll describe four rectangles around the boundary we want to limit the player‚Äôs ship to. In practice these will be slightly inset from the screen and a bit further in on the right hand side, to keep the player from going too far forward.</p>

<p><img src="https://i.imgur.com/sMbJiiv.png" alt="" /></p>

<p>To keep things simple, these rectanges will be ‚Äòowned‚Äô by the player.</p>

<h3 id="writing-the-first-test">Writing the first test</h3>

<p>To make sure that everything is working as we expect, the first test will just confirm that given a ship somewhere in the middle of the screen, with no inputs (keys all up, game pad zeroed), when updating the player, the position does not change. This seems like an obvious test but it will give us a lot of guidance on how to write the rest of the tests and possibly make some changes to help testing along.</p>

<p>I‚Äôm using <a href="https://github.com/xunit/xunit">xUnit</a> as the testing framework but the tests should be pretty much the same whether you‚Äôre using xUnit, NUnit or some other framework. I have a post on <a href="xunit-tests-with-a-windows-8-1-store-app.html">how to set up xUnit for a Windows 8 Store app</a> if that‚Äôs what you‚Äôre targeting. To install xUnit, open the Package Manager Console, select the tests assembly, and enter <code class="language-plaintext highlighter-rouge">install-package xunit</code>.</p>

<p><img src="https://i.imgur.com/trq8uv3.png" alt="" /></p>

<p>I will need to create some mock objects to pass into the <code class="language-plaintext highlighter-rouge">Player</code> constructor. I‚Äôm going to use <a href="https://nsubstitute.github.io/">NSubstitute</a> (<code class="language-plaintext highlighter-rouge">install-package nsubstitute</code>).</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[Fact]
public void ThePositionStaysTheSame()
{
    var contentManager = Substitute.For&lt;IContentManager&gt;();
    var viewport = Substitute.For&lt;IViewport&gt;();
    var animationFactory = Substitute.For&lt;IAnimationFactory&gt;();
    var spriteBatch = Substitute.For&lt;ISpriteBatch&gt;();

    var player = new Player(contentManager, viewport, animationFactory, spriteBatch);
}
</code></pre></div></div>

<p>I‚Äôm creating some substitutes for the player‚Äôs dependencies and constructing the player object. If I run the tests at this point everything is successful, which is good because it means the player class is happy to construct itself using the substituted dependencies.</p>

<p>Now for the ‚Äúact‚Äù part of the test. I‚Äôll set an initial position, then call <code class="language-plaintext highlighter-rouge">Update()</code> with no mocked inputs.</p>

<p><img src="https://i.imgur.com/I4C0vsi.png" alt="" /></p>

<p>Creating these test input states are going to be a problem in the long term. For now I‚Äôll just move it into a seperate method. I‚Äôll revisit this in the next test.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>var initialPosition = new Vector2(4, 5);
player.Position = initialPosition;

var state = GetInputState();
player.Update(state);
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">GetInputState()</code> returns a new <code class="language-plaintext highlighter-rouge">ShooterGameInputState</code> instance with default game pad, keyboard and mouse states and a default <code class="language-plaintext highlighter-rouge">GameTime</code>.</p>

<p>I run my test again to make sure everything is still happy, and I‚Äôm pleased to see it fail. It seems that the <code class="language-plaintext highlighter-rouge">Player.Update()</code> method was using some static <code class="language-plaintext highlighter-rouge">TouchPanel</code> calls, which resulted in a null reference exception outside of the game. I simply updated the <code class="language-plaintext highlighter-rouge">ShooterGameInputState</code> class with the touch panel state, although it looks like mocking out touch panel inputs will be problematic unless they are fully abstracted.</p>

<p>Now I need to assert that the player didn‚Äôt move. I‚Äôm using <a href="https://shouldly.github.io/">Shouldly</a> as the assertions library (<code class="language-plaintext highlighter-rouge">install-package shouldly</code>).</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>player.Position.ShouldBe(initialPosition);
</code></pre></div></div>

<p>My test passes! I make sure the comparison is working by testing the position against <code class="language-plaintext highlighter-rouge">Vector2.Zero</code> (because I can‚Äôt trust the tests quite yet).</p>

<h3 id="testing-the-players-movement">Testing the player‚Äôs movement</h3>

<p>If the left thumbstick is fully up and left, with the player‚Äôs default speed of 8, the player should move up 8 and left 8 after one update (note that this isn‚Äôt actually true, read on for an explanation). This will be the second test.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public class WhenLeftThumbStickFullyLeftAndUp
{
    [Fact]
    public void ThenThePositionMovesUpAndLeftAtFullSpeed()
    {
    }
}
</code></pre></div></div>

<p>I don‚Äôt want to simply copy the player initialization code, especially since I know I‚Äôm going to write a pile of these tests. So I‚Äôm going to extract out the creation using the <a href="https://martinfowler.com/bliki/ObjectMother.html">Object Mother</a> pattern.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public static partial class ObjectMother
{
    public static partial class Sprites
    {
        public static partial class PlayerSprite
        {
            public static partial class Players
            {
                public static PlayerBuilder Default { get { return new PlayerBuilder();} }

                public class PlayerBuilder
                    : BuilderFor&lt;Player&gt;
                {
                    public override Player Build()
                    {
                        return new Player(
                            Substitute.For&lt;IContentManager&gt;(),
                            Substitute.For&lt;IViewport&gt;(),
                            Substitute.For&lt;IAnimationFactory&gt;(),
                            Substitute.For&lt;ISpriteBatch&gt;());
                    }
                }
            }
        }
    }
}
</code></pre></div></div>

<p>The nested classes are so we can add to the object mothers and use the same naming convention as the object‚Äôs namespace. If managed properly, the Object Mother pattern can scale out to hundreds of builders with a consistent interface, allowing a high amount of control using the domain language but keeping a very high level of code reuse.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>var player = ObjectMother.Sprites.PlayerSprite.Players.Default.Build();

var initialPosition = new Vector2(4, 5);
player.Position = initialPosition;
</code></pre></div></div>

<p>I‚Äôm also going to move the input state creation into an object mother but I‚Äôll add an entry point to set the left thumbstick position. I‚Äôll add an object mother for <code class="language-plaintext highlighter-rouge">GamePadState</code> since that‚Äôs what will be passed into the input state. Here is the builder part:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public class GamePadStateBuilder
    : BuilderFor&lt;GamePadState&gt;
{
    private Vector2 _leftThumbStick = Vector2.Zero;

    public override GamePadState Build()
    {
        return new GamePadState(_leftThumbStick, Vector2.Zero, 0, 0);
    }

    public GamePadStateBuilder WithLeftThumbstick(Vector2 position)
    {
        _leftThumbStick = position;
        return this;
    }
}
</code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">BuilderFor</code> class has some ‚Äòmagic‚Äô to let you record the builder configuration using a <a href="https://github.com/becdetat/monogame-tw-tutorial/blob/master/src/ShooterGame.Tests/ObjectMothers/BuilderFor.cs">DIY fluent interface</a>. Here‚Äôs next part of the test, creating the input state with the left gamepad stick fully up and right. Note that thumbstick vector‚Äôs Y value is <em>positive</em> in the <em>up</em> direction and <em>negative</em> in the <em>down</em> direction, which is the opposite to the screen, which decreases to zero at you approach the top of the screen.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>var gamePadState = ObjectMother.Input.GamePadStates.Default
    .WithLeftThumbstick(new Vector2(1, 1))
    .Build();
var state = ObjectMother.Core.ShooterGameInputStates.Default
    .WithCurrentGamePadState(gamePadState)
    .Build();
</code></pre></div></div>

<p>With that I add the ‚Äòact‚Äô and ‚Äòassert‚Äô parts of the test:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>player.Update(state);

player.Position.ShouldBe(initialPosition + new Vector2(player.Speed, -player.Speed));
</code></pre></div></div>

<p>When running this I found something interesting about the game pad thumbsticks. When creating the <code class="language-plaintext highlighter-rouge">GamePadThumbSticks</code> object used to represent the thumbsticks, a static value <code class="language-plaintext highlighter-rouge">GamePadThumbSticks.GateType</code> is used to normalize the input value. The default gate is <code class="language-plaintext highlighter-rouge">Round</code>, which gates the position to a circular shape. Stand back, I‚Äôm going to do some math.</p>

<p><img src="https://i.imgur.com/azB0IGU.png" alt="" /></p>

<p>So the thumbstick at full extension to the top right is actually <code class="language-plaintext highlighter-rouge">(0.7071, 0.7071)</code>, so the player sprite will move <code class="language-plaintext highlighter-rouge">8 * 0.7071</code> pixels per update in the X and Y axes. I‚Äôll update the test accordingly:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>player.Update(state);

var normalisedVelocity = Math.Sqrt(2)/2.0d;
var changeInPosition = new Vector2(
    player.Speed*(float) normalisedVelocity,
    -player.Speed*(float) normalisedVelocity);

player.Position.ShouldBe(initialPosition + changeInPosition);
</code></pre></div></div>

<p>This test finally passes. This revealed something about the keyboard, mouse and d-pad inputs which I hadn‚Äôt noticed. When those inputs are triggering diagonal movement my player is moving with a velocity of <code class="language-plaintext highlighter-rouge">(1, 1)</code>, which is significantly faster than the thumbpad‚Äôs velocity of <code class="language-plaintext highlighter-rouge">(0.7071, 0.7071)</code>. This will eventually have to be corrected.</p>

<h3 id="configuring-the-players-boundaries">Configuring the player‚Äôs boundaries</h3>

<p>I want to be able to configure parts of the player. To be able to unit test the player I need to be able to set the configuration outside of the player class. I could do this by passing things into the constructor:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>new Player(contentManager, viewport, ...., leftBoundary, topBoundary, rightBoundary, ...)
</code></pre></div></div>

<p>This is a bit unwieldy and will get worse as new configurable things get added to the player. Instead I could wrap the configuration in another class:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>class PlayerConfiguration
{
    public int LeftBoundary { get; set; }
    public int TopBoundary { get; set; }
    // ...
}

new Player(contentManager, viewport, ..., playerConfiguration);
</code></pre></div></div>

<p>Because I‚Äôm creating the player using Autofac I can make this more generic and let the runtime configuration be baked in. The sprite‚Äôs width and height should also be in the configuration, because determining width and height using the animation is going to be messy for unit tests.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public interface IPlayerConfiguration
{
    int LeftBoundary { get; }
    int TopBoundary { get; }
    int RightBoundary { get; }
    int BottomBoundary { get; }
    int Width { get; }
    int Height { get; }
}

public class PlayerConfiguration : IPlayerConfiguration, IRegistering
{
    public int LeftBoundary { get { return 20; } }
    public int TopBoundary { get { return 20; } }
    public int RightBoundary { get { return 60; } }
    public int BottomBoundary { get { return 20; } }
    public int Width { get { return 115; } }
    public int Height { get { return 69; } }
}
</code></pre></div></div>

<p>By the way, the boundaries are going to be like padding. The player class will calculate the actual boundaries using the viewport later on.</p>

<p>I need to add the new player configuration to the player‚Äôs object mother‚Äôs <code class="language-plaintext highlighter-rouge">PlayerBuilder</code> class:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public class PlayerBuilder
    : BuilderFor&lt;Player&gt;
{
    private IPlayerConfiguration _playerConfiguration;

    public override Player Build()
    {
        return new Player(
            Substitute.For&lt;IContentManager&gt;(),
            Substitute.For&lt;IViewport&gt;(),
            Substitute.For&lt;IAnimationFactory&gt;(),
            Substitute.For&lt;ISpriteBatch&gt;(),
            _playerConfiguration ?? Substitute.For&lt;IPlayerConfiguration&gt;());
    }

    public PlayerBuilder WithPlayerConfiguration(IPlayerConfiguration playerConfiguration)
    {
        _playerConfiguration = playerConfiguration;
        return this;
    }
}
</code></pre></div></div>

<p>This lets me either use a default <code class="language-plaintext highlighter-rouge">IPlayerConfiguration</code> make with NSubstitute (which will return a default of <code class="language-plaintext highlighter-rouge">0</code> for the boundaries), or pass in my own <code class="language-plaintext highlighter-rouge">IPlayerConfiguration</code> instance. To make this easier to work with I also made an object mother for <code class="language-plaintext highlighter-rouge">IPlayerConfiguration</code>:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public static partial class ObjectMother
{
    public static partial class Sprites
    {
        public static partial class PlayerSprite
        {
            public static partial class PlayerConfigurations
            {
                public static PlayerConfigurationBuilder Default
                {
                    get { return new PlayerConfigurationBuilder(); }
                }

                public class PlayerConfigurationBuilder
                    : BuilderFor&lt;IPlayerConfiguration&gt;
                {
                    private readonly IPlayerConfiguration _playerConfiguration =
                        Substitute.For&lt;IPlayerConfiguration&gt;();

                    public PlayerConfigurationBuilder()
                    {
                        _playerConfiguration.Width.Returns(10);
                        _playerConfiguration.Height.Returns(10);
                    }

                    public override IPlayerConfiguration Build()
                    {
                        return _playerConfiguration;
                    }

                    public PlayerConfigurationBuilder WithLeftBoundary(int boundary)
                    {
                        _playerConfiguration.LeftBoundary.Returns(boundary);
                        return this;
                    }

                    public PlayerConfigurationBuilder WithRightBoundary(int boundary)
                    {
                        _playerConfiguration.RightBoundary.Returns(boundary);
                        return this;
                    }

                    public PlayerConfigurationBuilder WithTopBoundary(int boundary)
                    {
                        _playerConfiguration.TopBoundary.Returns(boundary);
                        return this;
                    }

                    public PlayerConfigurationBuilder WithBottomBoundary(int boundary)
                    {
                        _playerConfiguration.BottomBoundary.Returns(boundary);
                        return this;
                    }
                }
            }
        }
    }
}
</code></pre></div></div>

<p>I also need to provide the player with a sensible viewport in the tests. To do this I created an <a href="https://github.com/becdetat/monogame-tw-tutorial/blob/master/src/ShooterGame.Tests/ObjectMothers/BuilderFor.cs">object mother for the viewport</a> and added a <code class="language-plaintext highlighter-rouge">WithViewport()</code> method to the player object mother.</p>

<h3 id="testing-the-left-boundary">Testing the left boundary</h3>

<p>I‚Äôm guessing that the easiest boundaries to test will be the left and top, since I don‚Äôt have to worry about the size of the viewport yet. So my first test will be, with a left boundary of 10, with the player sitting on that boundary, with the the thumbstick to the left, the player‚Äôs X position doesn‚Äôt change.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public class WhenPlayerIsOnLeftBoundaryWithLeftThumbStickFullyLeft
{
    [Fact]
    public void ThenThePositionIsNotChanged()
    {
        var configuration = ObjectMother.Sprites.PlayerSprite.PlayerConfigurations.Default
            .WithLeftBoundary(10)
            .Build();
        var player = ObjectMother.Sprites.PlayerSprite.Players.Default
            .WithPlayerConfiguration(configuration)
            .Build();
        var initialPosition = new Vector2(10, 5);
        player.Position = initialPosition;

        var gamePadState = ObjectMother.Input.GamePadStates.Default
            .WithLeftThumbstickFullyLeft()
            .Build();
        var state = ObjectMother.Core.ShooterGameInputStates.Default
            .WithCurrentGamePadState(gamePadState)
            .Build();

        player.Update(state);

        player.Position.X.ShouldBe(initialPosition.X);
    }
}
</code></pre></div></div>

<p>Initially this fails because the boundary isn‚Äôt implemented:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Shouldly.ChuckedAWobblyplayer.Position.X
        should be
    10
        but was
    2
</code></pre></div></div>

<p>This first boundary is pretty easy to describe. The player has a set of boundaries:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public class Player : //...
{
    private readonly Rectangle[] _boundaries;
</code></pre></div></div>

<p>The left boundary is created in the <code class="language-plaintext highlighter-rouge">Player</code> constructor:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>_boundaries = new[]
{
    new Rectangle(-100, 0, 100 + _configuration.LeftBoundary, _viewport.Height),
};
</code></pre></div></div>

<p>This is a rectangle starting 100 pixels to the left of the viewport, finishing at the left boundary, and the full height of the viewport.</p>

<p>Now I need a way of stopping the player from moving into that boundary. In the <code class="language-plaintext highlighter-rouge">Sprite</code> class (the base class for the player and the enemies) the position is set in the <code class="language-plaintext highlighter-rouge">Update</code> method:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>var deltaX = Velocity.X*Speed;
var deltaY = Velocity.Y*Speed;

Position += new Vector2(deltaX, deltaY);
</code></pre></div></div>

<p>So I can add a new virtual method to <code class="language-plaintext highlighter-rouge">Sprite</code> which checks the new position:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>protected virtual bool CheckNewPosition(Vector2 newPosition)
{
    return true;
}
</code></pre></div></div>

<p>The update method needs to be changed to use this method. Replace:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Position += new Vector2(deltaX, deltaY);
</code></pre></div></div>

<p>with:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>var newPosition = Position + new Vector2(deltaX, deltaY);
if (CheckNewPosition(newPosition))
{
    Position = newPosition;
}
</code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">Player</code> class now just needs to override the <code class="language-plaintext highlighter-rouge">CheckNewPosition</code> method. If I make it return <code class="language-plaintext highlighter-rouge">false</code> my new test passes but my existing test fails, but this is a good check to make sure everything is working as expected:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>protected override bool CheckNewPosition(Vector2 newPosition)
{
    return false;
}
</code></pre></div></div>

<p>When I run the game, the player now can‚Äôt be moved at all. I need to change the <code class="language-plaintext highlighter-rouge">CheckNewPosition</code> method to use the boundaries:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>protected override bool CheckNewPosition(Vector2 newPosition)
{
    var newBounds = new Rectangle((int)newPosition.X, (int)newPosition.Y, Width, Height);

    foreach (var boundary in _boundaries)
    {
        if (boundary.Intersects(newBounds))
        {
            return false;
        }
    }

    return true;
}
</code></pre></div></div>

<p>This gets the tests passing, but something strange is going on with the boundaries in the game:</p>

<p><img src="https://i.imgur.com/96xaBhi.png" alt="" /></p>

<p>By debugging the game this is aparrently at <code class="language-plaintext highlighter-rouge">X=20</code>, which is obviously being clipped by the edge of the screen, so one of my assumptions is incorrect. The culprit turns out to be in the <code class="language-plaintext highlighter-rouge">Animation.Draw</code> method:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>var destRect = new Rectangle(
    (int) position.X - ScaledWidth/2,
    (int) position.Y - ScaledHeight/2,
    ScaledWidth,
    ScaledHeight);
</code></pre></div></div>

<p>The destination rectangle (the rectangle the sprite is being drawn at) is shifted by half the height and width, so the origin of the sprite is the center of the animation. This actually makes sense, so I need to change my logic to suit. The player‚Äôs <code class="language-plaintext highlighter-rouge">GetBounds()</code> method is changed to this:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public override Rectangle GetBounds()
{
    return GetBoundsAt(Position);
}

protected Rectangle GetBoundsAt(Vector2 position)
{
    return new Rectangle(
        (int) position.X - _configuration.Width / 2,
        (int) position.Y - _configuration.Height / 2,
        _configuration.Width,
        _configuration.Height);
}
</code></pre></div></div>

<p>And the <code class="language-plaintext highlighter-rouge">CheckNewPosition()</code> method uses the new <code class="language-plaintext highlighter-rouge">GetBoundsAt()</code> method:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>protected override bool CheckNewPosition(Vector2 newPosition)
{
    var newBounds = GetBoundsAt(newPosition);

    foreach (var boundary in _boundaries)
    {
        if (boundary.Intersects(newBounds))
        {
            return false;
        }
    }

    return true;
}
</code></pre></div></div>

<p>My tests still pass because the player has a default width and height of 0. I will update my tests to make sure the width of the player is handled correctly but this will do for now. When I start the game I need to push the starting position right a bit so I can move the player.</p>

<h3 id="testing-the-other-boundaries">Testing the other boundaries</h3>

<p>Implementing and testing the other boundaries is basically a rinse and repeat of the left boundary. Here is the test for the right boundary:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public class WhenPlayerIsOnRightBoundaryWithLeftThumbStickFullyRight
{
    [Fact]
    public void ThenThePositionIsNotChanged()
    {
        var configuration = ObjectMother.Sprites.PlayerSprite.PlayerConfigurations.Default
            .WithRightBoundary(10)
            .Build();
        var viewport = ObjectMother.Core.Viewports.Default
            .WithHeight(100)
            .WithWidth(100)
            .Build();
        var player = ObjectMother.Sprites.PlayerSprite.Players.Default
            .WithPlayerConfiguration(configuration)
            .WithViewport(viewport)
            .Build();
        var initialPosition = new Vector2(90, 5);
        player.Position = initialPosition;

        var gamePadState = ObjectMother.Input.GamePadStates.Default
            .WithLeftThumbstickFullyRight()
            .Build();
        var state = ObjectMother.Core.ShooterGameInputStates.Default
            .WithCurrentGamePadState(gamePadState)
            .Build();

        player.Update(state);

        player.Position.X.ShouldBe(90);
    }
}
</code></pre></div></div>

<p>And here are the final set of boundaries, fully unit tested and configurable:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>_boundaries = new[]
{
    new Rectangle(-100, 0, 100 + _configuration.LeftBoundary, _viewport.Height),
    new Rectangle(_viewport.Width - _configuration.RightBoundary, 0, 100, _viewport.Height), 
    new Rectangle(0, -100, _viewport.Width, 100 + _configuration.TopBoundary), 
    new Rectangle(0, _viewport.Height - _configuration.BottomBoundary, _viewport.Width, 100), 
};
</code></pre></div></div>

<h3 id="coming-up-next">Coming up next</h3>

<p>In my next post I‚Äôm going to refactor my tests to use a BDD format, which will simplify the tests and reduce some duplication. That will pave the way for implementing killing the player when it gets hit by an enemy.</p>

<h3 id="resources">Resources</h3>

<ul>
  <li><a href="up-and-running-with-monogame.html">Up and Running with MonoGame</a></li>
  <li><a href="xunit-tests-with-a-windows-8-1-store-app.html">xUnit tests in a Windows 8.1 Store App</a></li>
  <li><a href="adding-dependency-injection-to-a-monogame-application.html">Adding dependency injection to a MonoGame application</a></li>
  <li><a href="https://blogs.msdn.com/b/tarawalker/archive/2012/12/04/windows-8-game-development-using-c-xna-and-monogame-3-0-building-a-shooter-game-walkthrough-part-1-overview-installation-monogame-3-0-project-creation.aspx">Tara Walker‚Äôs original Shooter Game tutorial</a></li>
  <li><a href="https://pluralsight.com/training/courses/TableOfContents?courseName=xna&amp;highlight=john-sonmez_xna-m1-introduction*1,6#xna-m1-introduction">John Sonmez‚Äô Introduction to 2D Programming with XNA (Pluralsight video)</a> ($)</li>
</ul>
:ET