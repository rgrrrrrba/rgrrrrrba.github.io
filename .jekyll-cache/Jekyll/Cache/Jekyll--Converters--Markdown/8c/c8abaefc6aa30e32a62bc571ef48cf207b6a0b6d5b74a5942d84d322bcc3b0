I"◊<p>Ok so I‚Äôm working on a WPF launcher that loads a shell that loads a client. Three different appdomains. The launcher could load the shell. The shell could load the client. But when I tried to get the launcher to load the shell then the shell to load the client, I would get this lovely exception when the client instance was created:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Set property 'System.Windows.ResourceDictionary.DeferrableContent' threw an exception
</code></pre></div></div>

<p><a href="https://www.google.com.au/search?q=Set+property+'System.Windows.ResourceDictionary.DeferrableContent'+threw+an+exception.&amp;oq=Set+property+'System.Windows.ResourceDictionary.DeferrableContent'+threw+an+exception.&amp;aqs=chrome..69i57.519j0j4&amp;sourceid=chrome&amp;espv=210&amp;es_sm=122&amp;ie=UTF-8">Googling the exception</a> gave a lot of talk about duplicate values in the resource dictionaries, which I burned a pile of time on. Then I noticed that the exception had an inner exception which had an inner exception and so on, and the final exception was about a UI component being created in a non-UI thread (<code class="language-plaintext highlighter-rouge">InvalidOperationException</code>, ‚ÄúThe calling thread must be STA, because many UI components require this.‚Äù).</p>

<p>Turned out I was doing this in the shell, to keep its UI responsive:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>var launchCompletedResetEvent = new AutoResetEvent(false);
var worker = new BackgroundWorker();
worker.DoWork += (s,e) =&gt; {
    ... // download and extract the client
};
worker.RunWorkerCompleted += (s,e) =&gt; {
    ... // launch the client
    launchCompletedResetEvent.Set();
};
worker.RunWorkerAsync();
launchCompletedResetEvent.WaitOne();
</code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">launchCompletedResetEvent</code> mutex is so the shell didn‚Äôt terminate before launching the client.</p>

<p>This was launching the client in a non-UI thread. For some reason this seems to have worked when running the shell directly but not when running the shell through the launcher. Maybe when I ran the shell directly I was bypassing the download step and launching the client on the main thread. Actually that makes sense.</p>

<p>I just had to move the client launch to after the <code class="language-plaintext highlighter-rouge">WaitOne</code> to get everything working:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>var launchCompletedResetEvent = new AutoResetEvent(false);
var worker = new BackgroundWorker();
worker.DoWork += (s,e) =&gt; {
    ... // download and extract the client
};
worker.RunWorkerCompleted += (s,e) =&gt; {
    launchCompletedResetEvent.Set();
};
worker.RunWorkerAsync();
launchCompletedResetEvent.WaitOne();
... // launch the client
</code></pre></div></div>

:ET