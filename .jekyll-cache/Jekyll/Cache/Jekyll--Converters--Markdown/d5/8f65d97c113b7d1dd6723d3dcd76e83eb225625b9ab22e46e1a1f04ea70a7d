I"·<p>I looove convention tests. The idea is you have some assumption about the system that you want to test and enforce. In this case, I want all controller actions (bar some exceptions) to be decorated with the <code class="language-plaintext highlighter-rouge">AuthorizeAttribute</code>.</p>

<p>Iâ€™m using <a href="https://nunit.org/">NUnit</a> for the tests and <a href="https://shouldly.github.io/">Shouldly</a> to help with assertions. Iâ€™m also using <a href="https://autofac.org/">Autofac</a>, which shouldnâ€™t affect the tests except that it gives me a nice extension method.</p>

<h3 id="test-cases-in-nunit">Test cases in NUnit</h3>
<p>NUnit has a concept of <a href="https://nunit.org/index.php?p=testCase&amp;r=2.6.2">test cases</a> where a <a href="https://nunit.org/index.php?p=testCaseSource&amp;r=2.6.2">test case source</a> provides test casees to a test method. Each test case is executed in the test method as an individual test.</p>

<p>Hereâ€™s a simple example of a test cases. It tests integers from 1 to 10 and fails on any odd values:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public class TestCaseExample
{
    [Test]
    [TestCaseSource("TestCases")]
    public void TheNumberShouldBeEven(int i)
    {
        (i%2).ShouldBe(0);
    }

    public IEnumerable&lt;TestCaseData&gt; TestCases()
    {
        return Enumerable.Range(1, 10)
                         .Select(i =&gt; new TestCaseData(i))
            ;
    }
}
</code></pre></div></div>

<p>Note that the <code class="language-plaintext highlighter-rouge">TestCases()</code> method needs to be public and the <code class="language-plaintext highlighter-rouge">TestCaseSource</code> attribute allows NUnit to find the test case source by name.</p>

<h3 id="finding-all-controller-actions">Finding all controller actions</h3>
<p>Convention tests generally use reflection to build up a set of test cases. In this case I want all controller actions. First I find all classes that are <code class="language-plaintext highlighter-rouge">Controller</code>s. Then I find all methods in those classes that return something that is an <code class="language-plaintext highlighter-rouge">ActionResult</code>. It is a reasonable assumption that all of these methods are the controller actions that Iâ€™m interested in:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public IEnumerable&lt;TestCaseData&gt; TestCases()
{
	return typeof (MainController).Assembly
		.GetExportedTypes()
		.Where(t =&gt; t.IsAssignableTo&lt;Controller&gt;())
		.Where(t =&gt; !t.IsAbstract)
		.SelectMany(t =&gt; t.GetMethods())
		.Where(m =&gt; m.ReturnType.IsAssignableTo&lt;ActionResult&gt;())
		.Select(m =&gt; new TestCaseData(m).SetName(
			string.Format("{0}.{1}", m.DeclaringType.FullName, m.Name)))
		.ToArray();
}
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">typeof (MainController).Assembly</code> gives the assembly that contains the controllers. <code class="language-plaintext highlighter-rouge">GetExportedTypes()</code> is all types that are visible outside the assembly.</p>

<p><code class="language-plaintext highlighter-rouge">.Where(t =&gt; t.IsAssignableTo&lt;Controller&gt;())</code> limits the classes to those that subclass <code class="language-plaintext highlighter-rouge">Controller</code>. <code class="language-plaintext highlighter-rouge">Type.IsAssignableTo</code> is an extension method provided by Autofac which just inverts <code class="language-plaintext highlighter-rouge">Type.IsAssignableFrom</code>. This line could be replaced with <code class="language-plaintext highlighter-rouge">.Where(t =&gt; typeof(Controller).IsAssignableFrom(t))</code>.</p>

<p><code class="language-plaintext highlighter-rouge">.Where(t =&gt; !t.IsAbstract)</code> ignores any classes that are abstract. Weâ€™re only interested in controllers that could be instantiated. Any methods declared in an abstract base type that donâ€™t pass the convention test should be picked up when testing subclasses of the abstract base type.</p>

<p><code class="language-plaintext highlighter-rouge">.SelectMany(t =&gt; t.GetMethods())</code> selects all of the methods (<code class="language-plaintext highlighter-rouge">MethodInfo</code>) exposed by the controllers.</p>

<p><code class="language-plaintext highlighter-rouge">.Where(m =&gt; m.ReturnType.IsAssignableTo&lt;ActionResult&gt;())</code> limits the methods to those that return a subclass of <code class="language-plaintext highlighter-rouge">ActionResult</code>. Getting close now ;-)</p>

<p>Finally each method is bundled in to a <code class="language-plaintext highlighter-rouge">TestCaseData</code> instance which allows setting the name of the test case. <code class="language-plaintext highlighter-rouge">TestCases()</code> could just return <code class="language-plaintext highlighter-rouge">IEnumerable&lt;MethodInfo&gt;</code> but finding failing test sources would be a problem.</p>

<h3 id="testing-the-cases">Testing the cases</h3>
<p>Ease test case is tested seperately. All that needs to be done is check that the method is decorated with the required attribute.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[Test]
[TestCase("TestCases")]
public void MethodShouldHaveAuthorizeAttribute(MethodInfo methodInfo)
{
	methodInfo
		.GetCustomAttributes&lt;AuthorizeAttribute&gt;()
		.ShouldNotBeEmpty();
}
</code></pre></div></div>

<h3 id="ignoring-some-controllers">Ignoring some controllers</h3>

<p>I have a <code class="language-plaintext highlighter-rouge">LogInController</code> which I wish to ignore, so that anybody can at least see the log in page:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public IEnumerable&lt;TestCaseData&gt; TestCases()
{
	return typeof (MainController).Assembly
		.GetExportedTypes()
		.Where(t =&gt; t.IsAssignableTo&lt;Controller&gt;())
		.Where(t =&gt; !t.IsAbstract)
		
		// Ignore some types:
		.Where(t =&gt; !IsIgnored(t))

		.SelectMany(t =&gt; t.GetMethods())
		.Where(m =&gt; m.ReturnType.IsAssignableTo&lt;ActionResult&gt;())
		.Select(m =&gt; new TestCaseData(m).SetName(
			string.Format("{0}.{1}", m.DeclaringType.FullName, m.Name)))
		.ToArray();
}

readonly Type[] _ignoredTypes = new[] 
	{
		typeof(LogInController) 
	};

bool IsIgnored(Type type)
{
	return _ignoredTypes.Contains(type);
}
</code></pre></div></div>

:ET