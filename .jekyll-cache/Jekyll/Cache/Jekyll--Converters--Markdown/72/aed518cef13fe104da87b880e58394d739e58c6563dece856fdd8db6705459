I"Ø	<p>I needed to get all types that implemented a given interface that were registered with Autofac. Not a set of factories, that would be as simple as this:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>class Consumer
{
	public Consumer(IEnumerable&lt;Func&lt;IFoo&gt;&gt; fooFactories)
	{
		// ...
	}
}
</code></pre></div></div>

<p>What I really need is something like <code class="language-plaintext highlighter-rouge">Consumer(IEnumerable&lt;Type&gt; fooTypes)</code> where the types are everything implementing <code class="language-plaintext highlighter-rouge">IFoo</code>, but of course Autofac canâ€™t resolve that.</p>

<p>Inspired by <a href="https://stackoverflow.com/a/9503695/149259">this StackOverflow answer</a>, hereâ€™s an extension method that does what I need:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public static class LifetimeScopeExtensions
{
    public static IEnumerable&lt;Type&gt; GetImplementingTypes&lt;T&gt;(this ILifetimeScope scope)
    {
        return scope.ComponentRegistry
            .RegistrationsFor(new TypedService(typeof (T)))
            .Select(x =&gt; x.Activator)
            .OfType&lt;ReflectionActivator&gt;()
            .Select(x =&gt; x.LimitType);
    }
}
</code></pre></div></div>

<p>To use it my consumer just takes an <code class="language-plaintext highlighter-rouge">ILifetimeScope</code> dependency:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public Consumer(ILifetimeScope scope) 
{
	var fooTypes = scope.GetImplementingTypes&lt;IFoo&gt;();
}
</code></pre></div></div>

<p>Note that I needed to register the types both as the base type <code class="language-plaintext highlighter-rouge">IFoo</code> (for the implementing type resolution) and as self, so I could later resolve using <code class="language-plaintext highlighter-rouge">scope.Resolve(fooType)</code>. My registration looks like this:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>        builder.RegisterAssemblyTypes(typeof (IFoo).Assembly)
            .Where(t =&gt; t.IsAssignableTo&lt;IFoo&gt;())
            .Where(t =&gt; !t.IsAbstract)
            .As&lt;IFoo&gt;()
            .AsSelf()
            .InstancePerDependency();
</code></pre></div></div>

<p><img src="https://media.giphy.com/media/xQzml5M6C8Wly/giphy.gif" alt="" /></p>

:ET